name: 'Deploy Connector'
description: 'Try to deploy Connector with new tag'

inputs:
  version:
    description: 'ConnectorStaged version to reference'
    required: true
  access_token:
    description: 'commercetools access token'
    required: true
  is_previewable:
    description: 'If ConnectorStaged is using previewable access'
    required: true
  ct_region:
    description: 'commercetools region'
    required: true
  ct_project_key:
    description: 'commercetools project id'
    required: true
  ct_api_client_id:
    description: 'commercetools API client id'
    required: true
  ct_api_client_secret:
    description: 'commercetools API client secret'
    required: true
  ct_scopes:
    description: 'commercetools API client scopes'
    required: true
  ct_cart_type_key:
    description: 'commercetools custom cart type key'
    required: true
  ee_client_id:
    description: 'EagleEye API client id'
    required: true
  ee_client_secret:
    description: 'EagleEye API client secret'
    required: true
  connect_env:
    description: 'environment used for deployment'
    required: true
  connector_key:
    description: 'commercetools ConnectorStaged key (also used as deployment prefix)'
    required: true
  config_override:
    description: 'Stringified and escaped JSON to override all integration configurations'
    required: false
  ee_pos_url:
    description: 'EagleEye API POS URL'
    required: false
  shipping_method_map:
    description: 'Stringified JSON array for mapping shipping methods to EE UPCs'
    required: false
  ee_incoming_identifier:
    description: 'EagleEye Outlet Incoming Identifier'
    required: true
  ee_parent_incoming_identifier:
    description: 'EagleEye Outlet''s Parent unit Incoming Identifier'
    required: false
  ee_exclude_unidentified_customers:
    description: 'When set to true returns open offers only for identified customers'
    required: false
  always_store_basket_in_custom_object:
    description: Wether to always create a custom object for EE basket after opening a wallet
    required: false
  ee_api_client_timeout:
    description: Amount of time to wait before EE API calls timeout
    required: false
  ee_use_item_sku:
    description: Wether to set item SKUs as "SKU" instead of "UPC" for EagleEye Baskets
    required: false
  circuit_breaker_timeout:
    description: The time in milliseconds that action should be allowed to execute before timing out
    required: false
  circuit_breaker_reset_timeout:
    description: The time in milliseconds to wait before setting the breaker to halfOpen state
    required: false
  circuit_breaker_error_threshold_percentage:
    description: The error percentage at which to open the circuit and start short-circuiting requests to fallback
    required: false
  circuit_breaker_enabled:
    description: Whether the circuit breaker functionality is enabled
    required: false

runs:
  using: "composite"
  steps:
    - name: Set configurations as environment variables
      id: set_env_variables
      shell: bash
      run: |
        echo 'standard_configurations=[{"key":"CTP_REGION","value":"${{ inputs.ct_region }}"},{"key":"CTP_PROJECT_KEY","value":"${{ inputs.ct_project_key }}"},{"key":"CT_CART_TYPE_KEY","value":"${{ inputs.ct_cart_type_key }}"},{"key":"EE_POS_URL","value":"${{ inputs.ee_pos_url }}"},{"key":"SHIPPING_METHOD_MAP","value":"${{ inputs.shipping_method_map }}"},{"key":"EE_INCOMING_IDENTIFIER","value":"${{ inputs.ee_incoming_identifier }}"},{"key":"EE_EXCLUDE_UNIDENTIFIED_CUSTOMERS","value":"${{ inputs.ee_exclude_unidentified_customers }}"},{"key":"EE_PARENT_INCOMING_IDENTIFIER","value":"${{ inputs.ee_parent_incoming_identifier }}"},{"key":"CONFIG_OVERRIDE","value":"${{ inputs.config_override }}"},{"key":"ALWAYS_STORE_BASKET_IN_CUSTOM_OBJECT","value":"${{ inputs.always_store_basket_in_custom_object }}"},{"key":"EE_API_CLIENT_TIMEOUT","value":"${{ inputs.ee_api_client_timeout }}" },{"key":"CIRCUIT_BREAKER_TIMEOUT","value":"${{ inputs.circuit_breaker_timeout }}" },{"key":"CIRCUIT_BREAKER_RESET_TIMEOUT","value":"${{ inputs.circuit_breaker_reset_timeout }}" },{"key":"CIRCUIT_BREAKER_ERROR_THRESHOLD_PERCENTAGE","value":"${{ inputs.circuit_breaker_error_threshold_percentage }}" },{"key":"CIRCUIT_BREAKER_ENABLED","value":"${{ inputs.circuit_breaker_enabled }}" },{"key":"EE_USE_ITEM_SKU","value":"${{ inputs.ee_use_item_sku }}" }]' >> $GITHUB_ENV
        echo 'secured_configurations=[{"key":"CTP_CLIENT_ID","value":"${{ inputs.ct_api_client_id }}"},{"key":"CTP_CLIENT_SECRET","value":"${{ inputs.ct_api_client_secret }}"},{"key":"CTP_SCOPE","value":"${{ inputs.ct_scopes }}"},{"key":"EE_CLIENT_ID","value":"${{ inputs.ee_client_id }}"},{"key":"EE_CLIENT_SECRET","value":"${{ inputs.ee_client_secret }}"}]' >> $GITHUB_ENV
    - name: Deploy Connector with new tag
      id: ct_deploy_connector
      uses: ./.github/actions/webrequest-action
      with:
        url: https://connect.${{ inputs.ct_region }}.commercetools.com/${{ inputs.ct_project_key }}/deployments
        method: POST
        headers: '{"Authorization": "Bearer ${{ inputs.access_token }}"}'
        payload: '{"key":"${{ inputs.connector_key }}-deployment-${{ inputs.connect_env }}","connector":{"key":"${{ inputs.connector_key }}","version":${{ inputs.version }},"staged":${{ inputs.is_previewable == ''true'' }}},"region":"${{ inputs.ct_region }}","configurations":[{"applicationName":"integration","standardConfiguration": ${{ env.standard_configurations }},"securedConfiguration": ${{ env.secured_configurations }} }, {"applicationName":"integration_events","standardConfiguration": ${{ env.standard_configurations }},"securedConfiguration": ${{ env.secured_configurations }} }]}'
    - name: Check Connector deployment status
      id: ct_check_connector_deployment_status_final
      uses: ./.github/actions/poll-endpoint
      with:
        url: https://connect.${{ inputs.ct_region }}.commercetools.com/${{ inputs.ct_project_key }}/deployments/key=${{ inputs.connector_key }}-deployment-${{ inputs.connect_env }}
        method: GET
        authorization: 'Bearer ${{ inputs.access_token }}'
        expectStatus: 200
        expectBodyRegex: \"status\":\"Deployed\"
        timeout: 1260000
        interval: 15000

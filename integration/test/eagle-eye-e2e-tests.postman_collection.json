{
	"info": {
		"_postman_id": "2b2ca83a-80ce-42c3-bfbb-c6b342698b9d",
		"name": "EagleEye CT Plugin - E2E Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17495524"
	},
	"item": [
		{
			"name": "Basket Level Discounts",
			"item": [
				{
					"name": "Single discount applied",
					"item": [
						{
							"name": "Single product",
							"item": [
								{
									"name": "Obtain access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"var data = JSON.parse(responseBody);",
													"if(data.access_token){",
													"    pm.environment.set(\"ctp_access_token\", data.access_token);",
													"}",
													"if (data.scope) {",
													"    parts = data.scope.split(\" \");",
													"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
													"    if (parts.length > 0) {",
													"        scopeParts = parts[0];",
													"        pm.environment.set(\"project-key\", scopeParts[1]);",
													"        parts = parts.filter(scope => scope.length >= 3)",
													"        if (parts.length > 0) {",
													"            scopeParts = parts[0];",
													"            pm.environment.set(\"store-key\", scopeParts[2]);",
													"        }",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{client_id}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{client_secret}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{auth_url}}/oauth/token?grant_type=client_credentials",
											"host": [
												"{{auth_url}}"
											],
											"path": [
												"oauth",
												"token"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "client_credentials"
												}
											]
										},
										"description": "Use this request to obtain an access token for your commercetools platform project via Client Credentials Flow. As a prerequisite you must have filled out environment variables in Postman for projectKey, client_id and client_secret to use this."
									},
									"response": []
								},
								{
									"name": "Create Cart: Total Price > 100",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = JSON.parse(responseBody);",
													"",
													"pm.test('Check status code', () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
													"})",
													"",
													"pm.test(\"Discount on total price property exists\", function () {",
													"    pm.expect(data).to.haveOwnProperty('discountOnTotalPrice');",
													"});",
													"",
													"pm.test(\"Discounted amount is defined and value is greater than 0\", function () {",
													"    pm.expect(data.discountOnTotalPrice).to.haveOwnProperty('discountedAmount');",
													"    pm.expect(data.discountOnTotalPrice.discountedAmount.centAmount).to.be.greaterThan(0);",
													"});",
													"",
													"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
													"    pm.environment.set(\"cart-id\", data.results[0].id); ",
													"    pm.environment.set(\"cart-version\", data.results[0].version);",
													"}",
													"if(data.results && data.results[0] && data.results[0].key){",
													"    pm.environment.set(\"cart-key\", data.results[0].key); ",
													"}",
													"if(data.version){",
													"    pm.environment.set(\"cart-version\", data.version);",
													"}",
													"if(data.id){",
													"    pm.environment.set(\"cart-id\", data.id); ",
													"}",
													"if(data.key){",
													"    pm.environment.set(\"cart-key\", data.key);",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"currency\" : \"GBP\",\n  \"lineItems\": [\n      {\n          \"sku\": \"245873\",\n          \"quantity\": 3\n      }\n  ]\n}"
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/carts",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"carts"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
									},
									"response": []
								},
								{
									"name": "Delete Cart",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
													"var data = JSON.parse(responseBody);",
													"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
													"    pm.environment.set(\"cart-id\", data.results[0].id); ",
													"    pm.environment.set(\"cart-version\", data.results[0].version);",
													"}",
													"if(data.results && data.results[0] && data.results[0].key){",
													"    pm.environment.set(\"cart-key\", data.results[0].key); ",
													"}",
													"if(data.version){",
													"    pm.environment.set(\"cart-version\", data.version);",
													"}",
													"if(data.id){",
													"    pm.environment.set(\"cart-id\", data.id); ",
													"}",
													"if(data.key){",
													"    pm.environment.set(\"cart-key\", data.key);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/carts/{{cart-id}}?version={{cart-version}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"carts",
												"{{cart-id}}"
											],
											"query": [
												{
													"key": "dataErasure",
													"value": "",
													"disabled": true
												},
												{
													"key": "version",
													"value": "{{cart-version}}"
												},
												{
													"key": "expand",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "null"
									},
									"response": []
								}
							],
							"description": "## Products added:\n\n1. Mojito x 3, SKU: 245873, Pricing: £52.19\n    \n\n**Total Price:** £156.57"
						},
						{
							"name": "Multiple products",
							"item": [
								{
									"name": "Obtain access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"var data = JSON.parse(responseBody);",
													"if(data.access_token){",
													"    pm.environment.set(\"ctp_access_token\", data.access_token);",
													"}",
													"if (data.scope) {",
													"    parts = data.scope.split(\" \");",
													"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
													"    if (parts.length > 0) {",
													"        scopeParts = parts[0];",
													"        pm.environment.set(\"project-key\", scopeParts[1]);",
													"        parts = parts.filter(scope => scope.length >= 3)",
													"        if (parts.length > 0) {",
													"            scopeParts = parts[0];",
													"            pm.environment.set(\"store-key\", scopeParts[2]);",
													"        }",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{client_id}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{client_secret}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{auth_url}}/oauth/token?grant_type=client_credentials",
											"host": [
												"{{auth_url}}"
											],
											"path": [
												"oauth",
												"token"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "client_credentials"
												}
											]
										},
										"description": "Use this request to obtain an access token for your commercetools platform project via Client Credentials Flow. As a prerequisite you must have filled out environment variables in Postman for projectKey, client_id and client_secret to use this."
									},
									"response": []
								},
								{
									"name": "Create Cart: Multiple products, Total Price > 100",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = JSON.parse(responseBody);",
													"",
													"pm.test('Check status code', () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
													"})",
													"",
													"pm.test(\"Discount on total price property exists\", function () {",
													"    pm.expect(data).to.haveOwnProperty('discountOnTotalPrice');",
													"});",
													"",
													"pm.test(\"Discounted amount is defined and value is greater than 0\", function () {",
													"    pm.expect(data.discountOnTotalPrice).to.haveOwnProperty('discountedAmount');",
													"    pm.expect(data.discountOnTotalPrice.discountedAmount.centAmount).to.be.greaterThan(0);",
													"});",
													"",
													"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
													"    pm.environment.set(\"cart-id\", data.results[0].id); ",
													"    pm.environment.set(\"cart-version\", data.results[0].version);",
													"}",
													"if(data.results && data.results[0] && data.results[0].key){",
													"    pm.environment.set(\"cart-key\", data.results[0].key); ",
													"}",
													"if(data.version){",
													"    pm.environment.set(\"cart-version\", data.version);",
													"}",
													"if(data.id){",
													"    pm.environment.set(\"cart-id\", data.id); ",
													"}",
													"if(data.key){",
													"    pm.environment.set(\"cart-key\", data.key);",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"currency\" : \"GBP\",\n  \"lineItems\": [\n      {\n          \"sku\": \"245873\",\n          \"quantity\": 1\n      },\n      {\n          \"sku\": \"245884\",\n          \"quantity\": 1\n      },\n      {\n          \"sku\": \"245887\",\n          \"quantity\": 1\n      },\n      {\n          \"sku\": \"245874\",\n          \"quantity\": 1\n      },\n      {\n          \"sku\": \"245878\",\n          \"quantity\": 1\n      }\n  ]\n}"
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/carts",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"carts"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
									},
									"response": []
								},
								{
									"name": "Delete Cart",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
													"var data = JSON.parse(responseBody);",
													"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
													"    pm.environment.set(\"cart-id\", data.results[0].id); ",
													"    pm.environment.set(\"cart-version\", data.results[0].version);",
													"}",
													"if(data.results && data.results[0] && data.results[0].key){",
													"    pm.environment.set(\"cart-key\", data.results[0].key); ",
													"}",
													"if(data.version){",
													"    pm.environment.set(\"cart-version\", data.version);",
													"}",
													"if(data.id){",
													"    pm.environment.set(\"cart-id\", data.id); ",
													"}",
													"if(data.key){",
													"    pm.environment.set(\"cart-key\", data.key);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/carts/{{cart-id}}?version={{cart-version}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"carts",
												"{{cart-id}}"
											],
											"query": [
												{
													"key": "dataErasure",
													"value": "",
													"disabled": true
												},
												{
													"key": "version",
													"value": "{{cart-version}}"
												},
												{
													"key": "expand",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "null"
									},
									"response": []
								}
							],
							"description": "## Products added:\n\n1. Mojito, SKU: 245873, Pricing: £52.19\n2. Hand Soap, SKU: 245884, Pricing: £21.57\n3. Juicing Oranges, SKU: 245887, Pricing: £35.49\n4. Diet Lemonade 1ltr, SKU: 245874, Pricing: £12.39\n5. Can Cola, SKU: 245878, Pricing: £17.27\n    \n\n**Total Price:** £138.91"
						}
					],
					"description": "## Discount information\n\nCondition: Total price of basket should be above 100 pounds.\n\n- Campaignid: 1711495.\n- Campaign name: Open Discount Basket (10% off 100).\n- Campaign type: Discount Basket.\n- Reward type: 20% Off basket."
				},
				{
					"name": "Discount not applied",
					"item": [
						{
							"name": "Single product",
							"item": [
								{
									"name": "Obtain access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"var data = JSON.parse(responseBody);",
													"if(data.access_token){",
													"    pm.environment.set(\"ctp_access_token\", data.access_token);",
													"}",
													"if (data.scope) {",
													"    parts = data.scope.split(\" \");",
													"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
													"    if (parts.length > 0) {",
													"        scopeParts = parts[0];",
													"        pm.environment.set(\"project-key\", scopeParts[1]);",
													"        parts = parts.filter(scope => scope.length >= 3)",
													"        if (parts.length > 0) {",
													"            scopeParts = parts[0];",
													"            pm.environment.set(\"store-key\", scopeParts[2]);",
													"        }",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{client_id}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{client_secret}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{auth_url}}/oauth/token?grant_type=client_credentials",
											"host": [
												"{{auth_url}}"
											],
											"path": [
												"oauth",
												"token"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "client_credentials"
												}
											]
										},
										"description": "Use this request to obtain an access token for your commercetools platform project via Client Credentials Flow. As a prerequisite you must have filled out environment variables in Postman for projectKey, client_id and client_secret to use this."
									},
									"response": []
								},
								{
									"name": "Create Cart: Total Price < 100",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = JSON.parse(responseBody);",
													"",
													"pm.test('Check status code', () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
													"})",
													"",
													"pm.test(\"Discount on total price property does not exist\", function () {",
													"    pm.expect(data).not.to.haveOwnProperty('discountOnTotalPrice');",
													"});",
													"",
													"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
													"    pm.environment.set(\"cart-id\", data.results[0].id); ",
													"    pm.environment.set(\"cart-version\", data.results[0].version);",
													"}",
													"if(data.results && data.results[0] && data.results[0].key){",
													"    pm.environment.set(\"cart-key\", data.results[0].key); ",
													"}",
													"if(data.version){",
													"    pm.environment.set(\"cart-version\", data.version);",
													"}",
													"if(data.id){",
													"    pm.environment.set(\"cart-id\", data.id); ",
													"}",
													"if(data.key){",
													"    pm.environment.set(\"cart-key\", data.key);",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"currency\" : \"GBP\",\n  \"lineItems\": [\n      {\n          \"sku\": \"245873\",\n          \"quantity\": 1\n      }\n  ]\n}"
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/carts",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"carts"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
									},
									"response": []
								},
								{
									"name": "Delete Cart",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
													"var data = JSON.parse(responseBody);",
													"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
													"    pm.environment.set(\"cart-id\", data.results[0].id); ",
													"    pm.environment.set(\"cart-version\", data.results[0].version);",
													"}",
													"if(data.results && data.results[0] && data.results[0].key){",
													"    pm.environment.set(\"cart-key\", data.results[0].key); ",
													"}",
													"if(data.version){",
													"    pm.environment.set(\"cart-version\", data.version);",
													"}",
													"if(data.id){",
													"    pm.environment.set(\"cart-id\", data.id); ",
													"}",
													"if(data.key){",
													"    pm.environment.set(\"cart-key\", data.key);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/carts/{{cart-id}}?version={{cart-version}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"carts",
												"{{cart-id}}"
											],
											"query": [
												{
													"key": "dataErasure",
													"value": "",
													"disabled": true
												},
												{
													"key": "version",
													"value": "{{cart-version}}"
												},
												{
													"key": "expand",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "null"
									},
									"response": []
								}
							],
							"description": "## Products added:\n\n1. Mojito, SKU: 245873, Pricing: £52.19"
						},
						{
							"name": "Multiple products",
							"item": [
								{
									"name": "Obtain access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"var data = JSON.parse(responseBody);",
													"if(data.access_token){",
													"    pm.environment.set(\"ctp_access_token\", data.access_token);",
													"}",
													"if (data.scope) {",
													"    parts = data.scope.split(\" \");",
													"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
													"    if (parts.length > 0) {",
													"        scopeParts = parts[0];",
													"        pm.environment.set(\"project-key\", scopeParts[1]);",
													"        parts = parts.filter(scope => scope.length >= 3)",
													"        if (parts.length > 0) {",
													"            scopeParts = parts[0];",
													"            pm.environment.set(\"store-key\", scopeParts[2]);",
													"        }",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{client_id}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{client_secret}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{auth_url}}/oauth/token?grant_type=client_credentials",
											"host": [
												"{{auth_url}}"
											],
											"path": [
												"oauth",
												"token"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "client_credentials"
												}
											]
										},
										"description": "Use this request to obtain an access token for your commercetools platform project via Client Credentials Flow. As a prerequisite you must have filled out environment variables in Postman for projectKey, client_id and client_secret to use this."
									},
									"response": []
								},
								{
									"name": "Create Cart: Multiple products, Total Price < 100",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = JSON.parse(responseBody);",
													"",
													"pm.test('Check status code', () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
													"})",
													"",
													"pm.test(\"Discount on total price property does not exist\", function () {",
													"    pm.expect(data).not.to.haveOwnProperty('discountOnTotalPrice');",
													"});",
													"",
													"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
													"    pm.environment.set(\"cart-id\", data.results[0].id); ",
													"    pm.environment.set(\"cart-version\", data.results[0].version);",
													"}",
													"if(data.results && data.results[0] && data.results[0].key){",
													"    pm.environment.set(\"cart-key\", data.results[0].key); ",
													"}",
													"if(data.version){",
													"    pm.environment.set(\"cart-version\", data.version);",
													"}",
													"if(data.id){",
													"    pm.environment.set(\"cart-id\", data.id); ",
													"}",
													"if(data.key){",
													"    pm.environment.set(\"cart-key\", data.key);",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"currency\" : \"GBP\",\n  \"lineItems\": [\n           {\n          \"sku\": \"245876\",\n          \"quantity\": 1\n      },\n      {\n          \"sku\": \"245884\",\n          \"quantity\": 1\n      },\n      {\n          \"sku\": \"245887\",\n          \"quantity\": 1\n      }\n  ]\n}"
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/carts",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"carts"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
									},
									"response": []
								},
								{
									"name": "Delete Cart",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
													"var data = JSON.parse(responseBody);",
													"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
													"    pm.environment.set(\"cart-id\", data.results[0].id); ",
													"    pm.environment.set(\"cart-version\", data.results[0].version);",
													"}",
													"if(data.results && data.results[0] && data.results[0].key){",
													"    pm.environment.set(\"cart-key\", data.results[0].key); ",
													"}",
													"if(data.version){",
													"    pm.environment.set(\"cart-version\", data.version);",
													"}",
													"if(data.id){",
													"    pm.environment.set(\"cart-id\", data.id); ",
													"}",
													"if(data.key){",
													"    pm.environment.set(\"cart-key\", data.key);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/carts/{{cart-id}}?version={{cart-version}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"carts",
												"{{cart-id}}"
											],
											"query": [
												{
													"key": "dataErasure",
													"value": "",
													"disabled": true
												},
												{
													"key": "version",
													"value": "{{cart-version}}"
												},
												{
													"key": "expand",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "null"
									},
									"response": []
								}
							],
							"description": "## Products added:\n\n1. Take Away large Filter Coffee, SKU: 245876, Pricing: £38.27\n2. Hand Soap, SKU: 245884, Pricing: £21.57\n3. Juicing Oranges, SKU: 245887, Pricing: £35.49\n    \n\n**Total Price =** £95.33"
						}
					],
					"description": "## Discount information\n\nCondition: Total price of basket should be above 100 pounds\n\n- Campaignid: 1711495\n    \n- Campaign name: Open Discount Basket (10% off 100)\n    \n- Campaign type: Discount Basket\n    \n- Reward type: 20% Off basket"
				},
				{
					"name": "Multiple discounts applied",
					"item": [
						{
							"name": "Targetted Basket with Total price > 100",
							"item": [
								{
									"name": "Obtain access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"var data = JSON.parse(responseBody);",
													"if(data.access_token){",
													"    pm.environment.set(\"ctp_access_token\", data.access_token);",
													"}",
													"if (data.scope) {",
													"    parts = data.scope.split(\" \");",
													"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
													"    if (parts.length > 0) {",
													"        scopeParts = parts[0];",
													"        pm.environment.set(\"project-key\", scopeParts[1]);",
													"        parts = parts.filter(scope => scope.length >= 3)",
													"        if (parts.length > 0) {",
													"            scopeParts = parts[0];",
													"            pm.environment.set(\"store-key\", scopeParts[2]);",
													"        }",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{client_id}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{client_secret}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{auth_url}}/oauth/token?grant_type=client_credentials",
											"host": [
												"{{auth_url}}"
											],
											"path": [
												"oauth",
												"token"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "client_credentials"
												}
											]
										},
										"description": "Use this request to obtain an access token for your commercetools platform project via Client Credentials Flow. As a prerequisite you must have filled out environment variables in Postman for projectKey, client_id and client_secret to use this."
									},
									"response": []
								},
								{
									"name": "Create Cart: Targetted, Total Price > 100",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = JSON.parse(responseBody);",
													"",
													"pm.test('Check status code', () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
													"})",
													"",
													"pm.test(\"Discount on total price property exists\", function () {",
													"    pm.expect(data).to.haveOwnProperty('discountOnTotalPrice');",
													"});",
													"",
													"pm.test(\"Discounted amount is defined and value is greater than 0\", function () {",
													"    pm.expect(data.discountOnTotalPrice).to.haveOwnProperty('discountedAmount');",
													"    pm.expect(data.discountOnTotalPrice.discountedAmount.centAmount).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Multiple discounts are registered under 'appliedDiscounts'\", function () {",
													"    pm.expect(data.custom.fields.appliedDiscounts.length).to.be.greaterThan(1)",
													"});",
													"",
													"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
													"    pm.environment.set(\"cart-id\", data.results[0].id); ",
													"    pm.environment.set(\"cart-version\", data.results[0].version);",
													"}",
													"if(data.results && data.results[0] && data.results[0].key){",
													"    pm.environment.set(\"cart-key\", data.results[0].key); ",
													"}",
													"if(data.version){",
													"    pm.environment.set(\"cart-version\", data.version);",
													"}",
													"if(data.id){",
													"    pm.environment.set(\"cart-id\", data.id); ",
													"}",
													"if(data.key){",
													"    pm.environment.set(\"cart-key\", data.key);",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"currency\" : \"GBP\",\n  \"customerEmail\": \"john.toe1@example.org\",\n  \"lineItems\": [\n      {\n          \"sku\": \"245873\",\n          \"quantity\": 3\n      }\n  ]\n}"
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/carts",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"carts"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
									},
									"response": []
								},
								{
									"name": "Delete Cart",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
													"var data = JSON.parse(responseBody);",
													"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
													"    pm.environment.set(\"cart-id\", data.results[0].id); ",
													"    pm.environment.set(\"cart-version\", data.results[0].version);",
													"}",
													"if(data.results && data.results[0] && data.results[0].key){",
													"    pm.environment.set(\"cart-key\", data.results[0].key); ",
													"}",
													"if(data.version){",
													"    pm.environment.set(\"cart-version\", data.version);",
													"}",
													"if(data.id){",
													"    pm.environment.set(\"cart-id\", data.id); ",
													"}",
													"if(data.key){",
													"    pm.environment.set(\"cart-key\", data.key);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/carts/{{cart-id}}?version={{cart-version}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"carts",
												"{{cart-id}}"
											],
											"query": [
												{
													"key": "dataErasure",
													"value": "",
													"disabled": true
												},
												{
													"key": "version",
													"value": "{{cart-version}}"
												},
												{
													"key": "expand",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "null"
									},
									"response": []
								}
							],
							"description": "## Products added:\n\n1. Mojito, SKU: 245873, Pricing: £52.19\n    \n\n## Customer:\n\n1. Email: [john.toe1@example.org](https://mailto:john.toe1@example.org)"
						}
					],
					"description": "## Discounts information\n\n### 1 - Campaign Name: Open Discount Basket (10% off 100)\n\nTotal price of basket should be above 100 pounds.\n\n- Campaignid: 1711495.\n- Campaign type: Discount Basket.\n- Reward type: 20% Off basket.\n    \n\n### 2 - Campaign Name: Targeted Basket Discount (£1 off £10 Basket Spend)\n\n- Campaignid: 1653869.\n- Campaign type: Discount Basket.\n- Reward type: 1£ Off basket."
				}
			],
			"description": "Please refer to folder-level overviews for corresponding test information."
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "accessToken",
				"value": "{{ctp_access_token}}",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			},
			{
				"key": "tokenType",
				"value": "Bearer",
				"type": "string"
			}
		]
	}
}
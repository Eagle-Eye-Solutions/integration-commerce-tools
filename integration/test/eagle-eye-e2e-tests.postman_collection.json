{
	"info": {
		"_postman_id": "2b2ca83a-80ce-42c3-bfbb-c6b342698b9d",
		"name": "EagleEye CT Plugin - E2E Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17495524"
	},
	"item": [
		{
			"name": "Basket Level Discounts",
			"item": [
				{
					"name": "Single discount applied",
					"item": [
						{
							"name": "Single product",
							"item": [
								{
									"name": "Obtain access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"var data = JSON.parse(responseBody);",
													"if(data.access_token){",
													"    pm.environment.set(\"ctp_access_token\", data.access_token);",
													"}",
													"if (data.scope) {",
													"    parts = data.scope.split(\" \");",
													"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
													"    if (parts.length > 0) {",
													"        scopeParts = parts[0];",
													"        pm.environment.set(\"project-key\", scopeParts[1]);",
													"        parts = parts.filter(scope => scope.length >= 3)",
													"        if (parts.length > 0) {",
													"            scopeParts = parts[0];",
													"            pm.environment.set(\"store-key\", scopeParts[2]);",
													"        }",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{client_id}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{client_secret}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{auth_url}}/oauth/token?grant_type=client_credentials",
											"host": [
												"{{auth_url}}"
											],
											"path": [
												"oauth",
												"token"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "client_credentials"
												}
											]
										},
										"description": "Use this request to obtain an access token for your commercetools platform project via Client Credentials Flow. As a prerequisite you must have filled out environment variables in Postman for projectKey, client_id and client_secret to use this."
									},
									"response": []
								},
								{
									"name": "Create Cart: Total Price > 100",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = JSON.parse(responseBody);",
													"",
													"pm.test('Check status code', () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
													"})",
													"",
													"pm.test(\"Discount on total price property exists\", function () {",
													"    pm.expect(data).to.haveOwnProperty('discountOnTotalPrice');",
													"});",
													"",
													"pm.test(\"Discounted amount is defined and value is greater than 0\", function () {",
													"    pm.expect(data.discountOnTotalPrice).to.haveOwnProperty('discountedAmount');",
													"    pm.expect(data.discountOnTotalPrice.discountedAmount.centAmount).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Discount is registered under 'eagleeye-appliedDiscounts'\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-appliedDiscounts'].some(discount => discount.includes('Basket'))).to.be.true;",
													"});",
													"",
													"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
													"    pm.environment.set(\"cart-id\", data.results[0].id); ",
													"    pm.environment.set(\"cart-version\", data.results[0].version);",
													"}",
													"if(data.results && data.results[0] && data.results[0].key){",
													"    pm.environment.set(\"cart-key\", data.results[0].key); ",
													"}",
													"if(data.version){",
													"    pm.environment.set(\"cart-version\", data.version);",
													"}",
													"if(data.id){",
													"    pm.environment.set(\"cart-id\", data.id); ",
													"}",
													"if(data.key){",
													"    pm.environment.set(\"cart-key\", data.key);",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"currency\" : \"GBP\",\n  \"lineItems\": [\n      {\n          \"sku\": \"245873\",\n          \"quantity\": 3\n      }\n  ]\n}"
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/carts",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"carts"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
									},
									"response": []
								},
								{
									"name": "Delete Cart",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
													"var data = JSON.parse(responseBody);",
													"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
													"    pm.environment.set(\"cart-id\", data.results[0].id); ",
													"    pm.environment.set(\"cart-version\", data.results[0].version);",
													"}",
													"if(data.results && data.results[0] && data.results[0].key){",
													"    pm.environment.set(\"cart-key\", data.results[0].key); ",
													"}",
													"if(data.version){",
													"    pm.environment.set(\"cart-version\", data.version);",
													"}",
													"if(data.id){",
													"    pm.environment.set(\"cart-id\", data.id); ",
													"}",
													"if(data.key){",
													"    pm.environment.set(\"cart-key\", data.key);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/carts/{{cart-id}}?version={{cart-version}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"carts",
												"{{cart-id}}"
											],
											"query": [
												{
													"key": "dataErasure",
													"value": "",
													"disabled": true
												},
												{
													"key": "version",
													"value": "{{cart-version}}"
												},
												{
													"key": "expand",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "null"
									},
									"response": []
								}
							],
							"description": "## Products added:\n\n1. Mojito x 3, SKU: 245873, Pricing: £52.19\n    \n\n**Total Price:** £156.57"
						},
						{
							"name": "Multiple products",
							"item": [
								{
									"name": "Obtain access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"var data = JSON.parse(responseBody);",
													"if(data.access_token){",
													"    pm.environment.set(\"ctp_access_token\", data.access_token);",
													"}",
													"if (data.scope) {",
													"    parts = data.scope.split(\" \");",
													"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
													"    if (parts.length > 0) {",
													"        scopeParts = parts[0];",
													"        pm.environment.set(\"project-key\", scopeParts[1]);",
													"        parts = parts.filter(scope => scope.length >= 3)",
													"        if (parts.length > 0) {",
													"            scopeParts = parts[0];",
													"            pm.environment.set(\"store-key\", scopeParts[2]);",
													"        }",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{client_id}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{client_secret}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{auth_url}}/oauth/token?grant_type=client_credentials",
											"host": [
												"{{auth_url}}"
											],
											"path": [
												"oauth",
												"token"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "client_credentials"
												}
											]
										},
										"description": "Use this request to obtain an access token for your commercetools platform project via Client Credentials Flow. As a prerequisite you must have filled out environment variables in Postman for projectKey, client_id and client_secret to use this."
									},
									"response": []
								},
								{
									"name": "Create Cart: Multiple products, Total Price > 100",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = JSON.parse(responseBody);",
													"",
													"pm.test('Check status code', () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
													"})",
													"",
													"pm.test(\"Discount on total price property exists\", function () {",
													"    pm.expect(data).to.haveOwnProperty('discountOnTotalPrice');",
													"});",
													"",
													"pm.test(\"Discounted amount is defined and value is greater than 0\", function () {",
													"    pm.expect(data.discountOnTotalPrice).to.haveOwnProperty('discountedAmount');",
													"    pm.expect(data.discountOnTotalPrice.discountedAmount.centAmount).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Discount is registered under 'eagleeye-appliedDiscounts'\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-appliedDiscounts'].some(discount => discount.includes('Basket'))).to.be.true;",
													"});",
													"",
													"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
													"    pm.environment.set(\"cart-id\", data.results[0].id); ",
													"    pm.environment.set(\"cart-version\", data.results[0].version);",
													"}",
													"if(data.results && data.results[0] && data.results[0].key){",
													"    pm.environment.set(\"cart-key\", data.results[0].key); ",
													"}",
													"if(data.version){",
													"    pm.environment.set(\"cart-version\", data.version);",
													"}",
													"if(data.id){",
													"    pm.environment.set(\"cart-id\", data.id); ",
													"}",
													"if(data.key){",
													"    pm.environment.set(\"cart-key\", data.key);",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"currency\" : \"GBP\",\n  \"lineItems\": [\n      {\n          \"sku\": \"245873\",\n          \"quantity\": 1\n      },\n      {\n          \"sku\": \"245884\",\n          \"quantity\": 1\n      },\n      {\n          \"sku\": \"245887\",\n          \"quantity\": 1\n      },\n      {\n          \"sku\": \"245874\",\n          \"quantity\": 1\n      },\n      {\n          \"sku\": \"245878\",\n          \"quantity\": 1\n      }\n  ]\n}"
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/carts",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"carts"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
									},
									"response": []
								},
								{
									"name": "Delete Cart",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
													"var data = JSON.parse(responseBody);",
													"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
													"    pm.environment.set(\"cart-id\", data.results[0].id); ",
													"    pm.environment.set(\"cart-version\", data.results[0].version);",
													"}",
													"if(data.results && data.results[0] && data.results[0].key){",
													"    pm.environment.set(\"cart-key\", data.results[0].key); ",
													"}",
													"if(data.version){",
													"    pm.environment.set(\"cart-version\", data.version);",
													"}",
													"if(data.id){",
													"    pm.environment.set(\"cart-id\", data.id); ",
													"}",
													"if(data.key){",
													"    pm.environment.set(\"cart-key\", data.key);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/carts/{{cart-id}}?version={{cart-version}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"carts",
												"{{cart-id}}"
											],
											"query": [
												{
													"key": "dataErasure",
													"value": "",
													"disabled": true
												},
												{
													"key": "version",
													"value": "{{cart-version}}"
												},
												{
													"key": "expand",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "null"
									},
									"response": []
								}
							],
							"description": "## Products added:\n\n1. Mojito, SKU: 245873, Pricing: £52.19\n2. Hand Soap, SKU: 245884, Pricing: £21.57\n3. Juicing Oranges, SKU: 245887, Pricing: £35.49\n4. Diet Lemonade 1ltr, SKU: 245874, Pricing: £12.39\n5. Can Cola, SKU: 245878, Pricing: £17.27\n    \n\n**Total Price:** £138.91"
						}
					],
					"description": "## Discount information\n\nCondition: Total price of basket should be above 100 pounds.\n\n- Campaignid: 1711495.\n- Campaign name: Open Discount Basket (10% off 100).\n- Campaign type: Discount Basket.\n- Reward type: 20% Off basket."
				},
				{
					"name": "Discount not applied",
					"item": [
						{
							"name": "Single product",
							"item": [
								{
									"name": "Obtain access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"var data = JSON.parse(responseBody);",
													"if(data.access_token){",
													"    pm.environment.set(\"ctp_access_token\", data.access_token);",
													"}",
													"if (data.scope) {",
													"    parts = data.scope.split(\" \");",
													"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
													"    if (parts.length > 0) {",
													"        scopeParts = parts[0];",
													"        pm.environment.set(\"project-key\", scopeParts[1]);",
													"        parts = parts.filter(scope => scope.length >= 3)",
													"        if (parts.length > 0) {",
													"            scopeParts = parts[0];",
													"            pm.environment.set(\"store-key\", scopeParts[2]);",
													"        }",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{client_id}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{client_secret}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{auth_url}}/oauth/token?grant_type=client_credentials",
											"host": [
												"{{auth_url}}"
											],
											"path": [
												"oauth",
												"token"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "client_credentials"
												}
											]
										},
										"description": "Use this request to obtain an access token for your commercetools platform project via Client Credentials Flow. As a prerequisite you must have filled out environment variables in Postman for projectKey, client_id and client_secret to use this."
									},
									"response": []
								},
								{
									"name": "Create Cart: Total Price < 100",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = JSON.parse(responseBody);",
													"",
													"pm.test('Check status code', () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
													"})",
													"",
													"pm.test(\"Discount on total price property does not exist\", function () {",
													"    pm.expect(data).not.to.haveOwnProperty('discountOnTotalPrice');",
													"});",
													"",
													"pm.test(\"Discount is not registered under 'eagleeye-appliedDiscounts'\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-appliedDiscounts'].some(discount => discount.includes('Basket'))).to.be.false;",
													"});",
													"",
													"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
													"    pm.environment.set(\"cart-id\", data.results[0].id); ",
													"    pm.environment.set(\"cart-version\", data.results[0].version);",
													"}",
													"if(data.results && data.results[0] && data.results[0].key){",
													"    pm.environment.set(\"cart-key\", data.results[0].key); ",
													"}",
													"if(data.version){",
													"    pm.environment.set(\"cart-version\", data.version);",
													"}",
													"if(data.id){",
													"    pm.environment.set(\"cart-id\", data.id); ",
													"}",
													"if(data.key){",
													"    pm.environment.set(\"cart-key\", data.key);",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"currency\" : \"GBP\",\n  \"lineItems\": [\n      {\n          \"sku\": \"245873\",\n          \"quantity\": 1\n      }\n  ]\n}"
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/carts",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"carts"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
									},
									"response": []
								},
								{
									"name": "Delete Cart",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
													"var data = JSON.parse(responseBody);",
													"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
													"    pm.environment.set(\"cart-id\", data.results[0].id); ",
													"    pm.environment.set(\"cart-version\", data.results[0].version);",
													"}",
													"if(data.results && data.results[0] && data.results[0].key){",
													"    pm.environment.set(\"cart-key\", data.results[0].key); ",
													"}",
													"if(data.version){",
													"    pm.environment.set(\"cart-version\", data.version);",
													"}",
													"if(data.id){",
													"    pm.environment.set(\"cart-id\", data.id); ",
													"}",
													"if(data.key){",
													"    pm.environment.set(\"cart-key\", data.key);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/carts/{{cart-id}}?version={{cart-version}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"carts",
												"{{cart-id}}"
											],
											"query": [
												{
													"key": "dataErasure",
													"value": "",
													"disabled": true
												},
												{
													"key": "version",
													"value": "{{cart-version}}"
												},
												{
													"key": "expand",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "null"
									},
									"response": []
								}
							],
							"description": "## Products added:\n\n1. Mojito, SKU: 245873, Pricing: £52.19"
						},
						{
							"name": "Multiple products",
							"item": [
								{
									"name": "Obtain access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"var data = JSON.parse(responseBody);",
													"if(data.access_token){",
													"    pm.environment.set(\"ctp_access_token\", data.access_token);",
													"}",
													"if (data.scope) {",
													"    parts = data.scope.split(\" \");",
													"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
													"    if (parts.length > 0) {",
													"        scopeParts = parts[0];",
													"        pm.environment.set(\"project-key\", scopeParts[1]);",
													"        parts = parts.filter(scope => scope.length >= 3)",
													"        if (parts.length > 0) {",
													"            scopeParts = parts[0];",
													"            pm.environment.set(\"store-key\", scopeParts[2]);",
													"        }",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{client_id}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{client_secret}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{auth_url}}/oauth/token?grant_type=client_credentials",
											"host": [
												"{{auth_url}}"
											],
											"path": [
												"oauth",
												"token"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "client_credentials"
												}
											]
										},
										"description": "Use this request to obtain an access token for your commercetools platform project via Client Credentials Flow. As a prerequisite you must have filled out environment variables in Postman for projectKey, client_id and client_secret to use this."
									},
									"response": []
								},
								{
									"name": "Create Cart: Multiple products, Total Price < 100",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = JSON.parse(responseBody);",
													"",
													"pm.test('Check status code', () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
													"})",
													"",
													"pm.test(\"Discount on total price property does not exist\", function () {",
													"    pm.expect(data).not.to.haveOwnProperty('discountOnTotalPrice');",
													"});",
													"",
													"pm.test(\"Discount is not registered under 'eagleeye-appliedDiscounts'\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-appliedDiscounts'].some(discount => discount.includes('Basket'))).to.be.false;",
													"});",
													"",
													"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
													"    pm.environment.set(\"cart-id\", data.results[0].id); ",
													"    pm.environment.set(\"cart-version\", data.results[0].version);",
													"}",
													"if(data.results && data.results[0] && data.results[0].key){",
													"    pm.environment.set(\"cart-key\", data.results[0].key); ",
													"}",
													"if(data.version){",
													"    pm.environment.set(\"cart-version\", data.version);",
													"}",
													"if(data.id){",
													"    pm.environment.set(\"cart-id\", data.id); ",
													"}",
													"if(data.key){",
													"    pm.environment.set(\"cart-key\", data.key);",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"currency\" : \"GBP\",\n  \"lineItems\": [\n           {\n          \"sku\": \"245876\",\n          \"quantity\": 1\n      },\n      {\n          \"sku\": \"245884\",\n          \"quantity\": 1\n      },\n      {\n          \"sku\": \"245887\",\n          \"quantity\": 1\n      }\n  ]\n}"
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/carts",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"carts"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
									},
									"response": []
								},
								{
									"name": "Delete Cart",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
													"var data = JSON.parse(responseBody);",
													"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
													"    pm.environment.set(\"cart-id\", data.results[0].id); ",
													"    pm.environment.set(\"cart-version\", data.results[0].version);",
													"}",
													"if(data.results && data.results[0] && data.results[0].key){",
													"    pm.environment.set(\"cart-key\", data.results[0].key); ",
													"}",
													"if(data.version){",
													"    pm.environment.set(\"cart-version\", data.version);",
													"}",
													"if(data.id){",
													"    pm.environment.set(\"cart-id\", data.id); ",
													"}",
													"if(data.key){",
													"    pm.environment.set(\"cart-key\", data.key);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/carts/{{cart-id}}?version={{cart-version}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"carts",
												"{{cart-id}}"
											],
											"query": [
												{
													"key": "dataErasure",
													"value": "",
													"disabled": true
												},
												{
													"key": "version",
													"value": "{{cart-version}}"
												},
												{
													"key": "expand",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "null"
									},
									"response": []
								}
							],
							"description": "## Products added:\n\n1. Take Away large Filter Coffee, SKU: 245876, Pricing: £38.27\n2. Hand Soap, SKU: 245884, Pricing: £21.57\n3. Juicing Oranges, SKU: 245887, Pricing: £35.49\n    \n\n**Total Price =** £95.33"
						}
					],
					"description": "## Discount information\n\nCondition: Total price of basket should be above 100 pounds\n\n- Campaignid: 1711495\n    \n- Campaign name: Open Discount Basket (10% off 100)\n    \n- Campaign type: Discount Basket\n    \n- Reward type: 20% Off basket"
				},
				{
					"name": "Multiple discounts applied",
					"item": [
						{
							"name": "Targeted Basket with Total price > 100",
							"item": [
								{
									"name": "Obtain access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"var data = JSON.parse(responseBody);",
													"if(data.access_token){",
													"    pm.environment.set(\"ctp_access_token\", data.access_token);",
													"}",
													"if (data.scope) {",
													"    parts = data.scope.split(\" \");",
													"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
													"    if (parts.length > 0) {",
													"        scopeParts = parts[0];",
													"        pm.environment.set(\"project-key\", scopeParts[1]);",
													"        parts = parts.filter(scope => scope.length >= 3)",
													"        if (parts.length > 0) {",
													"            scopeParts = parts[0];",
													"            pm.environment.set(\"store-key\", scopeParts[2]);",
													"        }",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{client_id}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{client_secret}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{auth_url}}/oauth/token?grant_type=client_credentials",
											"host": [
												"{{auth_url}}"
											],
											"path": [
												"oauth",
												"token"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "client_credentials"
												}
											]
										},
										"description": "Use this request to obtain an access token for your commercetools platform project via Client Credentials Flow. As a prerequisite you must have filled out environment variables in Postman for projectKey, client_id and client_secret to use this."
									},
									"response": []
								},
								{
									"name": "Create Cart: Targeted, Total Price > 100",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = JSON.parse(responseBody);",
													"",
													"pm.test('Check status code', () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
													"})",
													"",
													"pm.test(\"Discount on total price property exists\", function () {",
													"    pm.expect(data).to.haveOwnProperty('discountOnTotalPrice');",
													"});",
													"",
													"pm.test(\"Discounted amount is defined and value is greater than 0\", function () {",
													"    pm.expect(data.discountOnTotalPrice).to.haveOwnProperty('discountedAmount');",
													"    pm.expect(data.discountOnTotalPrice.discountedAmount.centAmount).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Discount is registered under 'eagleeye-appliedDiscounts'\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-appliedDiscounts'].some(discount => discount.includes('Basket'))).to.be.true;",
													"});",
													"",
													"pm.test(\"Multiple discounts are registered under 'eagleeye-appliedDiscounts'\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-appliedDiscounts'].length).to.be.greaterThan(1)",
													"});",
													"",
													"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
													"    pm.environment.set(\"cart-id\", data.results[0].id); ",
													"    pm.environment.set(\"cart-version\", data.results[0].version);",
													"}",
													"if(data.results && data.results[0] && data.results[0].key){",
													"    pm.environment.set(\"cart-key\", data.results[0].key); ",
													"}",
													"if(data.version){",
													"    pm.environment.set(\"cart-version\", data.version);",
													"}",
													"if(data.id){",
													"    pm.environment.set(\"cart-id\", data.id); ",
													"}",
													"if(data.key){",
													"    pm.environment.set(\"cart-key\", data.key);",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"currency\" : \"GBP\",\n  \"customerEmail\": \"john.toe7@example.org\",\n  \"lineItems\": [\n      {\n          \"sku\": \"245873\",\n          \"quantity\": 3\n      }\n  ]\n}"
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/carts",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"carts"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
									},
									"response": []
								},
								{
									"name": "Delete Cart",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
													"var data = JSON.parse(responseBody);",
													"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
													"    pm.environment.set(\"cart-id\", data.results[0].id); ",
													"    pm.environment.set(\"cart-version\", data.results[0].version);",
													"}",
													"if(data.results && data.results[0] && data.results[0].key){",
													"    pm.environment.set(\"cart-key\", data.results[0].key); ",
													"}",
													"if(data.version){",
													"    pm.environment.set(\"cart-version\", data.version);",
													"}",
													"if(data.id){",
													"    pm.environment.set(\"cart-id\", data.id); ",
													"}",
													"if(data.key){",
													"    pm.environment.set(\"cart-key\", data.key);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/carts/{{cart-id}}?version={{cart-version}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"carts",
												"{{cart-id}}"
											],
											"query": [
												{
													"key": "dataErasure",
													"value": "",
													"disabled": true
												},
												{
													"key": "version",
													"value": "{{cart-version}}"
												},
												{
													"key": "expand",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "null"
									},
									"response": []
								}
							],
							"description": "## Products added:\n\n1. Mojito, SKU: 245873, Pricing: £52.19\n    \n\n## Customer:\n\n1. Email: [john.toe7@example.org](https://mailto:john.toe7@example.org)"
						}
					],
					"description": "## Discounts information\n\n### 1 - Campaign Name: Open Discount Basket (10% off 100)\n\nTotal price of basket should be above 100 pounds.\n\n- Campaignid: 1711495.\n- Campaign type: Discount Basket.\n- Reward type: 20% Off basket.\n    \n\n### 2 - Campaign Name: Targeted Basket Discount (£1 off £10 Basket Spend)\n\n- Campaignid: 1653869.\n- Campaign type: Discount Basket.\n- Reward type: 1£ Off basket."
				}
			],
			"description": "Please refer to folder-level overviews for corresponding test information."
		},
		{
			"name": "Open Item Level Discounts",
			"item": [
				{
					"name": "Single item",
					"item": [
						{
							"name": "Obtain access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"var data = JSON.parse(responseBody);",
											"if(data.access_token){",
											"    pm.environment.set(\"ctp_access_token\", data.access_token);",
											"}",
											"if (data.scope) {",
											"    parts = data.scope.split(\" \");",
											"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
											"    if (parts.length > 0) {",
											"        scopeParts = parts[0];",
											"        pm.environment.set(\"project-key\", scopeParts[1]);",
											"        parts = parts.filter(scope => scope.length >= 3)",
											"        if (parts.length > 0) {",
											"            scopeParts = parts[0];",
											"            pm.environment.set(\"store-key\", scopeParts[2]);",
											"        }",
											"    }",
											"}"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{client_secret}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{auth_url}}/oauth/token?grant_type=client_credentials",
									"host": [
										"{{auth_url}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								},
								"description": "Use this request to obtain an access token for your commercetools platform project via Client Credentials Flow. As a prerequisite you must have filled out environment variables in Postman for projectKey, client_id and client_secret to use this."
							},
							"response": []
						},
						{
							"name": "Create Cart: 1 line item",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"pm.test('Check status code', () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
											"})",
											"",
											"pm.test(\"Discounted Price property exists under line item\", function () {",
											"    pm.expect(data.lineItems[0]).to.haveOwnProperty('discountedPrice');",
											"});",
											"",
											"pm.test(\"Discounted price value is greater than 0\", function () {",
											"    pm.expect(data.lineItems[0].discountedPrice.value.centAmount).to.be.greaterThan(0);",
											"});",
											"",
											"pm.test(\"Discount is registered under 'eagleeye-appliedDiscounts'\", function () {",
											"    pm.expect(data.custom.fields['eagleeye-appliedDiscounts'].some(discount => discount.includes('Item Level Discount'))).to.be.true;",
											"});",
											"",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"cart-id\", data.results[0].id); ",
											"    pm.environment.set(\"cart-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"cart-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"cart-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"cart-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"cart-key\", data.key);",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{ctp_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										},
										{
											"key": "tokenType",
											"value": "Bearer",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"currency\" : \"GBP\",\n  \"lineItems\": [\n      {\n          \"sku\": \"245872\",\n          \"quantity\": 1\n      }\n  ]\n}"
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/carts",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"carts"
									],
									"query": [
										{
											"key": "expand",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
							},
							"response": []
						},
						{
							"name": "Delete Cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
											"var data = JSON.parse(responseBody);",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"cart-id\", data.results[0].id); ",
											"    pm.environment.set(\"cart-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"cart-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"cart-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"cart-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"cart-key\", data.key);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{ctp_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										},
										{
											"key": "tokenType",
											"value": "Bearer",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/carts/{{cart-id}}?version={{cart-version}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"carts",
										"{{cart-id}}"
									],
									"query": [
										{
											"key": "dataErasure",
											"value": "",
											"disabled": true
										},
										{
											"key": "version",
											"value": "{{cart-version}}"
										},
										{
											"key": "expand",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "null"
							},
							"response": []
						}
					],
					"description": "## Discount information\n\n- Campaignid: 1653871.\n- Campaign name: Open Item Level Discount (UPC: 245872).\n- Campaign type: Discount Products.\n- Reward type: £1 off UPC: 245872.\n    \n\n## Discount product:\n\n1. White Wine, SKU: 245872, Pricing: £63.83"
				},
				{
					"name": "Multiple items",
					"item": [
						{
							"name": "Obtain access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"var data = JSON.parse(responseBody);",
											"if(data.access_token){",
											"    pm.environment.set(\"ctp_access_token\", data.access_token);",
											"}",
											"if (data.scope) {",
											"    parts = data.scope.split(\" \");",
											"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
											"    if (parts.length > 0) {",
											"        scopeParts = parts[0];",
											"        pm.environment.set(\"project-key\", scopeParts[1]);",
											"        parts = parts.filter(scope => scope.length >= 3)",
											"        if (parts.length > 0) {",
											"            scopeParts = parts[0];",
											"            pm.environment.set(\"store-key\", scopeParts[2]);",
											"        }",
											"    }",
											"}"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{client_secret}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{auth_url}}/oauth/token?grant_type=client_credentials",
									"host": [
										"{{auth_url}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								},
								"description": "Use this request to obtain an access token for your commercetools platform project via Client Credentials Flow. As a prerequisite you must have filled out environment variables in Postman for projectKey, client_id and client_secret to use this."
							},
							"response": []
						},
						{
							"name": "Create Cart: 2 line items",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"pm.test('Check status code', () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
											"})",
											"",
											"pm.test(\"Discounted Price property exists under line items\", function () {",
											"    pm.expect(data.lineItems[0]).to.haveOwnProperty('discountedPrice');",
											"    pm.expect(data.lineItems[1]).to.haveOwnProperty('discountedPrice');",
											"});",
											"",
											"pm.test(\"Discounted price values are greater than 0\", function () {",
											"    pm.expect(data.lineItems[0].discountedPrice.value.centAmount).to.be.greaterThan(0);",
											"    pm.expect(data.lineItems[1].discountedPrice.value.centAmount).to.be.greaterThan(0);",
											"});",
											"",
											"pm.test(\"Discount is registered under 'eagleeye-appliedDiscounts'\", function () {",
											"    pm.expect(data.custom.fields['eagleeye-appliedDiscounts'].some(discount => discount.includes('Item Level Discount'))).to.be.true;",
											"});",
											"",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"cart-id\", data.results[0].id); ",
											"    pm.environment.set(\"cart-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"cart-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"cart-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"cart-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"cart-key\", data.key);",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{ctp_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										},
										{
											"key": "tokenType",
											"value": "Bearer",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"currency\" : \"GBP\",\n  \"lineItems\": [\n      {\n          \"sku\": \"245872\",\n          \"quantity\": 1\n      },\n      {\n          \"sku\": \"245886\",\n          \"quantity\": 1\n      }\n  ]\n}"
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/carts",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"carts"
									],
									"query": [
										{
											"key": "expand",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
							},
							"response": []
						},
						{
							"name": "Delete Cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
											"var data = JSON.parse(responseBody);",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"cart-id\", data.results[0].id); ",
											"    pm.environment.set(\"cart-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"cart-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"cart-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"cart-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"cart-key\", data.key);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{ctp_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										},
										{
											"key": "tokenType",
											"value": "Bearer",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/carts/{{cart-id}}?version={{cart-version}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"carts",
										"{{cart-id}}"
									],
									"query": [
										{
											"key": "dataErasure",
											"value": "",
											"disabled": true
										},
										{
											"key": "version",
											"value": "{{cart-version}}"
										},
										{
											"key": "expand",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "null"
							},
							"response": []
						}
					],
					"description": "## Discounts information\n\n- Campaignid: 1653871.\n- Campaign name: Open Item Level Discount (UPC: 245872).\n- Campaign type: Discount Products.\n- Reward type: £1 off UPC: 245872.\n    \n\n---\n\n- Campaign name: Open Item Level Discount (UPC: 245886).\n- Campaign type: Discount Products.\n- Reward type: £1 off UPC: 245886.\n    \n\n## Discount product:\n\n1. White Wine, SKU: 245872, Pricing: £63.83\n2. Loose Carrots, SKU: 245886, Pricing: £4.05"
				}
			],
			"description": "Please refer to folder-level overviews for corresponding test information."
		},
		{
			"name": "Shipping Level Discounts",
			"item": [
				{
					"name": "Discount applied",
					"item": [
						{
							"name": "Obtain access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"var data = JSON.parse(responseBody);",
											"if(data.access_token){",
											"    pm.environment.set(\"ctp_access_token\", data.access_token);",
											"}",
											"if (data.scope) {",
											"    parts = data.scope.split(\" \");",
											"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
											"    if (parts.length > 0) {",
											"        scopeParts = parts[0];",
											"        pm.environment.set(\"project-key\", scopeParts[1]);",
											"        parts = parts.filter(scope => scope.length >= 3)",
											"        if (parts.length > 0) {",
											"            scopeParts = parts[0];",
											"            pm.environment.set(\"store-key\", scopeParts[2]);",
											"        }",
											"    }",
											"}"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{client_secret}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{auth_url}}/oauth/token?grant_type=client_credentials",
									"host": [
										"{{auth_url}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								},
								"description": "Use this request to obtain an access token for your commercetools platform project via Client Credentials Flow. As a prerequisite you must have filled out environment variables in Postman for projectKey, client_id and client_secret to use this."
							},
							"response": []
						},
						{
							"name": "Create Cart: Valid information",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"pm.test('Check status code', () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
											"})",
											"",
											"pm.test(\"Discount is registered under 'eagleeye-appliedDiscounts'\", function () {",
											"    pm.expect(data.custom.fields['eagleeye-appliedDiscounts'].some(discount => discount.includes('Shipping'))).to.be.true;",
											"});",
											"",
											"pm.test(\"Shipping discount is applied\", function () {",
											"    pm.expect(data.taxedShippingPrice.totalGross.centAmount).to.equal(250)",
											"});",
											"",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"cart-id\", data.results[0].id); ",
											"    pm.environment.set(\"cart-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"cart-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"cart-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"cart-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"cart-key\", data.key);",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{ctp_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										},
										{
											"key": "tokenType",
											"value": "Bearer",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"currency\" : \"GBP\",\n  \"lineItems\": [\n      {\n          \"sku\": \"245872\",\n          \"quantity\": 1\n      }\n  ],\n  \"shippingAddress\": {\n      \"country\": \"GB\"\n  },\n  \"shippingMethod\": {\n      \"typeId\": \"shipping-method\",\n      \"key\": \"standard-key\"\n  }\n}"
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/carts",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"carts"
									],
									"query": [
										{
											"key": "expand",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
							},
							"response": []
						},
						{
							"name": "Delete Cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
											"var data = JSON.parse(responseBody);",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"cart-id\", data.results[0].id); ",
											"    pm.environment.set(\"cart-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"cart-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"cart-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"cart-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"cart-key\", data.key);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{ctp_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										},
										{
											"key": "tokenType",
											"value": "Bearer",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/carts/{{cart-id}}?version={{cart-version}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"carts",
										"{{cart-id}}"
									],
									"query": [
										{
											"key": "dataErasure",
											"value": "",
											"disabled": true
										},
										{
											"key": "version",
											"value": "{{cart-version}}"
										},
										{
											"key": "expand",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "null"
							},
							"response": []
						}
					],
					"description": "## Discount information\n\n- Campaignid: 1736971.\n- Campaign name: 50% Discount on Standard Shipping (UPC: 245879).\n- Campaign type: Discount Products.\n- Reward type: 50% off Standard Shipping (UPC: 245879).\n    \n\n## Applicable item\n\n- White Wine. SKU: 245872, Pricing: £63.83"
				},
				{
					"name": "Discount not applied",
					"item": [
						{
							"name": "Obtain access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"var data = JSON.parse(responseBody);",
											"if(data.access_token){",
											"    pm.environment.set(\"ctp_access_token\", data.access_token);",
											"}",
											"if (data.scope) {",
											"    parts = data.scope.split(\" \");",
											"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
											"    if (parts.length > 0) {",
											"        scopeParts = parts[0];",
											"        pm.environment.set(\"project-key\", scopeParts[1]);",
											"        parts = parts.filter(scope => scope.length >= 3)",
											"        if (parts.length > 0) {",
											"            scopeParts = parts[0];",
											"            pm.environment.set(\"store-key\", scopeParts[2]);",
											"        }",
											"    }",
											"}"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{client_secret}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{auth_url}}/oauth/token?grant_type=client_credentials",
									"host": [
										"{{auth_url}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								},
								"description": "Use this request to obtain an access token for your commercetools platform project via Client Credentials Flow. As a prerequisite you must have filled out environment variables in Postman for projectKey, client_id and client_secret to use this."
							},
							"response": []
						},
						{
							"name": "Create Cart: No shipping method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"pm.test('Check status code', () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
											"})",
											"",
											"pm.test(\"Shipping discount is not registered under 'eagleeye-appliedDiscounts'\", function () {",
											"    pm.expect(data.custom.fields['eagleeye-appliedDiscounts'].some(discount => discount.includes('Shipping'))).to.be.false;",
											"});",
											"",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"cart-id\", data.results[0].id); ",
											"    pm.environment.set(\"cart-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"cart-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"cart-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"cart-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"cart-key\", data.key);",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{ctp_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										},
										{
											"key": "tokenType",
											"value": "Bearer",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"currency\" : \"GBP\",\n  \"lineItems\": [\n      {\n          \"sku\": \"245872\",\n          \"quantity\": 1\n      }\n  ],\n  \"shippingAddress\": {\n      \"country\": \"GB\"\n  }\n}\n"
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/carts",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"carts"
									],
									"query": [
										{
											"key": "expand",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
							},
							"response": []
						},
						{
							"name": "Delete Cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
											"var data = JSON.parse(responseBody);",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"cart-id\", data.results[0].id); ",
											"    pm.environment.set(\"cart-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"cart-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"cart-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"cart-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"cart-key\", data.key);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{ctp_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										},
										{
											"key": "tokenType",
											"value": "Bearer",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/carts/{{cart-id}}?version={{cart-version}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"carts",
										"{{cart-id}}"
									],
									"query": [
										{
											"key": "dataErasure",
											"value": "",
											"disabled": true
										},
										{
											"key": "version",
											"value": "{{cart-version}}"
										},
										{
											"key": "expand",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "null"
							},
							"response": []
						}
					],
					"description": "Shipping discount should not be applied if no shippingMethod is stated."
				}
			],
			"description": "Please refer to folder-level overviews for corresponding test information."
		},
		{
			"name": "Multi-item Discounts (Meal Deal)",
			"item": [
				{
					"name": "Discount applied",
					"item": [
						{
							"name": "Obtain access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"var data = JSON.parse(responseBody);",
											"if(data.access_token){",
											"    pm.environment.set(\"ctp_access_token\", data.access_token);",
											"}",
											"if (data.scope) {",
											"    parts = data.scope.split(\" \");",
											"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
											"    if (parts.length > 0) {",
											"        scopeParts = parts[0];",
											"        pm.environment.set(\"project-key\", scopeParts[1]);",
											"        parts = parts.filter(scope => scope.length >= 3)",
											"        if (parts.length > 0) {",
											"            scopeParts = parts[0];",
											"            pm.environment.set(\"store-key\", scopeParts[2]);",
											"        }",
											"    }",
											"}"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{client_secret}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{auth_url}}/oauth/token?grant_type=client_credentials",
									"host": [
										"{{auth_url}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								},
								"description": "Use this request to obtain an access token for your commercetools platform project via Client Credentials Flow. As a prerequisite you must have filled out environment variables in Postman for projectKey, client_id and client_secret to use this."
							},
							"response": []
						},
						{
							"name": "Create Cart: All valid SKUs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"pm.test('Check status code', () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
											"})",
											"",
											"pm.test(\"Discounts are registered under 'eagleeye-appliedDiscounts' and include a Meal Deal\", function () {",
											"    pm.expect(data.custom.fields['eagleeye-appliedDiscounts'].some(discount => discount.includes('Meal Deal'))).to.be.true;",
											"});",
											"",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"cart-id\", data.results[0].id); ",
											"    pm.environment.set(\"cart-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"cart-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"cart-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"cart-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"cart-key\", data.key);",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{ctp_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										},
										{
											"key": "tokenType",
											"value": "Bearer",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"currency\" : \"GBP\",\n  \"lineItems\": [\n      {\n          \"sku\": \"245871\",\n          \"quantity\": 1\n      },\n      {\n          \"sku\": \"245872\",\n          \"quantity\": 1\n      },\n      {\n          \"sku\": \"245873\",\n          \"quantity\": 1\n      }\n  ],\n  \"customerEmail\": \"john.toe7@example.org\"\n}"
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/carts",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"carts"
									],
									"query": [
										{
											"key": "expand",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
							},
							"response": []
						},
						{
							"name": "Delete Cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
											"var data = JSON.parse(responseBody);",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"cart-id\", data.results[0].id); ",
											"    pm.environment.set(\"cart-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"cart-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"cart-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"cart-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"cart-key\", data.key);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{ctp_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										},
										{
											"key": "tokenType",
											"value": "Bearer",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/carts/{{cart-id}}?version={{cart-version}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"carts",
										"{{cart-id}}"
									],
									"query": [
										{
											"key": "dataErasure",
											"value": "",
											"disabled": true
										},
										{
											"key": "version",
											"value": "{{cart-version}}"
										},
										{
											"key": "expand",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "null"
							},
							"response": []
						}
					],
					"description": "## Discount information\n\n- Campaignid: 1680880.\n- Campaign name: Targeted Meal Deal (UPCs: 245871, 245872, 245873) - £1 off.\n- Campaign type: Meal Deal.\n- Reward type: £1 off the items with discount spread between items.\n    \n\n## Products added:\n\n1. Bottled Beer, SKU: 245871, Pricing: £37.97\n2. White Wine. SKU: 245872, Pricing: £63.83\n    \n3. Mojito, SKU: 245873, Pricing: £52.19"
				},
				{
					"name": "Discount not applied",
					"item": [
						{
							"name": "Obtain access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"var data = JSON.parse(responseBody);",
											"if(data.access_token){",
											"    pm.environment.set(\"ctp_access_token\", data.access_token);",
											"}",
											"if (data.scope) {",
											"    parts = data.scope.split(\" \");",
											"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
											"    if (parts.length > 0) {",
											"        scopeParts = parts[0];",
											"        pm.environment.set(\"project-key\", scopeParts[1]);",
											"        parts = parts.filter(scope => scope.length >= 3)",
											"        if (parts.length > 0) {",
											"            scopeParts = parts[0];",
											"            pm.environment.set(\"store-key\", scopeParts[2]);",
											"        }",
											"    }",
											"}"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{client_secret}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{auth_url}}/oauth/token?grant_type=client_credentials",
									"host": [
										"{{auth_url}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								},
								"description": "Use this request to obtain an access token for your commercetools platform project via Client Credentials Flow. As a prerequisite you must have filled out environment variables in Postman for projectKey, client_id and client_secret to use this."
							},
							"response": []
						},
						{
							"name": "Create Cart: 1 invalid SKU",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"pm.test('Check status code', () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
											"})",
											"",
											"pm.test(\"Discounts registered under 'eagleeye-appliedDiscounts' do not include a Meal Deal\", function () {",
											"    pm.expect(data.custom.fields['eagleeye-appliedDiscounts'].some(discount => discount.includes('Meal Deal'))).to.be.false;",
											"});",
											"",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"cart-id\", data.results[0].id); ",
											"    pm.environment.set(\"cart-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"cart-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"cart-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"cart-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"cart-key\", data.key);",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{ctp_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										},
										{
											"key": "tokenType",
											"value": "Bearer",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"currency\" : \"GBP\",\n  \"lineItems\": [\n      {\n          \"sku\": \"245887\",\n          \"quantity\": 1\n      },\n      {\n          \"sku\": \"245872\",\n          \"quantity\": 1\n      },\n      {\n          \"sku\": \"245873\",\n          \"quantity\": 1\n      }\n  ],\n  \"customerEmail\": \"john.toe7@example.org\"\n}"
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/carts",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"carts"
									],
									"query": [
										{
											"key": "expand",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
							},
							"response": []
						},
						{
							"name": "Delete Cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
											"var data = JSON.parse(responseBody);",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"cart-id\", data.results[0].id); ",
											"    pm.environment.set(\"cart-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"cart-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"cart-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"cart-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"cart-key\", data.key);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{ctp_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										},
										{
											"key": "tokenType",
											"value": "Bearer",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/carts/{{cart-id}}?version={{cart-version}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"carts",
										"{{cart-id}}"
									],
									"query": [
										{
											"key": "dataErasure",
											"value": "",
											"disabled": true
										},
										{
											"key": "version",
											"value": "{{cart-version}}"
										},
										{
											"key": "expand",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "null"
							},
							"response": []
						}
					],
					"description": "## Discount information\n\n- Campaignid: 1680880.\n- Campaign name: Targetted Meal Deal (UPCs: 245871, 245872, 245873) - £1 off.\n- Campaign type: Meal Deal.\n- Reward type: £1 off the items with discount spread between items.\n    \n\n## Products added:\n\n1. Juicing Oranges, SKU: 245887, Pricing: £35.49 --\\*_Not valid for meal deal \\*--_\n    \n2. White Wine. SKU: 245872, Pricing: £63.83\n3. Mojito, SKU: 245873, Pricing: £52.19"
				}
			],
			"description": "Please refer to folder-level overviews for corresponding test information."
		},
		{
			"name": "No Longer Applicable Promotions",
			"item": [
				{
					"name": "Basket level discounts",
					"item": [
						{
							"name": "Open basket level discount",
							"item": [
								{
									"name": "Obtain access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"var data = JSON.parse(responseBody);",
													"if(data.access_token){",
													"    pm.environment.set(\"ctp_access_token\", data.access_token);",
													"}",
													"if (data.scope) {",
													"    parts = data.scope.split(\" \");",
													"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
													"    if (parts.length > 0) {",
													"        scopeParts = parts[0];",
													"        pm.environment.set(\"project-key\", scopeParts[1]);",
													"        parts = parts.filter(scope => scope.length >= 3)",
													"        if (parts.length > 0) {",
													"            scopeParts = parts[0];",
													"            pm.environment.set(\"store-key\", scopeParts[2]);",
													"        }",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{client_id}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{client_secret}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{auth_url}}/oauth/token?grant_type=client_credentials",
											"host": [
												"{{auth_url}}"
											],
											"path": [
												"oauth",
												"token"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "client_credentials"
												}
											]
										},
										"description": "Use this request to obtain an access token for your commercetools platform project via Client Credentials Flow. As a prerequisite you must have filled out environment variables in Postman for projectKey, client_id and client_secret to use this."
									},
									"response": []
								},
								{
									"name": "Create Cart: Open basket level discount",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = JSON.parse(responseBody);",
													"",
													"pm.test('Check status code', () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
													"})",
													"",
													"pm.test(\"Discount is added to 'eagleeye-appliedDiscounts'\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-appliedDiscounts'].some(discount => discount.includes('Open Discount Basket'))).to.be.true;",
													"});",
													"",
													"pm.collectionVariables.set('customOpenBasketDiscountItemID', data.lineItems[0].id)",
													"",
													"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
													"    pm.environment.set(\"cart-id\", data.results[0].id); ",
													"    pm.environment.set(\"cart-version\", data.results[0].version);",
													"}",
													"if(data.results && data.results[0] && data.results[0].key){",
													"    pm.environment.set(\"cart-key\", data.results[0].key); ",
													"}",
													"if(data.version){",
													"    pm.environment.set(\"cart-version\", data.version);",
													"}",
													"if(data.id){",
													"    pm.environment.set(\"cart-id\", data.id); ",
													"}",
													"if(data.key){",
													"    pm.environment.set(\"cart-key\", data.key);",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"currency\" : \"GBP\",\n  \"lineItems\": [\n      {\n          \"sku\": \"245871\",\n          \"quantity\": 1\n      },\n      {\n          \"sku\": \"245872\",\n          \"quantity\": 1\n      },\n      {\n          \"sku\": \"245873\",\n          \"quantity\": 1\n      }\n  ]\n}"
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/carts",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"carts"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
									},
									"response": []
								},
								{
									"name": "Update Cart: Remove open basket level discount",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = JSON.parse(responseBody);",
													"",
													"pm.test('Check status code', () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
													"})",
													"",
													"pm.test(\"Discount has been removed from 'eagleeye-appliedDiscounts'\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-appliedDiscounts'].some(discount => discount.includes('Open Discount Basket'))).to.be.false;",
													"});",
													"",
													"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
													"    pm.environment.set(\"cart-id\", data.results[0].id); ",
													"    pm.environment.set(\"cart-version\", data.results[0].version);",
													"}",
													"if(data.results && data.results[0] && data.results[0].key){",
													"    pm.environment.set(\"cart-key\", data.results[0].key); ",
													"}",
													"if(data.version){",
													"    pm.environment.set(\"cart-version\", data.version);",
													"}",
													"if(data.id){",
													"    pm.environment.set(\"cart-id\", data.id); ",
													"}",
													"if(data.key){",
													"    pm.environment.set(\"cart-key\", data.key);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeLineItemQuantity\",\n            \"lineItemId\" : \"{{customOpenBasketDiscountItemID}}\",\n            \"quantity\" : 0\n          }\n    ]\n}"
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/carts/{{cart-id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"carts",
												"{{cart-id}}"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "post Carts"
									},
									"response": []
								},
								{
									"name": "Delete Cart",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
													"var data = JSON.parse(responseBody);",
													"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
													"    pm.environment.set(\"cart-id\", data.results[0].id); ",
													"    pm.environment.set(\"cart-version\", data.results[0].version);",
													"}",
													"if(data.results && data.results[0] && data.results[0].key){",
													"    pm.environment.set(\"cart-key\", data.results[0].key); ",
													"}",
													"if(data.version){",
													"    pm.environment.set(\"cart-version\", data.version);",
													"}",
													"if(data.id){",
													"    pm.environment.set(\"cart-id\", data.id); ",
													"}",
													"if(data.key){",
													"    pm.environment.set(\"cart-key\", data.key);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/carts/{{cart-id}}?version={{cart-version}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"carts",
												"{{cart-id}}"
											],
											"query": [
												{
													"key": "dataErasure",
													"value": "",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"disabled": true
												},
												{
													"key": "version",
													"value": "{{cart-version}}"
												}
											]
										},
										"description": "null"
									},
									"response": []
								}
							],
							"description": "## Discount information\n\nCondition: Total price of basket should be above 100 pounds.\n\n- Campaignid: 1711495.\n    \n- Campaign name: Open Discount Basket (10% off 100).\n    \n- Campaign type: Discount Basket.\n    \n- Reward type: 20% Off basket."
						},
						{
							"name": "Targeted basket level discount",
							"item": [
								{
									"name": "Obtain access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"var data = JSON.parse(responseBody);",
													"if(data.access_token){",
													"    pm.environment.set(\"ctp_access_token\", data.access_token);",
													"}",
													"if (data.scope) {",
													"    parts = data.scope.split(\" \");",
													"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
													"    if (parts.length > 0) {",
													"        scopeParts = parts[0];",
													"        pm.environment.set(\"project-key\", scopeParts[1]);",
													"        parts = parts.filter(scope => scope.length >= 3)",
													"        if (parts.length > 0) {",
													"            scopeParts = parts[0];",
													"            pm.environment.set(\"store-key\", scopeParts[2]);",
													"        }",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{client_id}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{client_secret}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{auth_url}}/oauth/token?grant_type=client_credentials",
											"host": [
												"{{auth_url}}"
											],
											"path": [
												"oauth",
												"token"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "client_credentials"
												}
											]
										},
										"description": "Use this request to obtain an access token for your commercetools platform project via Client Credentials Flow. As a prerequisite you must have filled out environment variables in Postman for projectKey, client_id and client_secret to use this."
									},
									"response": []
								},
								{
									"name": "Create Cart: Targeted basket level discount",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = JSON.parse(responseBody);",
													"",
													"pm.test('Check status code', () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
													"})",
													"",
													"pm.test(\"Discount is added to 'eagleeye-appliedDiscounts'\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-appliedDiscounts'].some(discount => discount.includes('Targeted Basket'))).to.be.true;",
													"});",
													"",
													"pm.collectionVariables.set('customTargetedBasketDiscountItemID', data.lineItems[0].id)",
													"",
													"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
													"    pm.environment.set(\"cart-id\", data.results[0].id); ",
													"    pm.environment.set(\"cart-version\", data.results[0].version);",
													"}",
													"if(data.results && data.results[0] && data.results[0].key){",
													"    pm.environment.set(\"cart-key\", data.results[0].key); ",
													"}",
													"if(data.version){",
													"    pm.environment.set(\"cart-version\", data.version);",
													"}",
													"if(data.id){",
													"    pm.environment.set(\"cart-id\", data.id); ",
													"}",
													"if(data.key){",
													"    pm.environment.set(\"cart-key\", data.key);",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"currency\" : \"GBP\",\n  \"lineItems\": [\n      {\n          \"sku\": \"245871\",\n          \"quantity\": 1\n      },\n      {\n          \"sku\": \"245872\",\n          \"quantity\": 1\n      },\n      {\n          \"sku\": \"245873\",\n          \"quantity\": 1\n      }\n  ],\n  \"customerEmail\": \"john.toe7@example.org\"\n}"
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/carts",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"carts"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
									},
									"response": []
								},
								{
									"name": "Update Cart: Remove targeted basket level discount",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = JSON.parse(responseBody);",
													"",
													"pm.test('Check status code', () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
													"})",
													"",
													"pm.test(\"Discount has been removed from 'eagleeye-appliedDiscounts'\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-appliedDiscounts'].some(discount => discount.includes('Targeted Basket'))).to.be.false;",
													"});",
													"",
													"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
													"    pm.environment.set(\"cart-id\", data.results[0].id); ",
													"    pm.environment.set(\"cart-version\", data.results[0].version);",
													"}",
													"if(data.results && data.results[0] && data.results[0].key){",
													"    pm.environment.set(\"cart-key\", data.results[0].key); ",
													"}",
													"if(data.version){",
													"    pm.environment.set(\"cart-version\", data.version);",
													"}",
													"if(data.id){",
													"    pm.environment.set(\"cart-id\", data.id); ",
													"}",
													"if(data.key){",
													"    pm.environment.set(\"cart-key\", data.key);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomerEmail\",\n            \"customerEmail\": \"john.nottargeted@example.org\"\n          }\n    ]\n}"
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/carts/{{cart-id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"carts",
												"{{cart-id}}"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "post Carts"
									},
									"response": []
								},
								{
									"name": "Delete Cart",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
													"var data = JSON.parse(responseBody);",
													"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
													"    pm.environment.set(\"cart-id\", data.results[0].id); ",
													"    pm.environment.set(\"cart-version\", data.results[0].version);",
													"}",
													"if(data.results && data.results[0] && data.results[0].key){",
													"    pm.environment.set(\"cart-key\", data.results[0].key); ",
													"}",
													"if(data.version){",
													"    pm.environment.set(\"cart-version\", data.version);",
													"}",
													"if(data.id){",
													"    pm.environment.set(\"cart-id\", data.id); ",
													"}",
													"if(data.key){",
													"    pm.environment.set(\"cart-key\", data.key);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/carts/{{cart-id}}?version={{cart-version}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"carts",
												"{{cart-id}}"
											],
											"query": [
												{
													"key": "dataErasure",
													"value": "",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"disabled": true
												},
												{
													"key": "version",
													"value": "{{cart-version}}"
												}
											]
										},
										"description": "null"
									},
									"response": []
								}
							],
							"description": "## Targeted Customer:\n\n1. Email: [john.toe7@example.org](https://mailto:john.toe7@example.org)"
						}
					]
				},
				{
					"name": "Item Level Discounts",
					"item": [
						{
							"name": "Open item level discount",
							"item": [
								{
									"name": "Obtain access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"var data = JSON.parse(responseBody);",
													"if(data.access_token){",
													"    pm.environment.set(\"ctp_access_token\", data.access_token);",
													"}",
													"if (data.scope) {",
													"    parts = data.scope.split(\" \");",
													"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
													"    if (parts.length > 0) {",
													"        scopeParts = parts[0];",
													"        pm.environment.set(\"project-key\", scopeParts[1]);",
													"        parts = parts.filter(scope => scope.length >= 3)",
													"        if (parts.length > 0) {",
													"            scopeParts = parts[0];",
													"            pm.environment.set(\"store-key\", scopeParts[2]);",
													"        }",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{client_id}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{client_secret}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{auth_url}}/oauth/token?grant_type=client_credentials",
											"host": [
												"{{auth_url}}"
											],
											"path": [
												"oauth",
												"token"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "client_credentials"
												}
											]
										},
										"description": "Use this request to obtain an access token for your commercetools platform project via Client Credentials Flow. As a prerequisite you must have filled out environment variables in Postman for projectKey, client_id and client_secret to use this."
									},
									"response": []
								},
								{
									"name": "Create Cart: Open item level discount",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = JSON.parse(responseBody);",
													"",
													"pm.test('Check status code', () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
													"})",
													"",
													"pm.test(\"Discount is added to 'eagleeye-appliedDiscounts'\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-appliedDiscounts'].some(discount => discount.includes('Item Level Discount'))).to.be.true;",
													"});",
													"",
													"pm.collectionVariables.set('customOpenLevelDiscountItemID', data.lineItems[0].id)",
													"",
													"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
													"    pm.environment.set(\"cart-id\", data.results[0].id); ",
													"    pm.environment.set(\"cart-version\", data.results[0].version);",
													"}",
													"if(data.results && data.results[0] && data.results[0].key){",
													"    pm.environment.set(\"cart-key\", data.results[0].key); ",
													"}",
													"if(data.version){",
													"    pm.environment.set(\"cart-version\", data.version);",
													"}",
													"if(data.id){",
													"    pm.environment.set(\"cart-id\", data.id); ",
													"}",
													"if(data.key){",
													"    pm.environment.set(\"cart-key\", data.key);",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"currency\" : \"GBP\",\n  \"lineItems\": [\n      {\n          \"sku\": \"245872\",\n          \"quantity\": 1\n      }\n  ]\n}"
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/carts",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"carts"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
									},
									"response": []
								},
								{
									"name": "Update Cart: Remove open item level discount",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = JSON.parse(responseBody);",
													"",
													"pm.test('Check status code', () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
													"})",
													"",
													"pm.test(\"Discount has been removed from 'eagleeye-appliedDiscounts'\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-appliedDiscounts'].some(discount => discount.includes('Item Level Discount'))).to.be.false;",
													"});",
													"",
													"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
													"    pm.environment.set(\"cart-id\", data.results[0].id); ",
													"    pm.environment.set(\"cart-version\", data.results[0].version);",
													"}",
													"if(data.results && data.results[0] && data.results[0].key){",
													"    pm.environment.set(\"cart-key\", data.results[0].key); ",
													"}",
													"if(data.version){",
													"    pm.environment.set(\"cart-version\", data.version);",
													"}",
													"if(data.id){",
													"    pm.environment.set(\"cart-id\", data.id); ",
													"}",
													"if(data.key){",
													"    pm.environment.set(\"cart-key\", data.key);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeLineItemQuantity\",\n            \"lineItemId\" : \"{{customOpenLevelDiscountItemID}}\",\n            \"quantity\" : 0\n          }\n    ]\n}"
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/carts/{{cart-id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"carts",
												"{{cart-id}}"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "post Carts"
									},
									"response": []
								},
								{
									"name": "Delete Cart",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
													"var data = JSON.parse(responseBody);",
													"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
													"    pm.environment.set(\"cart-id\", data.results[0].id); ",
													"    pm.environment.set(\"cart-version\", data.results[0].version);",
													"}",
													"if(data.results && data.results[0] && data.results[0].key){",
													"    pm.environment.set(\"cart-key\", data.results[0].key); ",
													"}",
													"if(data.version){",
													"    pm.environment.set(\"cart-version\", data.version);",
													"}",
													"if(data.id){",
													"    pm.environment.set(\"cart-id\", data.id); ",
													"}",
													"if(data.key){",
													"    pm.environment.set(\"cart-key\", data.key);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/carts/{{cart-id}}?version={{cart-version}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"carts",
												"{{cart-id}}"
											],
											"query": [
												{
													"key": "dataErasure",
													"value": "",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"disabled": true
												},
												{
													"key": "version",
													"value": "{{cart-version}}"
												}
											]
										},
										"description": "null"
									},
									"response": []
								}
							],
							"description": "## Discount information\n\n- Campaignid: 1653871.\n    \n- Campaign name: Open Item Level Discount (UPC: 245872).\n    \n- Campaign type: Discount Products.\n    \n- Reward type: £1 off UPC: 245872.\n    \n\n## Discount product:\n\n1. White Wine, SKU: 245872, Pricing: £63.83"
						},
						{
							"name": "Targeted item level discount",
							"item": [
								{
									"name": "Obtain access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"var data = JSON.parse(responseBody);",
													"if(data.access_token){",
													"    pm.environment.set(\"ctp_access_token\", data.access_token);",
													"}",
													"if (data.scope) {",
													"    parts = data.scope.split(\" \");",
													"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
													"    if (parts.length > 0) {",
													"        scopeParts = parts[0];",
													"        pm.environment.set(\"project-key\", scopeParts[1]);",
													"        parts = parts.filter(scope => scope.length >= 3)",
													"        if (parts.length > 0) {",
													"            scopeParts = parts[0];",
													"            pm.environment.set(\"store-key\", scopeParts[2]);",
													"        }",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{client_id}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{client_secret}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{auth_url}}/oauth/token?grant_type=client_credentials",
											"host": [
												"{{auth_url}}"
											],
											"path": [
												"oauth",
												"token"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "client_credentials"
												}
											]
										},
										"description": "Use this request to obtain an access token for your commercetools platform project via Client Credentials Flow. As a prerequisite you must have filled out environment variables in Postman for projectKey, client_id and client_secret to use this."
									},
									"response": []
								},
								{
									"name": "Create Cart: Targeted item level discount",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = JSON.parse(responseBody);",
													"",
													"pm.test('Check status code', () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
													"})",
													"",
													"pm.test(\"Discount is added to 'eagleeye-appliedDiscounts'\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-appliedDiscounts'].some(discount => discount.includes('Targeted Item'))).to.be.true;",
													"});",
													"",
													"pm.collectionVariables.set('customTargetedBasketDiscountItemID', data.lineItems[0].id)",
													"",
													"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
													"    pm.environment.set(\"cart-id\", data.results[0].id); ",
													"    pm.environment.set(\"cart-version\", data.results[0].version);",
													"}",
													"if(data.results && data.results[0] && data.results[0].key){",
													"    pm.environment.set(\"cart-key\", data.results[0].key); ",
													"}",
													"if(data.version){",
													"    pm.environment.set(\"cart-version\", data.version);",
													"}",
													"if(data.id){",
													"    pm.environment.set(\"cart-id\", data.id); ",
													"}",
													"if(data.key){",
													"    pm.environment.set(\"cart-key\", data.key);",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"currency\" : \"GBP\",\n  \"lineItems\": [\n      {\n          \"sku\": \"245871\",\n          \"quantity\": 1\n      },\n      {\n          \"sku\": \"245872\",\n          \"quantity\": 1\n      },\n      {\n          \"sku\": \"245873\",\n          \"quantity\": 1\n      }\n  ],\n  \"customerEmail\": \"john.toe7@example.org\"\n}"
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/carts",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"carts"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
									},
									"response": []
								},
								{
									"name": "Update Cart: Remove targeted item level discount",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = JSON.parse(responseBody);",
													"",
													"pm.test('Check status code', () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
													"})",
													"",
													"pm.test(\"Discount has been removed from 'eagleeye-appliedDiscounts'\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-appliedDiscounts'].some(discount => discount.includes('Targeted Item'))).to.be.false;",
													"});",
													"",
													"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
													"    pm.environment.set(\"cart-id\", data.results[0].id); ",
													"    pm.environment.set(\"cart-version\", data.results[0].version);",
													"}",
													"if(data.results && data.results[0] && data.results[0].key){",
													"    pm.environment.set(\"cart-key\", data.results[0].key); ",
													"}",
													"if(data.version){",
													"    pm.environment.set(\"cart-version\", data.version);",
													"}",
													"if(data.id){",
													"    pm.environment.set(\"cart-id\", data.id); ",
													"}",
													"if(data.key){",
													"    pm.environment.set(\"cart-key\", data.key);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomerEmail\",\n            \"customerEmail\": \"john.nottargeted@example.org\"\n          }\n    ]\n}"
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/carts/{{cart-id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"carts",
												"{{cart-id}}"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "post Carts"
									},
									"response": []
								},
								{
									"name": "Delete Cart",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
													"var data = JSON.parse(responseBody);",
													"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
													"    pm.environment.set(\"cart-id\", data.results[0].id); ",
													"    pm.environment.set(\"cart-version\", data.results[0].version);",
													"}",
													"if(data.results && data.results[0] && data.results[0].key){",
													"    pm.environment.set(\"cart-key\", data.results[0].key); ",
													"}",
													"if(data.version){",
													"    pm.environment.set(\"cart-version\", data.version);",
													"}",
													"if(data.id){",
													"    pm.environment.set(\"cart-id\", data.id); ",
													"}",
													"if(data.key){",
													"    pm.environment.set(\"cart-key\", data.key);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/carts/{{cart-id}}?version={{cart-version}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"carts",
												"{{cart-id}}"
											],
											"query": [
												{
													"key": "dataErasure",
													"value": "",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"disabled": true
												},
												{
													"key": "version",
													"value": "{{cart-version}}"
												}
											]
										},
										"description": "null"
									},
									"response": []
								}
							],
							"description": "## Targeted Customer:\n\n1. Email: [john.toe7@example.org](https://mailto:john.toe7@example.org)"
						}
					]
				}
			],
			"description": "As a retailer, when a customer no longer meets the qualifying criteria for a basket or item level offer, that discount must be removed from their basket so that they are not getting discounts to which they are no longer entitled."
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "accessToken",
				"value": "{{ctp_access_token}}",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			},
			{
				"key": "tokenType",
				"value": "Bearer",
				"type": "string"
			}
		]
	},
	"variable": [
		{
			"key": "customOpenLevelDiscountItemID",
			"value": ""
		},
		{
			"key": "customItemLevelDiscountItemID",
			"value": ""
		},
		{
			"key": "customBasketLevelDiscountItemID",
			"value": ""
		},
		{
			"key": "customTargetedBasketDiscountItemID",
			"value": ""
		},
		{
			"key": "customOpenBasketDiscountItemID",
			"value": ""
		}
	]
}
{
	"info": {
		"_postman_id": "7dddd960-4f1f-4eee-a464-5ebea62f094f",
		"name": "EagleEye CT Plugin - E2E Tests",
		"description": "Descriptions are included folder levels.\n\nFor further plugin documentation refer to: [https://github.com/Eagle-Eye-Solutions/integration-commerce-tools/tree/master/integration/docs](https://github.com/Eagle-Eye-Solutions/integration-commerce-tools/tree/master/integration/docs)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17495524"
	},
	"item": [
		{
			"name": "Promotions",
			"item": [
				{
					"name": "Basket Level Discounts",
					"item": [
						{
							"name": "Single discount applied",
							"item": [
								{
									"name": "Single product",
									"item": [
										{
											"name": "Obtain access token",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"tests[\"Status code is 200\"] = responseCode.code === 200;",
															"var data = JSON.parse(responseBody);",
															"if(data.access_token){",
															"    pm.environment.set(\"ctp_access_token\", data.access_token);",
															"}",
															"if (data.scope) {",
															"    parts = data.scope.split(\" \");",
															"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
															"    if (parts.length > 0) {",
															"        scopeParts = parts[0];",
															"        pm.environment.set(\"project-key\", scopeParts[1]);",
															"        parts = parts.filter(scope => scope.length >= 3)",
															"        if (parts.length > 0) {",
															"            scopeParts = parts[0];",
															"            pm.environment.set(\"store-key\", scopeParts[2]);",
															"        }",
															"    }",
															"}"
														]
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{client_id}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{client_secret}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{auth_url}}/oauth/token?grant_type=client_credentials",
													"host": [
														"{{auth_url}}"
													],
													"path": [
														"oauth",
														"token"
													],
													"query": [
														{
															"key": "grant_type",
															"value": "client_credentials"
														}
													]
												},
												"description": "Use this request to obtain an access token for your commercetools platform project via Client Credentials Flow. As a prerequisite you must have filled out environment variables in Postman for projectKey, client_id and client_secret to use this."
											},
											"response": []
										},
										{
											"name": "Create Cart: Total Price > 100",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var data = pm.response.json();",
															"",
															"pm.test('Check status code', () => {",
															"    pm.expect(pm.response.code).to.be.oneOf([",
															"        200,",
															"        201",
															"    ]);",
															"})",
															"",
															"pm.test('Discount on total price property exists', function () {",
															"    pm.expect(data).to.haveOwnProperty('discountOnTotalPrice');",
															"})",
															"",
															"pm.test('Discounted amount is defined and value is greater than 0', function () {",
															"    pm.expect(data.discountOnTotalPrice).to.haveOwnProperty('discountedAmount');",
															"    pm.expect(data.discountOnTotalPrice.discountedAmount.centAmount).to.be.greaterThan(0);",
															"})",
															"",
															"pm.test(\"Discount is registered under 'appliedDiscounts'\", function () {",
															"    pm.expect(data.custom.fields['eagleeye-appliedDiscounts'].some(discount => discount.includes('Basket'))).to.be.true;",
															"});",
															"",
															"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
															"    pm.environment.set(\"cart-id\", data.results[0].id); ",
															"    pm.environment.set(\"cart-version\", data.results[0].version);",
															"}",
															"if(data.results && data.results[0] && data.results[0].key){",
															"    pm.environment.set(\"cart-key\", data.results[0].key); ",
															"}",
															"if(data.version){",
															"    pm.environment.set(\"cart-version\", data.version);",
															"}",
															"if(data.id){",
															"    pm.environment.set(\"cart-id\", data.id); ",
															"}",
															"if(data.key){",
															"    pm.environment.set(\"cart-key\", data.key);",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "accessToken",
															"value": "{{ctp_access_token}}",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"value": "header",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "Bearer",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"currency\" : \"GBP\",\n  \"lineItems\": [\n      {\n          \"sku\": \"245873\",\n          \"quantity\": 3\n      }\n  ]\n}"
												},
												"url": {
													"raw": "{{host}}/{{project-key}}/carts",
													"host": [
														"{{host}}"
													],
													"path": [
														"{{project-key}}",
														"carts"
													],
													"query": [
														{
															"key": "expand",
															"value": "",
															"disabled": true
														}
													]
												},
												"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
											},
											"response": []
										},
										{
											"name": "Delete Cart",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
															"var data = JSON.parse(responseBody);",
															"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
															"    pm.environment.set(\"cart-id\", data.results[0].id); ",
															"    pm.environment.set(\"cart-version\", data.results[0].version);",
															"}",
															"if(data.results && data.results[0] && data.results[0].key){",
															"    pm.environment.set(\"cart-key\", data.results[0].key); ",
															"}",
															"if(data.version){",
															"    pm.environment.set(\"cart-version\", data.version);",
															"}",
															"if(data.id){",
															"    pm.environment.set(\"cart-id\", data.id); ",
															"}",
															"if(data.key){",
															"    pm.environment.set(\"cart-key\", data.key);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "accessToken",
															"value": "{{ctp_access_token}}",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"value": "header",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "Bearer",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{host}}/{{project-key}}/carts/{{cart-id}}?version={{cart-version}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"{{project-key}}",
														"carts",
														"{{cart-id}}"
													],
													"query": [
														{
															"key": "dataErasure",
															"value": "",
															"disabled": true
														},
														{
															"key": "version",
															"value": "{{cart-version}}"
														},
														{
															"key": "expand",
															"value": "",
															"disabled": true
														}
													]
												},
												"description": "null"
											},
											"response": []
										}
									],
									"description": "## Products added:\n\n1. Mojito x 3, SKU: 245873, Pricing: £52.19\n    \n\n**Total Price:** £156.57"
								},
								{
									"name": "Multiple products",
									"item": [
										{
											"name": "Obtain access token",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"tests[\"Status code is 200\"] = responseCode.code === 200;",
															"var data = JSON.parse(responseBody);",
															"if(data.access_token){",
															"    pm.environment.set(\"ctp_access_token\", data.access_token);",
															"}",
															"if (data.scope) {",
															"    parts = data.scope.split(\" \");",
															"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
															"    if (parts.length > 0) {",
															"        scopeParts = parts[0];",
															"        pm.environment.set(\"project-key\", scopeParts[1]);",
															"        parts = parts.filter(scope => scope.length >= 3)",
															"        if (parts.length > 0) {",
															"            scopeParts = parts[0];",
															"            pm.environment.set(\"store-key\", scopeParts[2]);",
															"        }",
															"    }",
															"}"
														]
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{client_id}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{client_secret}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{auth_url}}/oauth/token?grant_type=client_credentials",
													"host": [
														"{{auth_url}}"
													],
													"path": [
														"oauth",
														"token"
													],
													"query": [
														{
															"key": "grant_type",
															"value": "client_credentials"
														}
													]
												},
												"description": "Use this request to obtain an access token for your commercetools platform project via Client Credentials Flow. As a prerequisite you must have filled out environment variables in Postman for projectKey, client_id and client_secret to use this."
											},
											"response": []
										},
										{
											"name": "Create Cart: Multiple products, Total Price > 100",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var data = JSON.parse(responseBody);",
															"",
															"pm.test('Check status code', () => {",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
															"})",
															"",
															"pm.test(\"Discount on total price property exists\", function () {",
															"    pm.expect(data).to.haveOwnProperty('discountOnTotalPrice');",
															"});",
															"",
															"pm.test(\"Discounted amount is defined and value is greater than 0\", function () {",
															"    pm.expect(data.discountOnTotalPrice).to.haveOwnProperty('discountedAmount');",
															"    pm.expect(data.discountOnTotalPrice.discountedAmount.centAmount).to.be.greaterThan(0);",
															"});",
															"",
															"pm.test(\"Discount is registered under 'appliedDiscounts'\", function () {",
															"    pm.expect(data.custom.fields['eagleeye-appliedDiscounts'].some(discount => discount.includes('Basket'))).to.be.true;",
															"});",
															"",
															"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
															"    pm.environment.set(\"cart-id\", data.results[0].id); ",
															"    pm.environment.set(\"cart-version\", data.results[0].version);",
															"}",
															"if(data.results && data.results[0] && data.results[0].key){",
															"    pm.environment.set(\"cart-key\", data.results[0].key); ",
															"}",
															"if(data.version){",
															"    pm.environment.set(\"cart-version\", data.version);",
															"}",
															"if(data.id){",
															"    pm.environment.set(\"cart-id\", data.id); ",
															"}",
															"if(data.key){",
															"    pm.environment.set(\"cart-key\", data.key);",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "accessToken",
															"value": "{{ctp_access_token}}",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"value": "header",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "Bearer",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"currency\" : \"GBP\",\n  \"lineItems\": [\n      {\n          \"sku\": \"245873\",\n          \"quantity\": 1\n      },\n      {\n          \"sku\": \"245884\",\n          \"quantity\": 1\n      },\n      {\n          \"sku\": \"245887\",\n          \"quantity\": 1\n      },\n      {\n          \"sku\": \"245874\",\n          \"quantity\": 1\n      },\n      {\n          \"sku\": \"245878\",\n          \"quantity\": 1\n      }\n  ]\n}"
												},
												"url": {
													"raw": "{{host}}/{{project-key}}/carts",
													"host": [
														"{{host}}"
													],
													"path": [
														"{{project-key}}",
														"carts"
													],
													"query": [
														{
															"key": "expand",
															"value": "",
															"disabled": true
														}
													]
												},
												"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
											},
											"response": []
										},
										{
											"name": "Delete Cart",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
															"var data = JSON.parse(responseBody);",
															"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
															"    pm.environment.set(\"cart-id\", data.results[0].id); ",
															"    pm.environment.set(\"cart-version\", data.results[0].version);",
															"}",
															"if(data.results && data.results[0] && data.results[0].key){",
															"    pm.environment.set(\"cart-key\", data.results[0].key); ",
															"}",
															"if(data.version){",
															"    pm.environment.set(\"cart-version\", data.version);",
															"}",
															"if(data.id){",
															"    pm.environment.set(\"cart-id\", data.id); ",
															"}",
															"if(data.key){",
															"    pm.environment.set(\"cart-key\", data.key);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "accessToken",
															"value": "{{ctp_access_token}}",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"value": "header",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "Bearer",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{host}}/{{project-key}}/carts/{{cart-id}}?version={{cart-version}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"{{project-key}}",
														"carts",
														"{{cart-id}}"
													],
													"query": [
														{
															"key": "dataErasure",
															"value": "",
															"disabled": true
														},
														{
															"key": "version",
															"value": "{{cart-version}}"
														},
														{
															"key": "expand",
															"value": "",
															"disabled": true
														}
													]
												},
												"description": "null"
											},
											"response": []
										}
									],
									"description": "## Products added:\n\n1. Mojito, SKU: 245873, Pricing: £52.19\n2. Hand Soap, SKU: 245884, Pricing: £21.57\n3. Juicing Oranges, SKU: 245887, Pricing: £35.49\n4. Diet Lemonade 1ltr, SKU: 245874, Pricing: £12.39\n5. Can Cola, SKU: 245878, Pricing: £17.27\n    \n\n**Total Price:** £138.91"
								}
							],
							"description": "## Discount information\n\nCondition: Total price of basket should be above 100 pounds.\n\n- Campaignid: 1711495.\n- Campaign name: Open Discount Basket (10% off 100).\n- Campaign type: Discount Basket.\n- Reward type: 20% Off basket."
						},
						{
							"name": "Discount not applied",
							"item": [
								{
									"name": "Single product",
									"item": [
										{
											"name": "Obtain access token",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"tests[\"Status code is 200\"] = responseCode.code === 200;",
															"var data = JSON.parse(responseBody);",
															"if(data.access_token){",
															"    pm.environment.set(\"ctp_access_token\", data.access_token);",
															"}",
															"if (data.scope) {",
															"    parts = data.scope.split(\" \");",
															"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
															"    if (parts.length > 0) {",
															"        scopeParts = parts[0];",
															"        pm.environment.set(\"project-key\", scopeParts[1]);",
															"        parts = parts.filter(scope => scope.length >= 3)",
															"        if (parts.length > 0) {",
															"            scopeParts = parts[0];",
															"            pm.environment.set(\"store-key\", scopeParts[2]);",
															"        }",
															"    }",
															"}"
														]
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{client_id}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{client_secret}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{auth_url}}/oauth/token?grant_type=client_credentials",
													"host": [
														"{{auth_url}}"
													],
													"path": [
														"oauth",
														"token"
													],
													"query": [
														{
															"key": "grant_type",
															"value": "client_credentials"
														}
													]
												},
												"description": "Use this request to obtain an access token for your commercetools platform project via Client Credentials Flow. As a prerequisite you must have filled out environment variables in Postman for projectKey, client_id and client_secret to use this."
											},
											"response": []
										},
										{
											"name": "Create Cart: Total Price < 100",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var data = JSON.parse(responseBody);",
															"",
															"pm.test('Check status code', () => {",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
															"})",
															"",
															"pm.test(\"Discount on total price property does not exist\", function () {",
															"    pm.expect(data).not.to.haveOwnProperty('discountOnTotalPrice');",
															"});",
															"",
															"pm.test(\"Discount is not registered under 'appliedDiscounts'\", function () {",
															"    pm.expect(data.custom.fields['eagleeye-appliedDiscounts'].some(discount => discount.includes('Basket'))).to.be.false;",
															"});",
															"",
															"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
															"    pm.environment.set(\"cart-id\", data.results[0].id); ",
															"    pm.environment.set(\"cart-version\", data.results[0].version);",
															"}",
															"if(data.results && data.results[0] && data.results[0].key){",
															"    pm.environment.set(\"cart-key\", data.results[0].key); ",
															"}",
															"if(data.version){",
															"    pm.environment.set(\"cart-version\", data.version);",
															"}",
															"if(data.id){",
															"    pm.environment.set(\"cart-id\", data.id); ",
															"}",
															"if(data.key){",
															"    pm.environment.set(\"cart-key\", data.key);",
															"}",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "accessToken",
															"value": "{{ctp_access_token}}",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"value": "header",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "Bearer",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"currency\" : \"GBP\",\n  \"lineItems\": [\n      {\n          \"sku\": \"245873\",\n          \"quantity\": 1\n      }\n  ]\n}"
												},
												"url": {
													"raw": "{{host}}/{{project-key}}/carts",
													"host": [
														"{{host}}"
													],
													"path": [
														"{{project-key}}",
														"carts"
													],
													"query": [
														{
															"key": "expand",
															"value": "",
															"disabled": true
														}
													]
												},
												"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
											},
											"response": []
										},
										{
											"name": "Delete Cart",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
															"var data = JSON.parse(responseBody);",
															"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
															"    pm.environment.set(\"cart-id\", data.results[0].id); ",
															"    pm.environment.set(\"cart-version\", data.results[0].version);",
															"}",
															"if(data.results && data.results[0] && data.results[0].key){",
															"    pm.environment.set(\"cart-key\", data.results[0].key); ",
															"}",
															"if(data.version){",
															"    pm.environment.set(\"cart-version\", data.version);",
															"}",
															"if(data.id){",
															"    pm.environment.set(\"cart-id\", data.id); ",
															"}",
															"if(data.key){",
															"    pm.environment.set(\"cart-key\", data.key);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "accessToken",
															"value": "{{ctp_access_token}}",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"value": "header",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "Bearer",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{host}}/{{project-key}}/carts/{{cart-id}}?version={{cart-version}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"{{project-key}}",
														"carts",
														"{{cart-id}}"
													],
													"query": [
														{
															"key": "dataErasure",
															"value": "",
															"disabled": true
														},
														{
															"key": "version",
															"value": "{{cart-version}}"
														},
														{
															"key": "expand",
															"value": "",
															"disabled": true
														}
													]
												},
												"description": "null"
											},
											"response": []
										}
									],
									"description": "## Products added:\n\n1. Mojito, SKU: 245873, Pricing: £52.19"
								},
								{
									"name": "Multiple products",
									"item": [
										{
											"name": "Obtain access token",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"tests[\"Status code is 200\"] = responseCode.code === 200;",
															"var data = JSON.parse(responseBody);",
															"if(data.access_token){",
															"    pm.environment.set(\"ctp_access_token\", data.access_token);",
															"}",
															"if (data.scope) {",
															"    parts = data.scope.split(\" \");",
															"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
															"    if (parts.length > 0) {",
															"        scopeParts = parts[0];",
															"        pm.environment.set(\"project-key\", scopeParts[1]);",
															"        parts = parts.filter(scope => scope.length >= 3)",
															"        if (parts.length > 0) {",
															"            scopeParts = parts[0];",
															"            pm.environment.set(\"store-key\", scopeParts[2]);",
															"        }",
															"    }",
															"}"
														]
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{client_id}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{client_secret}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{auth_url}}/oauth/token?grant_type=client_credentials",
													"host": [
														"{{auth_url}}"
													],
													"path": [
														"oauth",
														"token"
													],
													"query": [
														{
															"key": "grant_type",
															"value": "client_credentials"
														}
													]
												},
												"description": "Use this request to obtain an access token for your commercetools platform project via Client Credentials Flow. As a prerequisite you must have filled out environment variables in Postman for projectKey, client_id and client_secret to use this."
											},
											"response": []
										},
										{
											"name": "Create Cart: Multiple products, Total Price < 100",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var data = JSON.parse(responseBody);",
															"",
															"pm.test('Check status code', () => {",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
															"})",
															"",
															"pm.test(\"Discount on total price property does not exist\", function () {",
															"    pm.expect(data).not.to.haveOwnProperty('discountOnTotalPrice');",
															"});",
															"",
															"pm.test(\"Discount is not registered under 'appliedDiscounts'\", function () {",
															"    pm.expect(data.custom.fields['eagleeye-appliedDiscounts'].some(discount => discount.includes('Basket'))).to.be.false;",
															"});",
															"",
															"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
															"    pm.environment.set(\"cart-id\", data.results[0].id); ",
															"    pm.environment.set(\"cart-version\", data.results[0].version);",
															"}",
															"if(data.results && data.results[0] && data.results[0].key){",
															"    pm.environment.set(\"cart-key\", data.results[0].key); ",
															"}",
															"if(data.version){",
															"    pm.environment.set(\"cart-version\", data.version);",
															"}",
															"if(data.id){",
															"    pm.environment.set(\"cart-id\", data.id); ",
															"}",
															"if(data.key){",
															"    pm.environment.set(\"cart-key\", data.key);",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "accessToken",
															"value": "{{ctp_access_token}}",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"value": "header",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "Bearer",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"currency\" : \"GBP\",\n  \"lineItems\": [\n           {\n          \"sku\": \"245876\",\n          \"quantity\": 1\n      },\n      {\n          \"sku\": \"245884\",\n          \"quantity\": 1\n      },\n      {\n          \"sku\": \"245887\",\n          \"quantity\": 1\n      }\n  ]\n}"
												},
												"url": {
													"raw": "{{host}}/{{project-key}}/carts",
													"host": [
														"{{host}}"
													],
													"path": [
														"{{project-key}}",
														"carts"
													],
													"query": [
														{
															"key": "expand",
															"value": "",
															"disabled": true
														}
													]
												},
												"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
											},
											"response": []
										},
										{
											"name": "Delete Cart",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
															"var data = JSON.parse(responseBody);",
															"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
															"    pm.environment.set(\"cart-id\", data.results[0].id); ",
															"    pm.environment.set(\"cart-version\", data.results[0].version);",
															"}",
															"if(data.results && data.results[0] && data.results[0].key){",
															"    pm.environment.set(\"cart-key\", data.results[0].key); ",
															"}",
															"if(data.version){",
															"    pm.environment.set(\"cart-version\", data.version);",
															"}",
															"if(data.id){",
															"    pm.environment.set(\"cart-id\", data.id); ",
															"}",
															"if(data.key){",
															"    pm.environment.set(\"cart-key\", data.key);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "accessToken",
															"value": "{{ctp_access_token}}",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"value": "header",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "Bearer",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{host}}/{{project-key}}/carts/{{cart-id}}?version={{cart-version}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"{{project-key}}",
														"carts",
														"{{cart-id}}"
													],
													"query": [
														{
															"key": "dataErasure",
															"value": "",
															"disabled": true
														},
														{
															"key": "version",
															"value": "{{cart-version}}"
														},
														{
															"key": "expand",
															"value": "",
															"disabled": true
														}
													]
												},
												"description": "null"
											},
											"response": []
										}
									],
									"description": "## Products added:\n\n1. Take Away large Filter Coffee, SKU: 245876, Pricing: £38.27\n2. Hand Soap, SKU: 245884, Pricing: £21.57\n3. Juicing Oranges, SKU: 245887, Pricing: £35.49\n    \n\n**Total Price =** £95.33"
								}
							],
							"description": "## Discount information\n\nCondition: Total price of basket should be above 100 pounds\n\n- Campaignid: 1711495\n    \n- Campaign name: Open Discount Basket (10% off 100)\n    \n- Campaign type: Discount Basket\n    \n- Reward type: 20% Off basket"
						},
						{
							"name": "Multiple discounts applied",
							"item": [
								{
									"name": "Targeted Basket with Total price > 100",
									"item": [
										{
											"name": "Obtain access token",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"tests[\"Status code is 200\"] = responseCode.code === 200;",
															"var data = JSON.parse(responseBody);",
															"if(data.access_token){",
															"    pm.environment.set(\"ctp_access_token\", data.access_token);",
															"}",
															"if (data.scope) {",
															"    parts = data.scope.split(\" \");",
															"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
															"    if (parts.length > 0) {",
															"        scopeParts = parts[0];",
															"        pm.environment.set(\"project-key\", scopeParts[1]);",
															"        parts = parts.filter(scope => scope.length >= 3)",
															"        if (parts.length > 0) {",
															"            scopeParts = parts[0];",
															"            pm.environment.set(\"store-key\", scopeParts[2]);",
															"        }",
															"    }",
															"}"
														]
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{client_id}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{client_secret}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{auth_url}}/oauth/token?grant_type=client_credentials",
													"host": [
														"{{auth_url}}"
													],
													"path": [
														"oauth",
														"token"
													],
													"query": [
														{
															"key": "grant_type",
															"value": "client_credentials"
														}
													]
												},
												"description": "Use this request to obtain an access token for your commercetools platform project via Client Credentials Flow. As a prerequisite you must have filled out environment variables in Postman for projectKey, client_id and client_secret to use this."
											},
											"response": []
										},
										{
											"name": "Create Cart: Targeted, Total Price > 100",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var data = JSON.parse(responseBody);",
															"",
															"pm.test('Check status code', () => {",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
															"})",
															"",
															"pm.test(\"Discount on total price property exists\", function () {",
															"    pm.expect(data).to.haveOwnProperty('discountOnTotalPrice');",
															"});",
															"",
															"pm.test(\"Discounted amount is defined and value is greater than 0\", function () {",
															"    pm.expect(data.discountOnTotalPrice).to.haveOwnProperty('discountedAmount');",
															"    pm.expect(data.discountOnTotalPrice.discountedAmount.centAmount).to.be.greaterThan(0);",
															"});",
															"",
															"pm.test(\"Discount is registered under 'appliedDiscounts'\", function () {",
															"    pm.expect(data.custom.fields['eagleeye-appliedDiscounts'].some(discount => discount.includes('Basket'))).to.be.true;",
															"});",
															"",
															"pm.test(\"Multiple discounts are registered under 'appliedDiscounts'\", function () {",
															"    pm.expect(data.custom.fields['eagleeye-appliedDiscounts'].length).to.be.greaterThan(1)",
															"});",
															"",
															"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
															"    pm.environment.set(\"cart-id\", data.results[0].id); ",
															"    pm.environment.set(\"cart-version\", data.results[0].version);",
															"}",
															"if(data.results && data.results[0] && data.results[0].key){",
															"    pm.environment.set(\"cart-key\", data.results[0].key); ",
															"}",
															"if(data.version){",
															"    pm.environment.set(\"cart-version\", data.version);",
															"}",
															"if(data.id){",
															"    pm.environment.set(\"cart-id\", data.id); ",
															"}",
															"if(data.key){",
															"    pm.environment.set(\"cart-key\", data.key);",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "accessToken",
															"value": "{{ctp_access_token}}",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"value": "header",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "Bearer",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"currency\" : \"GBP\",\n  \"customerEmail\": \"john.toe1@example.org\",\n  \"lineItems\": [\n      {\n          \"sku\": \"245873\",\n          \"quantity\": 3\n      }\n  ]\n}"
												},
												"url": {
													"raw": "{{host}}/{{project-key}}/carts",
													"host": [
														"{{host}}"
													],
													"path": [
														"{{project-key}}",
														"carts"
													],
													"query": [
														{
															"key": "expand",
															"value": "",
															"disabled": true
														}
													]
												},
												"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
											},
											"response": []
										},
										{
											"name": "Delete Cart",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
															"var data = JSON.parse(responseBody);",
															"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
															"    pm.environment.set(\"cart-id\", data.results[0].id); ",
															"    pm.environment.set(\"cart-version\", data.results[0].version);",
															"}",
															"if(data.results && data.results[0] && data.results[0].key){",
															"    pm.environment.set(\"cart-key\", data.results[0].key); ",
															"}",
															"if(data.version){",
															"    pm.environment.set(\"cart-version\", data.version);",
															"}",
															"if(data.id){",
															"    pm.environment.set(\"cart-id\", data.id); ",
															"}",
															"if(data.key){",
															"    pm.environment.set(\"cart-key\", data.key);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "accessToken",
															"value": "{{ctp_access_token}}",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"value": "header",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "Bearer",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{host}}/{{project-key}}/carts/{{cart-id}}?version={{cart-version}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"{{project-key}}",
														"carts",
														"{{cart-id}}"
													],
													"query": [
														{
															"key": "dataErasure",
															"value": "",
															"disabled": true
														},
														{
															"key": "version",
															"value": "{{cart-version}}"
														},
														{
															"key": "expand",
															"value": "",
															"disabled": true
														}
													]
												},
												"description": "null"
											},
											"response": []
										}
									],
									"description": "## Products added:\n\n1. Mojito, SKU: 245873, Pricing: £52.19\n    \n\n## Customer:\n\n1. Email: [john.toe1@example.org](https://mailto:john.toe1@example.org)"
								}
							],
							"description": "## Discounts information\n\n### 1 - Campaign Name: Open Discount Basket (10% off 100)\n\nTotal price of basket should be above 100 pounds.\n\n- Campaignid: 1711495.\n- Campaign type: Discount Basket.\n- Reward type: 20% Off basket.\n    \n\n### 2 - Campaign Name: Targeted Basket Discount (£1 off £10 Basket Spend)\n\n- Campaignid: 1653869.\n- Campaign type: Discount Basket.\n- Reward type: 1£ Off basket."
						}
					],
					"description": "Please refer to folder-level overviews for corresponding test information."
				},
				{
					"name": "Open Item Level Discounts",
					"item": [
						{
							"name": "Single item",
							"item": [
								{
									"name": "Obtain access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"var data = JSON.parse(responseBody);",
													"if(data.access_token){",
													"    pm.environment.set(\"ctp_access_token\", data.access_token);",
													"}",
													"if (data.scope) {",
													"    parts = data.scope.split(\" \");",
													"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
													"    if (parts.length > 0) {",
													"        scopeParts = parts[0];",
													"        pm.environment.set(\"project-key\", scopeParts[1]);",
													"        parts = parts.filter(scope => scope.length >= 3)",
													"        if (parts.length > 0) {",
													"            scopeParts = parts[0];",
													"            pm.environment.set(\"store-key\", scopeParts[2]);",
													"        }",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{client_id}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{client_secret}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{auth_url}}/oauth/token?grant_type=client_credentials",
											"host": [
												"{{auth_url}}"
											],
											"path": [
												"oauth",
												"token"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "client_credentials"
												}
											]
										},
										"description": "Use this request to obtain an access token for your commercetools platform project via Client Credentials Flow. As a prerequisite you must have filled out environment variables in Postman for projectKey, client_id and client_secret to use this."
									},
									"response": []
								},
								{
									"name": "Create Cart: 1 line item",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = JSON.parse(responseBody);",
													"",
													"pm.test('Check status code', () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
													"})",
													"",
													"pm.test(\"Discounted Price property exists under line item\", function () {",
													"    pm.expect(data.lineItems[0]).to.haveOwnProperty('discountedPrice');",
													"});",
													"",
													"pm.test(\"Discounted price value is greater than 0\", function () {",
													"    pm.expect(data.lineItems[0].discountedPrice.value.centAmount).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Discount is registered under 'appliedDiscounts'\", function () {",
													"    pm.expect(data.lineItems[0].custom.fields['eagleeye-appliedDiscounts'].some(discount => discount.includes('Item Level Discount'))).to.be.true;",
													"});",
													"",
													"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
													"    pm.environment.set(\"cart-id\", data.results[0].id); ",
													"    pm.environment.set(\"cart-version\", data.results[0].version);",
													"}",
													"if(data.results && data.results[0] && data.results[0].key){",
													"    pm.environment.set(\"cart-key\", data.results[0].key); ",
													"}",
													"if(data.version){",
													"    pm.environment.set(\"cart-version\", data.version);",
													"}",
													"if(data.id){",
													"    pm.environment.set(\"cart-id\", data.id); ",
													"}",
													"if(data.key){",
													"    pm.environment.set(\"cart-key\", data.key);",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"currency\" : \"GBP\",\n  \"lineItems\": [\n      {\n          \"sku\": \"245872\",\n          \"quantity\": 1\n      }\n  ]\n}"
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/carts",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"carts"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
									},
									"response": []
								},
								{
									"name": "Delete Cart",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
													"var data = JSON.parse(responseBody);",
													"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
													"    pm.environment.set(\"cart-id\", data.results[0].id); ",
													"    pm.environment.set(\"cart-version\", data.results[0].version);",
													"}",
													"if(data.results && data.results[0] && data.results[0].key){",
													"    pm.environment.set(\"cart-key\", data.results[0].key); ",
													"}",
													"if(data.version){",
													"    pm.environment.set(\"cart-version\", data.version);",
													"}",
													"if(data.id){",
													"    pm.environment.set(\"cart-id\", data.id); ",
													"}",
													"if(data.key){",
													"    pm.environment.set(\"cart-key\", data.key);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/carts/{{cart-id}}?version={{cart-version}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"carts",
												"{{cart-id}}"
											],
											"query": [
												{
													"key": "dataErasure",
													"value": "",
													"disabled": true
												},
												{
													"key": "version",
													"value": "{{cart-version}}"
												},
												{
													"key": "expand",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "null"
									},
									"response": []
								}
							],
							"description": "## Discount information\n\n- Campaignid: 1653871.\n- Campaign name: Open Item Level Discount (UPC: 245872).\n- Campaign type: Discount Products.\n- Reward type: £1 off UPC: 245872.\n    \n\n## Discount product:\n\n1. White Wine, SKU: 245872, Pricing: £63.83"
						},
						{
							"name": "Multiple items",
							"item": [
								{
									"name": "Obtain access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"var data = JSON.parse(responseBody);",
													"if(data.access_token){",
													"    pm.environment.set(\"ctp_access_token\", data.access_token);",
													"}",
													"if (data.scope) {",
													"    parts = data.scope.split(\" \");",
													"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
													"    if (parts.length > 0) {",
													"        scopeParts = parts[0];",
													"        pm.environment.set(\"project-key\", scopeParts[1]);",
													"        parts = parts.filter(scope => scope.length >= 3)",
													"        if (parts.length > 0) {",
													"            scopeParts = parts[0];",
													"            pm.environment.set(\"store-key\", scopeParts[2]);",
													"        }",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{client_id}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{client_secret}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{auth_url}}/oauth/token?grant_type=client_credentials",
											"host": [
												"{{auth_url}}"
											],
											"path": [
												"oauth",
												"token"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "client_credentials"
												}
											]
										},
										"description": "Use this request to obtain an access token for your commercetools platform project via Client Credentials Flow. As a prerequisite you must have filled out environment variables in Postman for projectKey, client_id and client_secret to use this."
									},
									"response": []
								},
								{
									"name": "Create Cart: 2 line items",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = JSON.parse(responseBody);",
													"",
													"pm.test('Check status code', () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
													"})",
													"",
													"pm.test(\"Discounted Price property exists under line items\", function () {",
													"    pm.expect(data.lineItems[0]).to.haveOwnProperty('discountedPrice');",
													"    pm.expect(data.lineItems[1]).to.haveOwnProperty('discountedPrice');",
													"});",
													"",
													"pm.test(\"Discounted price values are greater than 0\", function () {",
													"    pm.expect(data.lineItems[0].discountedPrice.value.centAmount).to.be.greaterThan(0);",
													"    pm.expect(data.lineItems[1].discountedPrice.value.centAmount).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Discount is registered under 'appliedDiscounts'\", function () {",
													"    pm.expect(data.lineItems[0].custom.fields['eagleeye-appliedDiscounts'].some(discount => discount.includes('Item Level Discount'))).to.be.true;",
													"});",
													"",
													"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
													"    pm.environment.set(\"cart-id\", data.results[0].id); ",
													"    pm.environment.set(\"cart-version\", data.results[0].version);",
													"}",
													"if(data.results && data.results[0] && data.results[0].key){",
													"    pm.environment.set(\"cart-key\", data.results[0].key); ",
													"}",
													"if(data.version){",
													"    pm.environment.set(\"cart-version\", data.version);",
													"}",
													"if(data.id){",
													"    pm.environment.set(\"cart-id\", data.id); ",
													"}",
													"if(data.key){",
													"    pm.environment.set(\"cart-key\", data.key);",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"currency\" : \"GBP\",\n  \"lineItems\": [\n      {\n          \"sku\": \"245872\",\n          \"quantity\": 1\n      },\n      {\n          \"sku\": \"245886\",\n          \"quantity\": 1\n      }\n  ]\n}"
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/carts",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"carts"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
									},
									"response": []
								},
								{
									"name": "Delete Cart",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
													"var data = JSON.parse(responseBody);",
													"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
													"    pm.environment.set(\"cart-id\", data.results[0].id); ",
													"    pm.environment.set(\"cart-version\", data.results[0].version);",
													"}",
													"if(data.results && data.results[0] && data.results[0].key){",
													"    pm.environment.set(\"cart-key\", data.results[0].key); ",
													"}",
													"if(data.version){",
													"    pm.environment.set(\"cart-version\", data.version);",
													"}",
													"if(data.id){",
													"    pm.environment.set(\"cart-id\", data.id); ",
													"}",
													"if(data.key){",
													"    pm.environment.set(\"cart-key\", data.key);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/carts/{{cart-id}}?version={{cart-version}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"carts",
												"{{cart-id}}"
											],
											"query": [
												{
													"key": "dataErasure",
													"value": "",
													"disabled": true
												},
												{
													"key": "version",
													"value": "{{cart-version}}"
												},
												{
													"key": "expand",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "null"
									},
									"response": []
								}
							],
							"description": "## Discounts information\n\n- Campaignid: 1653871.\n- Campaign name: Open Item Level Discount (UPC: 245872).\n- Campaign type: Discount Products.\n- Reward type: £1 off UPC: 245872.\n    \n\n---\n\n- Campaign name: Open Item Level Discount (UPC: 245886).\n- Campaign type: Discount Products.\n- Reward type: £1 off UPC: 245886.\n    \n\n## Discount product:\n\n1. White Wine, SKU: 245872, Pricing: £63.83\n2. Loose Carrots, SKU: 245886, Pricing: £4.05"
						}
					],
					"description": "Please refer to folder-level overviews for corresponding test information."
				},
				{
					"name": "Shipping Level Discounts",
					"item": [
						{
							"name": "Discount applied",
							"item": [
								{
									"name": "Obtain access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"var data = JSON.parse(responseBody);",
													"if(data.access_token){",
													"    pm.environment.set(\"ctp_access_token\", data.access_token);",
													"}",
													"if (data.scope) {",
													"    parts = data.scope.split(\" \");",
													"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
													"    if (parts.length > 0) {",
													"        scopeParts = parts[0];",
													"        pm.environment.set(\"project-key\", scopeParts[1]);",
													"        parts = parts.filter(scope => scope.length >= 3)",
													"        if (parts.length > 0) {",
													"            scopeParts = parts[0];",
													"            pm.environment.set(\"store-key\", scopeParts[2]);",
													"        }",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{client_id}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{client_secret}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{auth_url}}/oauth/token?grant_type=client_credentials",
											"host": [
												"{{auth_url}}"
											],
											"path": [
												"oauth",
												"token"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "client_credentials"
												}
											]
										},
										"description": "Use this request to obtain an access token for your commercetools platform project via Client Credentials Flow. As a prerequisite you must have filled out environment variables in Postman for projectKey, client_id and client_secret to use this."
									},
									"response": []
								},
								{
									"name": "Create Cart: Valid information",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = JSON.parse(responseBody);",
													"",
													"pm.test('Check status code', () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
													"})",
													"",
													"pm.test(\"Discount is registered under 'appliedDiscounts'\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-appliedDiscounts'].some(discount => discount.includes('Shipping'))).to.be.true;",
													"});",
													"",
													"pm.test(\"Shipping discount is applied\", function () {",
													"    pm.expect(data.taxedShippingPrice.totalGross.centAmount).to.equal(250)",
													"});",
													"",
													"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
													"    pm.environment.set(\"cart-id\", data.results[0].id); ",
													"    pm.environment.set(\"cart-version\", data.results[0].version);",
													"}",
													"if(data.results && data.results[0] && data.results[0].key){",
													"    pm.environment.set(\"cart-key\", data.results[0].key); ",
													"}",
													"if(data.version){",
													"    pm.environment.set(\"cart-version\", data.version);",
													"}",
													"if(data.id){",
													"    pm.environment.set(\"cart-id\", data.id); ",
													"}",
													"if(data.key){",
													"    pm.environment.set(\"cart-key\", data.key);",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"currency\" : \"GBP\",\n  \"lineItems\": [\n      {\n          \"sku\": \"245872\",\n          \"quantity\": 1\n      }\n  ],\n  \"shippingAddress\": {\n      \"country\": \"GB\"\n  },\n  \"shippingMethod\": {\n      \"typeId\": \"shipping-method\",\n      \"key\": \"standard-key\"\n  }\n}"
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/carts",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"carts"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
									},
									"response": []
								},
								{
									"name": "Delete Cart",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
													"var data = JSON.parse(responseBody);",
													"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
													"    pm.environment.set(\"cart-id\", data.results[0].id); ",
													"    pm.environment.set(\"cart-version\", data.results[0].version);",
													"}",
													"if(data.results && data.results[0] && data.results[0].key){",
													"    pm.environment.set(\"cart-key\", data.results[0].key); ",
													"}",
													"if(data.version){",
													"    pm.environment.set(\"cart-version\", data.version);",
													"}",
													"if(data.id){",
													"    pm.environment.set(\"cart-id\", data.id); ",
													"}",
													"if(data.key){",
													"    pm.environment.set(\"cart-key\", data.key);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/carts/{{cart-id}}?version={{cart-version}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"carts",
												"{{cart-id}}"
											],
											"query": [
												{
													"key": "dataErasure",
													"value": "",
													"disabled": true
												},
												{
													"key": "version",
													"value": "{{cart-version}}"
												},
												{
													"key": "expand",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "null"
									},
									"response": []
								}
							],
							"description": "## Discount information\n\n- Campaignid: 1736971.\n- Campaign name: 50% Discount on Standard Shipping (UPC: 245879).\n- Campaign type: Discount Products.\n- Reward type: 50% off Standard Shipping (UPC: 245879).\n    \n\n## Applicable item\n\n- White Wine. SKU: 245872, Pricing: £63.83"
						},
						{
							"name": "Discount not applied",
							"item": [
								{
									"name": "No shipping method",
									"item": [
										{
											"name": "Obtain access token",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"tests[\"Status code is 200\"] = responseCode.code === 200;",
															"var data = JSON.parse(responseBody);",
															"if(data.access_token){",
															"    pm.environment.set(\"ctp_access_token\", data.access_token);",
															"}",
															"if (data.scope) {",
															"    parts = data.scope.split(\" \");",
															"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
															"    if (parts.length > 0) {",
															"        scopeParts = parts[0];",
															"        pm.environment.set(\"project-key\", scopeParts[1]);",
															"        parts = parts.filter(scope => scope.length >= 3)",
															"        if (parts.length > 0) {",
															"            scopeParts = parts[0];",
															"            pm.environment.set(\"store-key\", scopeParts[2]);",
															"        }",
															"    }",
															"}"
														]
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{client_id}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{client_secret}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{auth_url}}/oauth/token?grant_type=client_credentials",
													"host": [
														"{{auth_url}}"
													],
													"path": [
														"oauth",
														"token"
													],
													"query": [
														{
															"key": "grant_type",
															"value": "client_credentials"
														}
													]
												},
												"description": "Use this request to obtain an access token for your commercetools platform project via Client Credentials Flow. As a prerequisite you must have filled out environment variables in Postman for projectKey, client_id and client_secret to use this."
											},
											"response": []
										},
										{
											"name": "Create Cart: No shipping method",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var data = JSON.parse(responseBody);",
															"",
															"pm.test('Check status code', () => {",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
															"})",
															"",
															"pm.test(\"Discount not is registered under 'appliedDiscounts'\", function () {",
															"    pm.expect(data.custom.fields['eagleeye-appliedDiscounts'].some(discount => discount.includes('Shipping'))).to.be.false;",
															"});",
															"",
															"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
															"    pm.environment.set(\"cart-id\", data.results[0].id); ",
															"    pm.environment.set(\"cart-version\", data.results[0].version);",
															"}",
															"if(data.results && data.results[0] && data.results[0].key){",
															"    pm.environment.set(\"cart-key\", data.results[0].key); ",
															"}",
															"if(data.version){",
															"    pm.environment.set(\"cart-version\", data.version);",
															"}",
															"if(data.id){",
															"    pm.environment.set(\"cart-id\", data.id); ",
															"}",
															"if(data.key){",
															"    pm.environment.set(\"cart-key\", data.key);",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "accessToken",
															"value": "{{ctp_access_token}}",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"value": "header",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "Bearer",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"currency\" : \"GBP\",\n  \"lineItems\": [\n      {\n          \"sku\": \"245872\",\n          \"quantity\": 1\n      }\n  ],\n  \"shippingAddress\": {\n      \"country\": \"GB\"\n  }\n}\n"
												},
												"url": {
													"raw": "{{host}}/{{project-key}}/carts",
													"host": [
														"{{host}}"
													],
													"path": [
														"{{project-key}}",
														"carts"
													],
													"query": [
														{
															"key": "expand",
															"value": "",
															"disabled": true
														}
													]
												},
												"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
											},
											"response": []
										},
										{
											"name": "Delete Cart",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
															"var data = JSON.parse(responseBody);",
															"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
															"    pm.environment.set(\"cart-id\", data.results[0].id); ",
															"    pm.environment.set(\"cart-version\", data.results[0].version);",
															"}",
															"if(data.results && data.results[0] && data.results[0].key){",
															"    pm.environment.set(\"cart-key\", data.results[0].key); ",
															"}",
															"if(data.version){",
															"    pm.environment.set(\"cart-version\", data.version);",
															"}",
															"if(data.id){",
															"    pm.environment.set(\"cart-id\", data.id); ",
															"}",
															"if(data.key){",
															"    pm.environment.set(\"cart-key\", data.key);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "accessToken",
															"value": "{{ctp_access_token}}",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"value": "header",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "Bearer",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{host}}/{{project-key}}/carts/{{cart-id}}?version={{cart-version}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"{{project-key}}",
														"carts",
														"{{cart-id}}"
													],
													"query": [
														{
															"key": "dataErasure",
															"value": "",
															"disabled": true
														},
														{
															"key": "version",
															"value": "{{cart-version}}"
														},
														{
															"key": "expand",
															"value": "",
															"disabled": true
														}
													]
												},
												"description": "null"
											},
											"response": []
										}
									]
								},
								{
									"name": "No shipping address",
									"item": [
										{
											"name": "Obtain access token",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"tests[\"Status code is 200\"] = responseCode.code === 200;",
															"var data = JSON.parse(responseBody);",
															"if(data.access_token){",
															"    pm.environment.set(\"ctp_access_token\", data.access_token);",
															"}",
															"if (data.scope) {",
															"    parts = data.scope.split(\" \");",
															"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
															"    if (parts.length > 0) {",
															"        scopeParts = parts[0];",
															"        pm.environment.set(\"project-key\", scopeParts[1]);",
															"        parts = parts.filter(scope => scope.length >= 3)",
															"        if (parts.length > 0) {",
															"            scopeParts = parts[0];",
															"            pm.environment.set(\"store-key\", scopeParts[2]);",
															"        }",
															"    }",
															"}"
														]
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{client_id}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{client_secret}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{auth_url}}/oauth/token?grant_type=client_credentials",
													"host": [
														"{{auth_url}}"
													],
													"path": [
														"oauth",
														"token"
													],
													"query": [
														{
															"key": "grant_type",
															"value": "client_credentials"
														}
													]
												},
												"description": "Use this request to obtain an access token for your commercetools platform project via Client Credentials Flow. As a prerequisite you must have filled out environment variables in Postman for projectKey, client_id and client_secret to use this."
											},
											"response": []
										},
										{
											"name": "Create Cart: No shipping address",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var data = JSON.parse(responseBody);",
															"",
															"pm.test('Check status code', () => {",
															"    pm.expect(pm.response.code).to.equal(400)",
															"})",
															"",
															"pm.test(\"'Shipping address not set' response error\", function () {",
															"    pm.expect(data.message).to.equal('Shipping address is not set.');",
															"});",
															"",
															"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
															"    pm.environment.set(\"cart-id\", data.results[0].id); ",
															"    pm.environment.set(\"cart-version\", data.results[0].version);",
															"}",
															"if(data.results && data.results[0] && data.results[0].key){",
															"    pm.environment.set(\"cart-key\", data.results[0].key); ",
															"}",
															"if(data.version){",
															"    pm.environment.set(\"cart-version\", data.version);",
															"}",
															"if(data.id){",
															"    pm.environment.set(\"cart-id\", data.id); ",
															"}",
															"if(data.key){",
															"    pm.environment.set(\"cart-key\", data.key);",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "accessToken",
															"value": "{{ctp_access_token}}",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"value": "header",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "Bearer",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"currency\" : \"GBP\",\n  \"lineItems\": [\n      {\n          \"sku\": \"245872\",\n          \"quantity\": 1\n      }\n  ],\n  \"shippingMethod\": {\n      \"typeId\": \"shipping-method\",\n      \"key\": \"standard-key\"\n  }\n}\n"
												},
												"url": {
													"raw": "{{host}}/{{project-key}}/carts",
													"host": [
														"{{host}}"
													],
													"path": [
														"{{project-key}}",
														"carts"
													],
													"query": [
														{
															"key": "expand",
															"value": "",
															"disabled": true
														}
													]
												},
												"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
											},
											"response": []
										}
									]
								}
							],
							"description": "Shipping discount should not be applied if no shippingMethod is stated."
						}
					],
					"description": "Please refer to folder-level overviews for corresponding test information."
				},
				{
					"name": "Multi-item Discounts (Meal Deal)",
					"item": [
						{
							"name": "Discount applied",
							"item": [
								{
									"name": "Obtain access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"var data = JSON.parse(responseBody);",
													"if(data.access_token){",
													"    pm.environment.set(\"ctp_access_token\", data.access_token);",
													"}",
													"if (data.scope) {",
													"    parts = data.scope.split(\" \");",
													"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
													"    if (parts.length > 0) {",
													"        scopeParts = parts[0];",
													"        pm.environment.set(\"project-key\", scopeParts[1]);",
													"        parts = parts.filter(scope => scope.length >= 3)",
													"        if (parts.length > 0) {",
													"            scopeParts = parts[0];",
													"            pm.environment.set(\"store-key\", scopeParts[2]);",
													"        }",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{client_id}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{client_secret}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{auth_url}}/oauth/token?grant_type=client_credentials",
											"host": [
												"{{auth_url}}"
											],
											"path": [
												"oauth",
												"token"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "client_credentials"
												}
											]
										},
										"description": "Use this request to obtain an access token for your commercetools platform project via Client Credentials Flow. As a prerequisite you must have filled out environment variables in Postman for projectKey, client_id and client_secret to use this."
									},
									"response": []
								},
								{
									"name": "Create Cart: All valid SKUs",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = JSON.parse(responseBody);",
													"",
													"pm.test('Check status code', () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
													"})",
													"",
													"pm.test(\"Discounts are registered under 'appliedDiscounts'\", function () {",
													"    pm.expect(data.lineItems.some(lineItem => lineItem.custom.fields['eagleeye-appliedDiscounts'].some(discount => discount.includes('Meal Deal')))).to.be.true;",
													"});",
													"",
													"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
													"    pm.environment.set(\"cart-id\", data.results[0].id); ",
													"    pm.environment.set(\"cart-version\", data.results[0].version);",
													"}",
													"if(data.results && data.results[0] && data.results[0].key){",
													"    pm.environment.set(\"cart-key\", data.results[0].key); ",
													"}",
													"if(data.version){",
													"    pm.environment.set(\"cart-version\", data.version);",
													"}",
													"if(data.id){",
													"    pm.environment.set(\"cart-id\", data.id); ",
													"}",
													"if(data.key){",
													"    pm.environment.set(\"cart-key\", data.key);",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"currency\" : \"GBP\",\n  \"lineItems\": [\n      {\n          \"sku\": \"245871\",\n          \"quantity\": 1\n      },\n      {\n          \"sku\": \"245872\",\n          \"quantity\": 1\n      },\n      {\n          \"sku\": \"245873\",\n          \"quantity\": 1\n      }\n  ],\n  \"custom\": {\n      \"typeKey\": \"custom-cart-type\",\n      \"fields\": {\n          \"eagleeye-identityValue\":  \"john.toe6@example.org\"\n      }\n     \n  }\n}"
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/carts",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"carts"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
									},
									"response": []
								},
								{
									"name": "Delete Cart",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
													"var data = JSON.parse(responseBody);",
													"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
													"    pm.environment.set(\"cart-id\", data.results[0].id); ",
													"    pm.environment.set(\"cart-version\", data.results[0].version);",
													"}",
													"if(data.results && data.results[0] && data.results[0].key){",
													"    pm.environment.set(\"cart-key\", data.results[0].key); ",
													"}",
													"if(data.version){",
													"    pm.environment.set(\"cart-version\", data.version);",
													"}",
													"if(data.id){",
													"    pm.environment.set(\"cart-id\", data.id); ",
													"}",
													"if(data.key){",
													"    pm.environment.set(\"cart-key\", data.key);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/carts/{{cart-id}}?version={{cart-version}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"carts",
												"{{cart-id}}"
											],
											"query": [
												{
													"key": "dataErasure",
													"value": "",
													"disabled": true
												},
												{
													"key": "version",
													"value": "{{cart-version}}"
												},
												{
													"key": "expand",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "null"
									},
									"response": []
								}
							],
							"description": "## Discount information\n\n- Campaignid: 1680880.\n- Campaign name: Targeted Meal Deal (UPCs: 245871, 245872, 245873) - £1 off.\n- Campaign type: Meal Deal.\n- Reward type: £1 off the items with discount spread between items.\n    \n\n## Products added:\n\n1. Bottled Beer, SKU: 245871, Pricing: £37.97\n2. White Wine. SKU: 245872, Pricing: £63.83\n    \n3. Mojito, SKU: 245873, Pricing: £52.19"
						},
						{
							"name": "Discount not applied",
							"item": [
								{
									"name": "Obtain access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"var data = JSON.parse(responseBody);",
													"if(data.access_token){",
													"    pm.environment.set(\"ctp_access_token\", data.access_token);",
													"}",
													"if (data.scope) {",
													"    parts = data.scope.split(\" \");",
													"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
													"    if (parts.length > 0) {",
													"        scopeParts = parts[0];",
													"        pm.environment.set(\"project-key\", scopeParts[1]);",
													"        parts = parts.filter(scope => scope.length >= 3)",
													"        if (parts.length > 0) {",
													"            scopeParts = parts[0];",
													"            pm.environment.set(\"store-key\", scopeParts[2]);",
													"        }",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{client_id}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{client_secret}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{auth_url}}/oauth/token?grant_type=client_credentials",
											"host": [
												"{{auth_url}}"
											],
											"path": [
												"oauth",
												"token"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "client_credentials"
												}
											]
										},
										"description": "Use this request to obtain an access token for your commercetools platform project via Client Credentials Flow. As a prerequisite you must have filled out environment variables in Postman for projectKey, client_id and client_secret to use this."
									},
									"response": []
								},
								{
									"name": "Create Cart: 1 invalid SKU",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = JSON.parse(responseBody);",
													"",
													"pm.test('Check status code', () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
													"})",
													"",
													"pm.test(\"Discounts registered under 'appliedDiscounts' do not include a Meal Deal\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-appliedDiscounts'].some(discount => discount.includes('Meal Deal'))).to.be.false;",
													"});",
													"",
													"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
													"    pm.environment.set(\"cart-id\", data.results[0].id); ",
													"    pm.environment.set(\"cart-version\", data.results[0].version);",
													"}",
													"if(data.results && data.results[0] && data.results[0].key){",
													"    pm.environment.set(\"cart-key\", data.results[0].key); ",
													"}",
													"if(data.version){",
													"    pm.environment.set(\"cart-version\", data.version);",
													"}",
													"if(data.id){",
													"    pm.environment.set(\"cart-id\", data.id); ",
													"}",
													"if(data.key){",
													"    pm.environment.set(\"cart-key\", data.key);",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"currency\" : \"GBP\",\n  \"lineItems\": [\n      {\n          \"sku\": \"245887\",\n          \"quantity\": 1\n      },\n      {\n          \"sku\": \"245872\",\n          \"quantity\": 1\n      },\n      {\n          \"sku\": \"245873\",\n          \"quantity\": 1\n      }\n  ],\n  \"customerEmail\": \"john.toe2@example.org\"\n}"
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/carts",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"carts"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
									},
									"response": []
								},
								{
									"name": "Delete Cart",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
													"var data = JSON.parse(responseBody);",
													"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
													"    pm.environment.set(\"cart-id\", data.results[0].id); ",
													"    pm.environment.set(\"cart-version\", data.results[0].version);",
													"}",
													"if(data.results && data.results[0] && data.results[0].key){",
													"    pm.environment.set(\"cart-key\", data.results[0].key); ",
													"}",
													"if(data.version){",
													"    pm.environment.set(\"cart-version\", data.version);",
													"}",
													"if(data.id){",
													"    pm.environment.set(\"cart-id\", data.id); ",
													"}",
													"if(data.key){",
													"    pm.environment.set(\"cart-key\", data.key);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/carts/{{cart-id}}?version={{cart-version}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"carts",
												"{{cart-id}}"
											],
											"query": [
												{
													"key": "dataErasure",
													"value": "",
													"disabled": true
												},
												{
													"key": "version",
													"value": "{{cart-version}}"
												},
												{
													"key": "expand",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "null"
									},
									"response": []
								}
							],
							"description": "## Discount information\n\n- Campaignid: 1680880.\n- Campaign name: Targetted Meal Deal (UPCs: 245871, 245872, 245873) - £1 off.\n- Campaign type: Meal Deal.\n- Reward type: £1 off the items with discount spread between items.\n    \n\n## Products added:\n\n1. Juicing Oranges, SKU: 245887, Pricing: £35.49 --\\*_Not valid for meal deal \\*--_\n    \n2. White Wine. SKU: 245872, Pricing: £63.83\n3. Mojito, SKU: 245873, Pricing: £52.19"
						}
					],
					"description": "Please refer to folder-level overviews for corresponding test information."
				},
				{
					"name": "No Longer Applicable Promotions",
					"item": [
						{
							"name": "Basket/Meal discounts",
							"item": [
								{
									"name": "Open basket level discount",
									"item": [
										{
											"name": "Obtain access token",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"tests[\"Status code is 200\"] = responseCode.code === 200;",
															"var data = JSON.parse(responseBody);",
															"if(data.access_token){",
															"    pm.environment.set(\"ctp_access_token\", data.access_token);",
															"}",
															"if (data.scope) {",
															"    parts = data.scope.split(\" \");",
															"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
															"    if (parts.length > 0) {",
															"        scopeParts = parts[0];",
															"        pm.environment.set(\"project-key\", scopeParts[1]);",
															"        parts = parts.filter(scope => scope.length >= 3)",
															"        if (parts.length > 0) {",
															"            scopeParts = parts[0];",
															"            pm.environment.set(\"store-key\", scopeParts[2]);",
															"        }",
															"    }",
															"}"
														]
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{client_id}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{client_secret}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{auth_url}}/oauth/token?grant_type=client_credentials",
													"host": [
														"{{auth_url}}"
													],
													"path": [
														"oauth",
														"token"
													],
													"query": [
														{
															"key": "grant_type",
															"value": "client_credentials"
														}
													]
												},
												"description": "Use this request to obtain an access token for your commercetools platform project via Client Credentials Flow. As a prerequisite you must have filled out environment variables in Postman for projectKey, client_id and client_secret to use this."
											},
											"response": []
										},
										{
											"name": "Create Cart: Open basket level discount",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var data = JSON.parse(responseBody);",
															"",
															"pm.test('Check status code', () => {",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
															"})",
															"",
															"pm.test(\"Discount is added to 'appliedDiscounts'\", function () {",
															"    pm.expect(data.custom.fields['eagleeye-appliedDiscounts'].some(discount => discount.includes('Open Discount Basket'))).to.be.true;",
															"});",
															"",
															"pm.collectionVariables.set('customOpenBasketDiscountItemID', data.lineItems[1].id)",
															"",
															"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
															"    pm.environment.set(\"cart-id\", data.results[0].id); ",
															"    pm.environment.set(\"cart-version\", data.results[0].version);",
															"}",
															"if(data.results && data.results[0] && data.results[0].key){",
															"    pm.environment.set(\"cart-key\", data.results[0].key); ",
															"}",
															"if(data.version){",
															"    pm.environment.set(\"cart-version\", data.version);",
															"}",
															"if(data.id){",
															"    pm.environment.set(\"cart-id\", data.id); ",
															"}",
															"if(data.key){",
															"    pm.environment.set(\"cart-key\", data.key);",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "accessToken",
															"value": "{{ctp_access_token}}",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"value": "header",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "Bearer",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"currency\" : \"GBP\",\n  \"lineItems\": [\n      {\n          \"sku\": \"245871\",\n          \"quantity\": 1\n      },\n      {\n          \"sku\": \"245872\",\n          \"quantity\": 1\n      },\n      {\n          \"sku\": \"245873\",\n          \"quantity\": 1\n      }\n  ]\n}"
												},
												"url": {
													"raw": "{{host}}/{{project-key}}/carts",
													"host": [
														"{{host}}"
													],
													"path": [
														"{{project-key}}",
														"carts"
													],
													"query": [
														{
															"key": "expand",
															"value": "",
															"disabled": true
														}
													]
												},
												"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
											},
											"response": []
										},
										{
											"name": "Update Cart: Remove open basket level discount",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var data = JSON.parse(responseBody);",
															"",
															"pm.test('Check status code', () => {",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
															"})",
															"",
															"pm.test(\"Discount has been removed from 'appliedDiscounts'\", function () {",
															"    pm.expect(data.custom.fields['eagleeye-appliedDiscounts'].some(discount => discount.includes('Open Discount Basket'))).to.be.false;",
															"});",
															"",
															"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
															"    pm.environment.set(\"cart-id\", data.results[0].id); ",
															"    pm.environment.set(\"cart-version\", data.results[0].version);",
															"}",
															"if(data.results && data.results[0] && data.results[0].key){",
															"    pm.environment.set(\"cart-key\", data.results[0].key); ",
															"}",
															"if(data.version){",
															"    pm.environment.set(\"cart-version\", data.version);",
															"}",
															"if(data.id){",
															"    pm.environment.set(\"cart-id\", data.id); ",
															"}",
															"if(data.key){",
															"    pm.environment.set(\"cart-key\", data.key);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "accessToken",
															"value": "{{ctp_access_token}}",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"value": "header",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "Bearer",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeLineItemQuantity\",\n            \"lineItemId\" : \"{{customOpenBasketDiscountItemID}}\",\n            \"quantity\" : 0\n          }\n    ]\n}"
												},
												"url": {
													"raw": "{{host}}/{{project-key}}/carts/{{cart-id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"{{project-key}}",
														"carts",
														"{{cart-id}}"
													],
													"query": [
														{
															"key": "expand",
															"value": "",
															"disabled": true
														}
													]
												},
												"description": "post Carts"
											},
											"response": []
										},
										{
											"name": "Delete Cart",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
															"var data = JSON.parse(responseBody);",
															"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
															"    pm.environment.set(\"cart-id\", data.results[0].id); ",
															"    pm.environment.set(\"cart-version\", data.results[0].version);",
															"}",
															"if(data.results && data.results[0] && data.results[0].key){",
															"    pm.environment.set(\"cart-key\", data.results[0].key); ",
															"}",
															"if(data.version){",
															"    pm.environment.set(\"cart-version\", data.version);",
															"}",
															"if(data.id){",
															"    pm.environment.set(\"cart-id\", data.id); ",
															"}",
															"if(data.key){",
															"    pm.environment.set(\"cart-key\", data.key);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "accessToken",
															"value": "{{ctp_access_token}}",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"value": "header",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "Bearer",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{host}}/{{project-key}}/carts/{{cart-id}}?version={{cart-version}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"{{project-key}}",
														"carts",
														"{{cart-id}}"
													],
													"query": [
														{
															"key": "dataErasure",
															"value": "",
															"disabled": true
														},
														{
															"key": "expand",
															"value": "",
															"disabled": true
														},
														{
															"key": "version",
															"value": "{{cart-version}}"
														}
													]
												},
												"description": "null"
											},
											"response": []
										}
									],
									"description": "## Discount information\n\nCondition: Total price of basket should be above 100 pounds.\n\n- Campaignid: 1711495.\n    \n- Campaign name: Open Discount Basket (10% off 100).\n    \n- Campaign type: Discount Basket.\n    \n- Reward type: 20% Off basket."
								},
								{
									"name": "Targeted basket level discount",
									"item": [
										{
											"name": "Obtain access token",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"tests[\"Status code is 200\"] = responseCode.code === 200;",
															"var data = JSON.parse(responseBody);",
															"if(data.access_token){",
															"    pm.environment.set(\"ctp_access_token\", data.access_token);",
															"}",
															"if (data.scope) {",
															"    parts = data.scope.split(\" \");",
															"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
															"    if (parts.length > 0) {",
															"        scopeParts = parts[0];",
															"        pm.environment.set(\"project-key\", scopeParts[1]);",
															"        parts = parts.filter(scope => scope.length >= 3)",
															"        if (parts.length > 0) {",
															"            scopeParts = parts[0];",
															"            pm.environment.set(\"store-key\", scopeParts[2]);",
															"        }",
															"    }",
															"}"
														]
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{client_id}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{client_secret}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{auth_url}}/oauth/token?grant_type=client_credentials",
													"host": [
														"{{auth_url}}"
													],
													"path": [
														"oauth",
														"token"
													],
													"query": [
														{
															"key": "grant_type",
															"value": "client_credentials"
														}
													]
												},
												"description": "Use this request to obtain an access token for your commercetools platform project via Client Credentials Flow. As a prerequisite you must have filled out environment variables in Postman for projectKey, client_id and client_secret to use this."
											},
											"response": []
										},
										{
											"name": "Create Cart: Targeted basket level discount",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var data = JSON.parse(responseBody);",
															"",
															"pm.test('Check status code', () => {",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
															"})",
															"",
															"pm.test(\"Discount is added to 'appliedDiscounts'\", function () {",
															"    pm.expect(data.lineItems.some(lineItem => lineItem.custom.fields['eagleeye-appliedDiscounts'].some(discount => discount.includes('Targeted Meal')))).to.be.true;",
															"});",
															"",
															"pm.collectionVariables.set('customTargetedBasketDiscountItemID', data.lineItems[0].id)",
															"",
															"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
															"    pm.environment.set(\"cart-id\", data.results[0].id); ",
															"    pm.environment.set(\"cart-version\", data.results[0].version);",
															"}",
															"if(data.results && data.results[0] && data.results[0].key){",
															"    pm.environment.set(\"cart-key\", data.results[0].key); ",
															"}",
															"if(data.version){",
															"    pm.environment.set(\"cart-version\", data.version);",
															"}",
															"if(data.id){",
															"    pm.environment.set(\"cart-id\", data.id); ",
															"}",
															"if(data.key){",
															"    pm.environment.set(\"cart-key\", data.key);",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "accessToken",
															"value": "{{ctp_access_token}}",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"value": "header",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "Bearer",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"currency\" : \"GBP\",\n  \"lineItems\": [\n      {\n          \"sku\": \"245871\",\n          \"quantity\": 1\n      },\n      {\n          \"sku\": \"245872\",\n          \"quantity\": 1\n      },\n      {\n          \"sku\": \"245873\",\n          \"quantity\": 1\n      }\n  ],\n  \"custom\": {\n      \"typeKey\": \"custom-cart-type\",\n      \"fields\": {\n          \"eagleeye-identityValue\":  \"john.toe6@example.org\"\n      }\n     \n  }\n}"
												},
												"url": {
													"raw": "{{host}}/{{project-key}}/carts",
													"host": [
														"{{host}}"
													],
													"path": [
														"{{project-key}}",
														"carts"
													],
													"query": [
														{
															"key": "expand",
															"value": "",
															"disabled": true
														}
													]
												},
												"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
											},
											"response": []
										},
										{
											"name": "Update Cart: Remove targeted basket level discount",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var data = JSON.parse(responseBody);",
															"",
															"pm.test('Check status code', () => {",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
															"})",
															"",
															"pm.test(\"Discount has been removed from 'appliedDiscounts'\", function () {",
															"    pm.expect(data.custom.fields['eagleeye-appliedDiscounts'].some(discount => discount.includes('Targeted Basket'))).to.be.false;",
															"});",
															"",
															"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
															"    pm.environment.set(\"cart-id\", data.results[0].id); ",
															"    pm.environment.set(\"cart-version\", data.results[0].version);",
															"}",
															"if(data.results && data.results[0] && data.results[0].key){",
															"    pm.environment.set(\"cart-key\", data.results[0].key); ",
															"}",
															"if(data.version){",
															"    pm.environment.set(\"cart-version\", data.version);",
															"}",
															"if(data.id){",
															"    pm.environment.set(\"cart-id\", data.id); ",
															"}",
															"if(data.key){",
															"    pm.environment.set(\"cart-key\", data.key);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "accessToken",
															"value": "{{ctp_access_token}}",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"value": "header",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "Bearer",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomerEmail\",\n            \"customerEmail\": \"john.nottargeted@example.org\"\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{host}}/{{project-key}}/carts/{{cart-id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"{{project-key}}",
														"carts",
														"{{cart-id}}"
													],
													"query": [
														{
															"key": "expand",
															"value": "",
															"disabled": true
														}
													]
												},
												"description": "post Carts"
											},
											"response": []
										},
										{
											"name": "Delete Cart",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
															"var data = JSON.parse(responseBody);",
															"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
															"    pm.environment.set(\"cart-id\", data.results[0].id); ",
															"    pm.environment.set(\"cart-version\", data.results[0].version);",
															"}",
															"if(data.results && data.results[0] && data.results[0].key){",
															"    pm.environment.set(\"cart-key\", data.results[0].key); ",
															"}",
															"if(data.version){",
															"    pm.environment.set(\"cart-version\", data.version);",
															"}",
															"if(data.id){",
															"    pm.environment.set(\"cart-id\", data.id); ",
															"}",
															"if(data.key){",
															"    pm.environment.set(\"cart-key\", data.key);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "accessToken",
															"value": "{{ctp_access_token}}",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"value": "header",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "Bearer",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{host}}/{{project-key}}/carts/{{cart-id}}?version={{cart-version}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"{{project-key}}",
														"carts",
														"{{cart-id}}"
													],
													"query": [
														{
															"key": "dataErasure",
															"value": "",
															"disabled": true
														},
														{
															"key": "expand",
															"value": "",
															"disabled": true
														},
														{
															"key": "version",
															"value": "{{cart-version}}"
														}
													]
												},
												"description": "null"
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Item Level Discounts",
							"item": [
								{
									"name": "Open item level discount",
									"item": [
										{
											"name": "Obtain access token",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"tests[\"Status code is 200\"] = responseCode.code === 200;",
															"var data = JSON.parse(responseBody);",
															"if(data.access_token){",
															"    pm.environment.set(\"ctp_access_token\", data.access_token);",
															"}",
															"if (data.scope) {",
															"    parts = data.scope.split(\" \");",
															"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
															"    if (parts.length > 0) {",
															"        scopeParts = parts[0];",
															"        pm.environment.set(\"project-key\", scopeParts[1]);",
															"        parts = parts.filter(scope => scope.length >= 3)",
															"        if (parts.length > 0) {",
															"            scopeParts = parts[0];",
															"            pm.environment.set(\"store-key\", scopeParts[2]);",
															"        }",
															"    }",
															"}"
														]
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{client_id}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{client_secret}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{auth_url}}/oauth/token?grant_type=client_credentials",
													"host": [
														"{{auth_url}}"
													],
													"path": [
														"oauth",
														"token"
													],
													"query": [
														{
															"key": "grant_type",
															"value": "client_credentials"
														}
													]
												},
												"description": "Use this request to obtain an access token for your commercetools platform project via Client Credentials Flow. As a prerequisite you must have filled out environment variables in Postman for projectKey, client_id and client_secret to use this."
											},
											"response": []
										},
										{
											"name": "Create Cart: Open item level discount",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var data = JSON.parse(responseBody);",
															"",
															"pm.test('Check status code', () => {",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
															"})",
															"",
															"pm.test(\"Discount is added to 'appliedDiscounts'\", function () {",
															"    pm.expect(data.lineItems[0].custom.fields['eagleeye-appliedDiscounts'].some(discount => discount.includes('Item Level Discount'))).to.be.true;",
															"});",
															"",
															"pm.collectionVariables.set('customOpenLevelDiscountItemID', data.lineItems[0].id)",
															"",
															"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
															"    pm.environment.set(\"cart-id\", data.results[0].id); ",
															"    pm.environment.set(\"cart-version\", data.results[0].version);",
															"}",
															"if(data.results && data.results[0] && data.results[0].key){",
															"    pm.environment.set(\"cart-key\", data.results[0].key); ",
															"}",
															"if(data.version){",
															"    pm.environment.set(\"cart-version\", data.version);",
															"}",
															"if(data.id){",
															"    pm.environment.set(\"cart-id\", data.id); ",
															"}",
															"if(data.key){",
															"    pm.environment.set(\"cart-key\", data.key);",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "accessToken",
															"value": "{{ctp_access_token}}",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"value": "header",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "Bearer",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"currency\" : \"GBP\",\n  \"lineItems\": [\n      {\n          \"sku\": \"245872\",\n          \"quantity\": 1\n      }\n  ]\n}"
												},
												"url": {
													"raw": "{{host}}/{{project-key}}/carts",
													"host": [
														"{{host}}"
													],
													"path": [
														"{{project-key}}",
														"carts"
													],
													"query": [
														{
															"key": "expand",
															"value": "",
															"disabled": true
														}
													]
												},
												"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
											},
											"response": []
										},
										{
											"name": "Update Cart: Remove open item level discount",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var data = JSON.parse(responseBody);",
															"",
															"pm.test('Check status code', () => {",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
															"})",
															"",
															"pm.test(\"Discount has been removed from 'appliedDiscounts'\", function () {",
															"    pm.expect(data.custom.fields['eagleeye-appliedDiscounts'].some(discount => discount.includes('Item Level Discount'))).to.be.false;",
															"});",
															"",
															"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
															"    pm.environment.set(\"cart-id\", data.results[0].id); ",
															"    pm.environment.set(\"cart-version\", data.results[0].version);",
															"}",
															"if(data.results && data.results[0] && data.results[0].key){",
															"    pm.environment.set(\"cart-key\", data.results[0].key); ",
															"}",
															"if(data.version){",
															"    pm.environment.set(\"cart-version\", data.version);",
															"}",
															"if(data.id){",
															"    pm.environment.set(\"cart-id\", data.id); ",
															"}",
															"if(data.key){",
															"    pm.environment.set(\"cart-key\", data.key);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "accessToken",
															"value": "{{ctp_access_token}}",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"value": "header",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "Bearer",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeLineItemQuantity\",\n            \"lineItemId\" : \"{{customOpenLevelDiscountItemID}}\",\n            \"quantity\" : 0\n          }\n    ]\n}"
												},
												"url": {
													"raw": "{{host}}/{{project-key}}/carts/{{cart-id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"{{project-key}}",
														"carts",
														"{{cart-id}}"
													],
													"query": [
														{
															"key": "expand",
															"value": "",
															"disabled": true
														}
													]
												},
												"description": "post Carts"
											},
											"response": []
										},
										{
											"name": "Delete Cart",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
															"var data = JSON.parse(responseBody);",
															"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
															"    pm.environment.set(\"cart-id\", data.results[0].id); ",
															"    pm.environment.set(\"cart-version\", data.results[0].version);",
															"}",
															"if(data.results && data.results[0] && data.results[0].key){",
															"    pm.environment.set(\"cart-key\", data.results[0].key); ",
															"}",
															"if(data.version){",
															"    pm.environment.set(\"cart-version\", data.version);",
															"}",
															"if(data.id){",
															"    pm.environment.set(\"cart-id\", data.id); ",
															"}",
															"if(data.key){",
															"    pm.environment.set(\"cart-key\", data.key);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "accessToken",
															"value": "{{ctp_access_token}}",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"value": "header",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "Bearer",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{host}}/{{project-key}}/carts/{{cart-id}}?version={{cart-version}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"{{project-key}}",
														"carts",
														"{{cart-id}}"
													],
													"query": [
														{
															"key": "dataErasure",
															"value": "",
															"disabled": true
														},
														{
															"key": "expand",
															"value": "",
															"disabled": true
														},
														{
															"key": "version",
															"value": "{{cart-version}}"
														}
													]
												},
												"description": "null"
											},
											"response": []
										}
									],
									"description": "## Discount information\n\n- Campaignid: 1653871.\n    \n- Campaign name: Open Item Level Discount (UPC: 245872).\n    \n- Campaign type: Discount Products.\n    \n- Reward type: £1 off UPC: 245872.\n    \n\n## Discount product:\n\n1. White Wine, SKU: 245872, Pricing: £63.83"
								},
								{
									"name": "Targeted item level discount",
									"item": [
										{
											"name": "Obtain access token",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"tests[\"Status code is 200\"] = responseCode.code === 200;",
															"var data = JSON.parse(responseBody);",
															"if(data.access_token){",
															"    pm.environment.set(\"ctp_access_token\", data.access_token);",
															"}",
															"if (data.scope) {",
															"    parts = data.scope.split(\" \");",
															"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
															"    if (parts.length > 0) {",
															"        scopeParts = parts[0];",
															"        pm.environment.set(\"project-key\", scopeParts[1]);",
															"        parts = parts.filter(scope => scope.length >= 3)",
															"        if (parts.length > 0) {",
															"            scopeParts = parts[0];",
															"            pm.environment.set(\"store-key\", scopeParts[2]);",
															"        }",
															"    }",
															"}"
														]
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{client_id}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{client_secret}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{auth_url}}/oauth/token?grant_type=client_credentials",
													"host": [
														"{{auth_url}}"
													],
													"path": [
														"oauth",
														"token"
													],
													"query": [
														{
															"key": "grant_type",
															"value": "client_credentials"
														}
													]
												},
												"description": "Use this request to obtain an access token for your commercetools platform project via Client Credentials Flow. As a prerequisite you must have filled out environment variables in Postman for projectKey, client_id and client_secret to use this."
											},
											"response": []
										},
										{
											"name": "Create Cart: Targeted item level discount",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var data = JSON.parse(responseBody);",
															"",
															"pm.test('Check status code', () => {",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
															"})",
															"",
															"pm.test(\"Discount is added to 'appliedDiscounts'\", function () {",
															"    pm.expect(data.lineItems.some(lineItem => lineItem.custom.fields['eagleeye-appliedDiscounts'].some(discount => discount.includes('Targeted Item')))).to.be.true;",
															"});",
															"",
															"pm.collectionVariables.set('customTargetedBasketDiscountItemID', data.lineItems[0].id)",
															"",
															"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
															"    pm.environment.set(\"cart-id\", data.results[0].id); ",
															"    pm.environment.set(\"cart-version\", data.results[0].version);",
															"}",
															"if(data.results && data.results[0] && data.results[0].key){",
															"    pm.environment.set(\"cart-key\", data.results[0].key); ",
															"}",
															"if(data.version){",
															"    pm.environment.set(\"cart-version\", data.version);",
															"}",
															"if(data.id){",
															"    pm.environment.set(\"cart-id\", data.id); ",
															"}",
															"if(data.key){",
															"    pm.environment.set(\"cart-key\", data.key);",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "accessToken",
															"value": "{{ctp_access_token}}",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"value": "header",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "Bearer",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"currency\" : \"GBP\",\n  \"lineItems\": [\n      {\n          \"sku\": \"245871\",\n          \"quantity\": 1\n      },\n      {\n          \"sku\": \"245872\",\n          \"quantity\": 1\n      },\n      {\n          \"sku\": \"245873\",\n          \"quantity\": 1\n      }\n  ],\n  \"custom\": {\n      \"typeKey\": \"custom-cart-type\",\n      \"fields\": {\n          \"eagleeye-identityValue\":  \"john.toe6@example.org\"\n      }\n     \n  }\n}"
												},
												"url": {
													"raw": "{{host}}/{{project-key}}/carts",
													"host": [
														"{{host}}"
													],
													"path": [
														"{{project-key}}",
														"carts"
													],
													"query": [
														{
															"key": "expand",
															"value": "",
															"disabled": true
														}
													]
												},
												"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
											},
											"response": []
										},
										{
											"name": "Update Cart: Remove targeted item level discount",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var data = JSON.parse(responseBody);",
															"",
															"pm.test('Check status code', () => {",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
															"})",
															"",
															"pm.test(\"Discount has been removed from 'appliedDiscounts'\", function () {",
															"    pm.expect(data.custom.fields['eagleeye-appliedDiscounts'].some(discount => discount.includes('Targeted Item'))).to.be.false;",
															"});",
															"",
															"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
															"    pm.environment.set(\"cart-id\", data.results[0].id); ",
															"    pm.environment.set(\"cart-version\", data.results[0].version);",
															"}",
															"if(data.results && data.results[0] && data.results[0].key){",
															"    pm.environment.set(\"cart-key\", data.results[0].key); ",
															"}",
															"if(data.version){",
															"    pm.environment.set(\"cart-version\", data.version);",
															"}",
															"if(data.id){",
															"    pm.environment.set(\"cart-id\", data.id); ",
															"}",
															"if(data.key){",
															"    pm.environment.set(\"cart-key\", data.key);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "accessToken",
															"value": "{{ctp_access_token}}",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"value": "header",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "Bearer",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"setCustomField\",\n            \"name\": \"eagleeye-identityValue\",\n            \"value\": null\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{host}}/{{project-key}}/carts/{{cart-id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"{{project-key}}",
														"carts",
														"{{cart-id}}"
													],
													"query": [
														{
															"key": "expand",
															"value": "",
															"disabled": true
														}
													]
												},
												"description": "post Carts"
											},
											"response": []
										},
										{
											"name": "Delete Cart",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
															"var data = JSON.parse(responseBody);",
															"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
															"    pm.environment.set(\"cart-id\", data.results[0].id); ",
															"    pm.environment.set(\"cart-version\", data.results[0].version);",
															"}",
															"if(data.results && data.results[0] && data.results[0].key){",
															"    pm.environment.set(\"cart-key\", data.results[0].key); ",
															"}",
															"if(data.version){",
															"    pm.environment.set(\"cart-version\", data.version);",
															"}",
															"if(data.id){",
															"    pm.environment.set(\"cart-id\", data.id); ",
															"}",
															"if(data.key){",
															"    pm.environment.set(\"cart-key\", data.key);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "accessToken",
															"value": "{{ctp_access_token}}",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"value": "header",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "Bearer",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{host}}/{{project-key}}/carts/{{cart-id}}?version={{cart-version}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"{{project-key}}",
														"carts",
														"{{cart-id}}"
													],
													"query": [
														{
															"key": "dataErasure",
															"value": "",
															"disabled": true
														},
														{
															"key": "expand",
															"value": "",
															"disabled": true
														},
														{
															"key": "version",
															"value": "{{cart-version}}"
														}
													]
												},
												"description": "null"
											},
											"response": []
										}
									],
									"description": "## Targeted Customer:\n\n1. Email: [john.toe1@example.org](https://mailto:john.toe1@example.org)"
								}
							]
						}
					],
					"description": "As a retailer, when a customer no longer meets the qualifying criteria for a basket or item level offer, that discount must be removed from their basket so that they are not getting discounts to which they are no longer entitled."
				},
				{
					"name": "Discount Codes",
					"item": [
						{
							"name": "Valid Codes",
							"item": [
								{
									"name": "Item Level Discount Code",
									"item": [
										{
											"name": "Single Item",
											"item": [
												{
													"name": "Create EE discount token",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"// Load global pre-request script object",
																	"var ee = eval(pm.globals.get('ees'));",
																	"",
																	"// Set up any environment variables",
																	"ee.setUrl('wallet_url');",
																	"",
																	"// Call the global authentication function",
																	"ee.auth();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"tests[\"Status code is 201\"] = responseCode.code === 201;",
																	"",
																	"var jsonData = JSON.parse(responseBody);",
																	"pm.collectionVariables.set('itemDiscountToken', jsonData.token);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "X-EES-AUTH-HASH",
																"value": "{{xAuthHash}}"
															},
															{
																"key": "X-EES-AUTH-CLIENT-ID",
																"value": "{{xAuthClientId}}"
															},
															{
																"key": "X-AUTH-HASH",
																"value": "{{xAuthHash}}"
															},
															{
																"key": "X-AUTH-CLIENT-ID",
																"value": "{{xAuthClientId}}"
															},
															{
																"key": "X-TRANSACTION-ID",
																"value": "{{xTransactionId}}"
															},
															{
																"key": "X-RETRY",
																"value": "1"
															},
															{
																"key": "X-EES-OPERATOR",
																"value": "1"
															},
															{
																"key": "X-EES-CALLER",
																"value": "DASHBOARD"
															},
															{
																"key": "X-EES-CALLER-VERSION",
																"value": "0"
															},
															{
																"key": "X-EES-MESSAGEID",
																"value": "03d476861afd384510f2cb80ccfa8511"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"resourceType\": \"CAMPAIGN\",\n    \"resourceId\": 1744392\n}"
														},
														"url": {
															"raw": "{{url}}/token/create",
															"host": [
																"{{url}}"
															],
															"path": [
																"token",
																"create"
															]
														}
													},
													"response": []
												},
												{
													"name": "Obtain access token",
													"event": [
														{
															"listen": "test",
															"script": {
																"type": "text/javascript",
																"exec": [
																	"tests[\"Status code is 200\"] = responseCode.code === 200;",
																	"var data = JSON.parse(responseBody);",
																	"if(data.access_token){",
																	"    pm.environment.set(\"ctp_access_token\", data.access_token);",
																	"}",
																	"if (data.scope) {",
																	"    parts = data.scope.split(\" \");",
																	"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
																	"    if (parts.length > 0) {",
																	"        scopeParts = parts[0];",
																	"        pm.environment.set(\"project-key\", scopeParts[1]);",
																	"        parts = parts.filter(scope => scope.length >= 3)",
																	"        if (parts.length > 0) {",
																	"            scopeParts = parts[0];",
																	"            pm.environment.set(\"store-key\", scopeParts[2]);",
																	"        }",
																	"    }",
																	"}"
																]
															}
														}
													],
													"request": {
														"auth": {
															"type": "basic",
															"basic": [
																{
																	"key": "username",
																	"value": "{{client_id}}",
																	"type": "string"
																},
																{
																	"key": "password",
																	"value": "{{client_secret}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{auth_url}}/oauth/token?grant_type=client_credentials",
															"host": [
																"{{auth_url}}"
															],
															"path": [
																"oauth",
																"token"
															],
															"query": [
																{
																	"key": "grant_type",
																	"value": "client_credentials"
																}
															]
														},
														"description": "Use this request to obtain an access token for your commercetools platform project via Client Credentials Flow. As a prerequisite you must have filled out environment variables in Postman for projectKey, client_id and client_secret to use this."
													},
													"response": []
												},
												{
													"name": "Create Cart: Item level discount code",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var data = JSON.parse(responseBody);",
																	"",
																	"pm.test('Check status code', () => {",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
																	"})",
																	"",
																	"pm.test(\"Discount is added to 'appliedDiscounts'\", function () {",
																	"    pm.expect(data.lineItems[0].custom.fields['eagleeye-appliedDiscounts'].some(discount => discount.includes('Discount With Token'))).to.be.true;",
																	"});",
																	"",
																	"pm.collectionVariables.set('customItemDiscountTokenId', data.lineItems[0].id)",
																	"",
																	"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
																	"    pm.environment.set(\"cart-id\", data.results[0].id); ",
																	"    pm.environment.set(\"cart-version\", data.results[0].version);",
																	"}",
																	"if(data.results && data.results[0] && data.results[0].key){",
																	"    pm.environment.set(\"cart-key\", data.results[0].key); ",
																	"}",
																	"if(data.version){",
																	"    pm.environment.set(\"cart-version\", data.version);",
																	"}",
																	"if(data.id){",
																	"    pm.environment.set(\"cart-id\", data.id); ",
																	"}",
																	"if(data.key){",
																	"    pm.environment.set(\"cart-key\", data.key);",
																	"}",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "oauth2",
															"oauth2": [
																{
																	"key": "accessToken",
																	"value": "{{ctp_access_token}}",
																	"type": "string"
																},
																{
																	"key": "addTokenTo",
																	"value": "header",
																	"type": "string"
																},
																{
																	"key": "tokenType",
																	"value": "Bearer",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"currency\": \"GBP\",\n  \"customerEmail\": \"john.toe7@example.org\",\n  \"lineItems\": [\n    {\n      \"sku\": \"245885\",\n      \"quantity\": 1\n    }\n  ],\n  \"custom\": {\n      \"type\": {\n          \"typeId\": \"type\",\n          \"key\": \"custom-cart-type\"\n      },\n      \"fields\": {\n          \"eagleeye-voucherCodes\": [\n              \"{{itemDiscountToken}}\"\n          ]\n      }\n  }\n}"
														},
														"url": {
															"raw": "{{host}}/{{project-key}}/carts",
															"host": [
																"{{host}}"
															],
															"path": [
																"{{project-key}}",
																"carts"
															],
															"query": [
																{
																	"key": "expand",
																	"value": "",
																	"disabled": true
																}
															]
														},
														"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
													},
													"response": []
												},
												{
													"name": "Update Cart: Remove applicable item",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var data = JSON.parse(responseBody);",
																	"",
																	"pm.test('Check status code', () => {",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
																	"})",
																	"",
																	"pm.test(\"Discount has been removed from 'appliedDiscounts'\", function () {",
																	"    pm.expect(data.custom.fields['eagleeye-appliedDiscounts'].some(discount => discount.includes('Discount With Token'))).to.be.false;",
																	"});",
																	"",
																	"pm.test(\"'Not Valid' Error is seen under 'eagleeye-errors'\", function () {",
																	"    pm.expect(data.custom.fields['eagleeye-errors'].some(discount => discount.includes('Not Valid'))).to.be.true;",
																	"});",
																	"",
																	"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
																	"    pm.environment.set(\"cart-id\", data.results[0].id); ",
																	"    pm.environment.set(\"cart-version\", data.results[0].version);",
																	"}",
																	"if(data.results && data.results[0] && data.results[0].key){",
																	"    pm.environment.set(\"cart-key\", data.results[0].key); ",
																	"}",
																	"if(data.version){",
																	"    pm.environment.set(\"cart-version\", data.version);",
																	"}",
																	"if(data.id){",
																	"    pm.environment.set(\"cart-id\", data.id); ",
																	"}",
																	"if(data.key){",
																	"    pm.environment.set(\"cart-key\", data.key);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "oauth2",
															"oauth2": [
																{
																	"key": "accessToken",
																	"value": "{{ctp_access_token}}",
																	"type": "string"
																},
																{
																	"key": "addTokenTo",
																	"value": "header",
																	"type": "string"
																},
																{
																	"key": "tokenType",
																	"value": "Bearer",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeLineItemQuantity\",\n            \"lineItemId\" : \"{{customItemDiscountTokenId}}\",\n            \"quantity\" : 0\n          }\n    ]\n}"
														},
														"url": {
															"raw": "{{host}}/{{project-key}}/carts/{{cart-id}}",
															"host": [
																"{{host}}"
															],
															"path": [
																"{{project-key}}",
																"carts",
																"{{cart-id}}"
															],
															"query": [
																{
																	"key": "expand",
																	"value": "",
																	"disabled": true
																}
															]
														},
														"description": "post Carts"
													},
													"response": []
												},
												{
													"name": "Delete Cart",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
																	"var data = JSON.parse(responseBody);",
																	"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
																	"    pm.environment.set(\"cart-id\", data.results[0].id); ",
																	"    pm.environment.set(\"cart-version\", data.results[0].version);",
																	"}",
																	"if(data.results && data.results[0] && data.results[0].key){",
																	"    pm.environment.set(\"cart-key\", data.results[0].key); ",
																	"}",
																	"if(data.version){",
																	"    pm.environment.set(\"cart-version\", data.version);",
																	"}",
																	"if(data.id){",
																	"    pm.environment.set(\"cart-id\", data.id); ",
																	"}",
																	"if(data.key){",
																	"    pm.environment.set(\"cart-key\", data.key);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "oauth2",
															"oauth2": [
																{
																	"key": "accessToken",
																	"value": "{{ctp_access_token}}",
																	"type": "string"
																},
																{
																	"key": "addTokenTo",
																	"value": "header",
																	"type": "string"
																},
																{
																	"key": "tokenType",
																	"value": "Bearer",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{host}}/{{project-key}}/carts/{{cart-id}}?version={{cart-version}}",
															"host": [
																"{{host}}"
															],
															"path": [
																"{{project-key}}",
																"carts",
																"{{cart-id}}"
															],
															"query": [
																{
																	"key": "dataErasure",
																	"value": "",
																	"disabled": true
																},
																{
																	"key": "expand",
																	"value": "",
																	"disabled": true
																},
																{
																	"key": "version",
																	"value": "{{cart-version}}"
																}
															]
														},
														"description": "null"
													},
													"response": []
												}
											]
										},
										{
											"name": "Multiple items",
											"item": [
												{
													"name": "Create EE discount token",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"// Load global pre-request script object",
																	"var ee = eval(pm.globals.get('ees'));",
																	"",
																	"// Set up any environment variables",
																	"ee.setUrl('wallet_url');",
																	"",
																	"// Call the global authentication function",
																	"ee.auth();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"tests[\"Status code is 201\"] = responseCode.code === 201;",
																	"",
																	"var jsonData = JSON.parse(responseBody);",
																	"pm.collectionVariables.set('itemDiscountToken', jsonData.token);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "X-EES-AUTH-HASH",
																"value": "{{xAuthHash}}"
															},
															{
																"key": "X-EES-AUTH-CLIENT-ID",
																"value": "{{xAuthClientId}}"
															},
															{
																"key": "X-AUTH-HASH",
																"value": "{{xAuthHash}}"
															},
															{
																"key": "X-AUTH-CLIENT-ID",
																"value": "{{xAuthClientId}}"
															},
															{
																"key": "X-TRANSACTION-ID",
																"value": "{{xTransactionId}}"
															},
															{
																"key": "X-RETRY",
																"value": "1"
															},
															{
																"key": "X-EES-OPERATOR",
																"value": "1"
															},
															{
																"key": "X-EES-CALLER",
																"value": "DASHBOARD"
															},
															{
																"key": "X-EES-CALLER-VERSION",
																"value": "0"
															},
															{
																"key": "X-EES-MESSAGEID",
																"value": "03d476861afd384510f2cb80ccfa8511"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"resourceType\": \"CAMPAIGN\",\n    \"resourceId\": 1744392\n}"
														},
														"url": {
															"raw": "{{url}}/token/create",
															"host": [
																"{{url}}"
															],
															"path": [
																"token",
																"create"
															]
														}
													},
													"response": []
												},
												{
													"name": "Obtain access token",
													"event": [
														{
															"listen": "test",
															"script": {
																"type": "text/javascript",
																"exec": [
																	"tests[\"Status code is 200\"] = responseCode.code === 200;",
																	"var data = JSON.parse(responseBody);",
																	"if(data.access_token){",
																	"    pm.environment.set(\"ctp_access_token\", data.access_token);",
																	"}",
																	"if (data.scope) {",
																	"    parts = data.scope.split(\" \");",
																	"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
																	"    if (parts.length > 0) {",
																	"        scopeParts = parts[0];",
																	"        pm.environment.set(\"project-key\", scopeParts[1]);",
																	"        parts = parts.filter(scope => scope.length >= 3)",
																	"        if (parts.length > 0) {",
																	"            scopeParts = parts[0];",
																	"            pm.environment.set(\"store-key\", scopeParts[2]);",
																	"        }",
																	"    }",
																	"}"
																]
															}
														}
													],
													"request": {
														"auth": {
															"type": "basic",
															"basic": [
																{
																	"key": "username",
																	"value": "{{client_id}}",
																	"type": "string"
																},
																{
																	"key": "password",
																	"value": "{{client_secret}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{auth_url}}/oauth/token?grant_type=client_credentials",
															"host": [
																"{{auth_url}}"
															],
															"path": [
																"oauth",
																"token"
															],
															"query": [
																{
																	"key": "grant_type",
																	"value": "client_credentials"
																}
															]
														},
														"description": "Use this request to obtain an access token for your commercetools platform project via Client Credentials Flow. As a prerequisite you must have filled out environment variables in Postman for projectKey, client_id and client_secret to use this."
													},
													"response": []
												},
												{
													"name": "Create Cart: Item level discount code",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var data = JSON.parse(responseBody);",
																	"",
																	"pm.test('Check status code', () => {",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
																	"})",
																	"",
																	"pm.test(\"Discount is added to 'appliedDiscounts'\", function () {",
																	"    pm.expect(data.lineItems[0].custom.fields['eagleeye-appliedDiscounts'].some(discount => discount.includes('Discount With Token'))).to.be.true;",
																	"",
																	"});",
																	"",
																	"pm.collectionVariables.set('customItemDiscountTokenId', data.lineItems[0].id)",
																	"",
																	"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
																	"    pm.environment.set(\"cart-id\", data.results[0].id); ",
																	"    pm.environment.set(\"cart-version\", data.results[0].version);",
																	"}",
																	"if(data.results && data.results[0] && data.results[0].key){",
																	"    pm.environment.set(\"cart-key\", data.results[0].key); ",
																	"}",
																	"if(data.version){",
																	"    pm.environment.set(\"cart-version\", data.version);",
																	"}",
																	"if(data.id){",
																	"    pm.environment.set(\"cart-id\", data.id); ",
																	"}",
																	"if(data.key){",
																	"    pm.environment.set(\"cart-key\", data.key);",
																	"}",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "oauth2",
															"oauth2": [
																{
																	"key": "accessToken",
																	"value": "{{ctp_access_token}}",
																	"type": "string"
																},
																{
																	"key": "addTokenTo",
																	"value": "header",
																	"type": "string"
																},
																{
																	"key": "tokenType",
																	"value": "Bearer",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"currency\": \"GBP\",\n  \"customerEmail\": \"john.toe7@example.org\",\n  \"lineItems\": [\n    {\n      \"sku\": \"245885\",\n      \"quantity\": 1\n    },\n    {\n      \"sku\": \"245872\",\n      \"quantity\": 1\n    }\n  ],\n  \"custom\": {\n      \"type\": {\n          \"typeId\": \"type\",\n          \"key\": \"custom-cart-type\"\n      },\n      \"fields\": {\n          \"eagleeye-voucherCodes\": [\n              \"{{itemDiscountToken}}\"\n          ]\n      }\n  }\n}"
														},
														"url": {
															"raw": "{{host}}/{{project-key}}/carts",
															"host": [
																"{{host}}"
															],
															"path": [
																"{{project-key}}",
																"carts"
															],
															"query": [
																{
																	"key": "expand",
																	"value": "",
																	"disabled": true
																}
															]
														},
														"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
													},
													"response": []
												},
												{
													"name": "Update Cart: Remove applicable item",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var data = JSON.parse(responseBody);",
																	"",
																	"pm.test('Check status code', () => {",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
																	"})",
																	"",
																	"pm.test(\"Discount has been removed from 'appliedDiscounts'\", function () {",
																	"    pm.expect(data.custom.fields['eagleeye-appliedDiscounts'].some(discount => discount.includes('Discount With Token'))).to.be.false;",
																	"});",
																	"",
																	"pm.test(\"'Not Valid' Error is seen under 'eagleeye-errors'\", function () {",
																	"    pm.expect(data.custom.fields['eagleeye-errors'].some(discount => discount.includes('Not Valid'))).to.be.true;",
																	"});",
																	"",
																	"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
																	"    pm.environment.set(\"cart-id\", data.results[0].id); ",
																	"    pm.environment.set(\"cart-version\", data.results[0].version);",
																	"}",
																	"if(data.results && data.results[0] && data.results[0].key){",
																	"    pm.environment.set(\"cart-key\", data.results[0].key); ",
																	"}",
																	"if(data.version){",
																	"    pm.environment.set(\"cart-version\", data.version);",
																	"}",
																	"if(data.id){",
																	"    pm.environment.set(\"cart-id\", data.id); ",
																	"}",
																	"if(data.key){",
																	"    pm.environment.set(\"cart-key\", data.key);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "oauth2",
															"oauth2": [
																{
																	"key": "accessToken",
																	"value": "{{ctp_access_token}}",
																	"type": "string"
																},
																{
																	"key": "addTokenTo",
																	"value": "header",
																	"type": "string"
																},
																{
																	"key": "tokenType",
																	"value": "Bearer",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeLineItemQuantity\",\n            \"lineItemId\" : \"{{customItemDiscountTokenId}}\",\n            \"quantity\" : 0\n          }\n    ]\n}"
														},
														"url": {
															"raw": "{{host}}/{{project-key}}/carts/{{cart-id}}",
															"host": [
																"{{host}}"
															],
															"path": [
																"{{project-key}}",
																"carts",
																"{{cart-id}}"
															],
															"query": [
																{
																	"key": "expand",
																	"value": "",
																	"disabled": true
																}
															]
														},
														"description": "post Carts"
													},
													"response": []
												},
												{
													"name": "Delete Cart",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
																	"var data = JSON.parse(responseBody);",
																	"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
																	"    pm.environment.set(\"cart-id\", data.results[0].id); ",
																	"    pm.environment.set(\"cart-version\", data.results[0].version);",
																	"}",
																	"if(data.results && data.results[0] && data.results[0].key){",
																	"    pm.environment.set(\"cart-key\", data.results[0].key); ",
																	"}",
																	"if(data.version){",
																	"    pm.environment.set(\"cart-version\", data.version);",
																	"}",
																	"if(data.id){",
																	"    pm.environment.set(\"cart-id\", data.id); ",
																	"}",
																	"if(data.key){",
																	"    pm.environment.set(\"cart-key\", data.key);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "oauth2",
															"oauth2": [
																{
																	"key": "accessToken",
																	"value": "{{ctp_access_token}}",
																	"type": "string"
																},
																{
																	"key": "addTokenTo",
																	"value": "header",
																	"type": "string"
																},
																{
																	"key": "tokenType",
																	"value": "Bearer",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{host}}/{{project-key}}/carts/{{cart-id}}?version={{cart-version}}",
															"host": [
																"{{host}}"
															],
															"path": [
																"{{project-key}}",
																"carts",
																"{{cart-id}}"
															],
															"query": [
																{
																	"key": "dataErasure",
																	"value": "",
																	"disabled": true
																},
																{
																	"key": "expand",
																	"value": "",
																	"disabled": true
																},
																{
																	"key": "version",
																	"value": "{{cart-version}}"
																}
															]
														},
														"description": "null"
													},
													"response": []
												}
											]
										}
									],
									"description": "## Discount information\n\n- Campaignid: 1744392.\n- Campaign name: Product Discount With Token (UPC: 245885).\n- Campaign type: Discount Products.\n- Reward type: £2 Off UPC: 245885."
								},
								{
									"name": "Basket Level Discount Code",
									"item": [
										{
											"name": "Create EE discount token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Load global pre-request script object",
															"var ee = eval(pm.globals.get('ees'));",
															"",
															"// Set up any environment variables",
															"ee.setUrl('wallet_url');",
															"",
															"// Call the global authentication function",
															"ee.auth();"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"tests[\"Status code is 201\"] = responseCode.code === 201;",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"pm.collectionVariables.set('basketDiscountToken', jsonData.token);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-EES-AUTH-HASH",
														"value": "{{xAuthHash}}"
													},
													{
														"key": "X-EES-AUTH-CLIENT-ID",
														"value": "{{xAuthClientId}}"
													},
													{
														"key": "X-AUTH-HASH",
														"value": "{{xAuthHash}}"
													},
													{
														"key": "X-AUTH-CLIENT-ID",
														"value": "{{xAuthClientId}}"
													},
													{
														"key": "X-TRANSACTION-ID",
														"value": "{{xTransactionId}}"
													},
													{
														"key": "X-RETRY",
														"value": "1"
													},
													{
														"key": "X-EES-OPERATOR",
														"value": "1"
													},
													{
														"key": "X-EES-CALLER",
														"value": "DASHBOARD"
													},
													{
														"key": "X-EES-CALLER-VERSION",
														"value": "0"
													},
													{
														"key": "X-EES-MESSAGEID",
														"value": "03d476861afd384510f2cb80ccfa8511"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"resourceType\": \"CAMPAIGN\",\n    \"resourceId\": 1744391\n}"
												},
												"url": {
													"raw": "{{url}}/token/create",
													"host": [
														"{{url}}"
													],
													"path": [
														"token",
														"create"
													]
												}
											},
											"response": []
										},
										{
											"name": "Obtain access token",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"tests[\"Status code is 200\"] = responseCode.code === 200;",
															"var data = JSON.parse(responseBody);",
															"if(data.access_token){",
															"    pm.environment.set(\"ctp_access_token\", data.access_token);",
															"}",
															"if (data.scope) {",
															"    parts = data.scope.split(\" \");",
															"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
															"    if (parts.length > 0) {",
															"        scopeParts = parts[0];",
															"        pm.environment.set(\"project-key\", scopeParts[1]);",
															"        parts = parts.filter(scope => scope.length >= 3)",
															"        if (parts.length > 0) {",
															"            scopeParts = parts[0];",
															"            pm.environment.set(\"store-key\", scopeParts[2]);",
															"        }",
															"    }",
															"}"
														]
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{client_id}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{client_secret}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{auth_url}}/oauth/token?grant_type=client_credentials",
													"host": [
														"{{auth_url}}"
													],
													"path": [
														"oauth",
														"token"
													],
													"query": [
														{
															"key": "grant_type",
															"value": "client_credentials"
														}
													]
												},
												"description": "Use this request to obtain an access token for your commercetools platform project via Client Credentials Flow. As a prerequisite you must have filled out environment variables in Postman for projectKey, client_id and client_secret to use this."
											},
											"response": []
										},
										{
											"name": "Create Cart: Basket level discount code",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var data = JSON.parse(responseBody);",
															"",
															"pm.test('Check status code', () => {",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
															"})",
															"",
															"pm.test(\"Discount is added to 'appliedDiscounts'\", function () {",
															"    pm.expect(data.custom.fields['eagleeye-appliedDiscounts'].some(discount => discount.includes('Discount Basket with Token'))).to.be.true;",
															"});",
															"",
															"pm.collectionVariables.set('customBasketDiscountTokenId', data.lineItems[0].id)",
															"",
															"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
															"    pm.environment.set(\"cart-id\", data.results[0].id); ",
															"    pm.environment.set(\"cart-version\", data.results[0].version);",
															"}",
															"if(data.results && data.results[0] && data.results[0].key){",
															"    pm.environment.set(\"cart-key\", data.results[0].key); ",
															"}",
															"if(data.version){",
															"    pm.environment.set(\"cart-version\", data.version);",
															"}",
															"if(data.id){",
															"    pm.environment.set(\"cart-id\", data.id); ",
															"}",
															"if(data.key){",
															"    pm.environment.set(\"cart-key\", data.key);",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "accessToken",
															"value": "{{ctp_access_token}}",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"value": "header",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "Bearer",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"currency\": \"GBP\",\n  \"customerEmail\": \"john.toe7@example.org\",\n  \"lineItems\": [\n    {\n      \"sku\": \"245873\",\n      \"quantity\": 3\n    }\n  ],\n  \"custom\": {\n      \"type\": {\n          \"typeId\": \"type\",\n          \"key\": \"custom-cart-type\"\n      },\n      \"fields\": {\n          \"eagleeye-voucherCodes\": [\n              \"{{basketDiscountToken}}\"\n          ]\n      }\n  }\n}"
												},
												"url": {
													"raw": "{{host}}/{{project-key}}/carts",
													"host": [
														"{{host}}"
													],
													"path": [
														"{{project-key}}",
														"carts"
													],
													"query": [
														{
															"key": "expand",
															"value": "",
															"disabled": true
														}
													]
												},
												"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
											},
											"response": []
										},
										{
											"name": "Update Cart: Change items",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var data = JSON.parse(responseBody);",
															"",
															"pm.test('Check status code', () => {",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
															"})",
															"",
															"pm.test(\"Discount has been removed from 'appliedDiscounts'\", function () {",
															"    pm.expect(data.custom.fields['eagleeye-appliedDiscounts'].some(discount => discount.includes('Discount Basket with Token'))).to.be.false;",
															"});",
															"",
															"pm.test(\"'Not Valid' Error is seen under 'eagleeye-errors'\", function () {",
															"    pm.expect(data.custom.fields['eagleeye-errors'].some(discount => discount.includes('Not Valid'))).to.be.true;",
															"});",
															"",
															"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
															"    pm.environment.set(\"cart-id\", data.results[0].id); ",
															"    pm.environment.set(\"cart-version\", data.results[0].version);",
															"}",
															"if(data.results && data.results[0] && data.results[0].key){",
															"    pm.environment.set(\"cart-key\", data.results[0].key); ",
															"}",
															"if(data.version){",
															"    pm.environment.set(\"cart-version\", data.version);",
															"}",
															"if(data.id){",
															"    pm.environment.set(\"cart-id\", data.id); ",
															"}",
															"if(data.key){",
															"    pm.environment.set(\"cart-key\", data.key);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "accessToken",
															"value": "{{ctp_access_token}}",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"value": "header",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "Bearer",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeLineItemQuantity\",\n            \"lineItemId\" : \"{{customBasketDiscountTokenId}}\",\n            \"quantity\" : 0\n          }\n    ]\n}"
												},
												"url": {
													"raw": "{{host}}/{{project-key}}/carts/{{cart-id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"{{project-key}}",
														"carts",
														"{{cart-id}}"
													],
													"query": [
														{
															"key": "expand",
															"value": "",
															"disabled": true
														}
													]
												},
												"description": "post Carts"
											},
											"response": []
										},
										{
											"name": "Delete Cart",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
															"var data = JSON.parse(responseBody);",
															"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
															"    pm.environment.set(\"cart-id\", data.results[0].id); ",
															"    pm.environment.set(\"cart-version\", data.results[0].version);",
															"}",
															"if(data.results && data.results[0] && data.results[0].key){",
															"    pm.environment.set(\"cart-key\", data.results[0].key); ",
															"}",
															"if(data.version){",
															"    pm.environment.set(\"cart-version\", data.version);",
															"}",
															"if(data.id){",
															"    pm.environment.set(\"cart-id\", data.id); ",
															"}",
															"if(data.key){",
															"    pm.environment.set(\"cart-key\", data.key);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "accessToken",
															"value": "{{ctp_access_token}}",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"value": "header",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "Bearer",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{host}}/{{project-key}}/carts/{{cart-id}}?version={{cart-version}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"{{project-key}}",
														"carts",
														"{{cart-id}}"
													],
													"query": [
														{
															"key": "dataErasure",
															"value": "",
															"disabled": true
														},
														{
															"key": "expand",
															"value": "",
															"disabled": true
														},
														{
															"key": "version",
															"value": "{{cart-version}}"
														}
													]
												},
												"description": "null"
											},
											"response": []
										}
									],
									"description": "## Discount information\n\n- Campaignid: 1744391.\n    \n- Campaign name: Discount Basket (15%) with Token.\n    \n- Campaign type: Discount Basket.\n    \n- Reward type: 15% Off basket."
								},
								{
									"name": "Multi-item Discount Code",
									"item": [
										{
											"name": "Create EE discount token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Load global pre-request script object",
															"var ee = eval(pm.globals.get('ees'));",
															"",
															"// Set up any environment variables",
															"ee.setUrl('wallet_url');",
															"",
															"// Call the global authentication function",
															"ee.auth();"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"tests[\"Status code is 201\"] = responseCode.code === 201;",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"pm.collectionVariables.set('multiItemDiscountToken', jsonData.token);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "X-EES-AUTH-HASH",
														"value": "{{xAuthHash}}"
													},
													{
														"key": "X-EES-AUTH-CLIENT-ID",
														"value": "{{xAuthClientId}}"
													},
													{
														"key": "X-AUTH-HASH",
														"value": "{{xAuthHash}}"
													},
													{
														"key": "X-AUTH-CLIENT-ID",
														"value": "{{xAuthClientId}}"
													},
													{
														"key": "X-TRANSACTION-ID",
														"value": "{{xTransactionId}}"
													},
													{
														"key": "X-RETRY",
														"value": "1"
													},
													{
														"key": "X-EES-OPERATOR",
														"value": "1"
													},
													{
														"key": "X-EES-CALLER",
														"value": "DASHBOARD"
													},
													{
														"key": "X-EES-CALLER-VERSION",
														"value": "0"
													},
													{
														"key": "X-EES-MESSAGEID",
														"value": "03d476861afd384510f2cb80ccfa8511"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"resourceType\": \"CAMPAIGN\",\n    \"resourceId\": 1746967\n}"
												},
												"url": {
													"raw": "{{url}}/token/create",
													"host": [
														"{{url}}"
													],
													"path": [
														"token",
														"create"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create new wallet and targeted coupons",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Load global pre-request script object",
															"var ee = eval(pm.globals.get('ees'));",
															"ee.setUrl('wallet_url');",
															"",
															"// Set up any environment variables",
															"pm.environment.set('value', CryptoJS.lib.WordArray.random(128/8).toString());",
															"",
															"// Call the global authentication function",
															"ee.auth();"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"tests[\"Status code is 201\"] = responseCode.code === 201;",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"pm.environment.set('walletId', jsonData.walletId);",
															"pm.environment.set('identityValue', jsonData.identities[0].value);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "X-EES-AUTH-HASH",
														"value": "{{xAuthHash}}"
													},
													{
														"key": "X-EES-AUTH-CLIENT-ID",
														"value": "{{xAuthClientId}}"
													},
													{
														"key": "X-AUTH-HASH",
														"value": "{{xAuthHash}}"
													},
													{
														"key": "X-AUTH-CLIENT-ID",
														"value": "{{xAuthClientId}}"
													},
													{
														"key": "X-TRANSACTION-ID",
														"value": "{{xTransactionId}}"
													},
													{
														"key": "X-RETRY",
														"value": "1"
													},
													{
														"key": "X-EES-OPERATOR",
														"value": "1"
													},
													{
														"key": "X-EES-CALLER",
														"value": "POSTMAN"
													},
													{
														"key": "X-EES-CALLER-VERSION",
														"value": "0"
													},
													{
														"key": "X-EES-MESSAGEID",
														"value": "03d476861afd384510f2cb80ccfa8511"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"type\": \"CONSUMER\",\n    \"identities\": [\n        {\n            \"type\": \"CUSTOMER_ID\",\n            \"value\": \"{{value}}\"\n        }\n    ],\n    \"accounts\": {\n        \"campaign\": [\n            {\n                \"campaignId\": \"1653867\"\n            },\n            {\n                \"campaignId\": \"1653869\"\n            },\n            {\n                \"campaignId\": \"1653873\"\n            },\n            {\n                \"campaignId\": \"1669986\"\n            }\n        ],\n        \"scheme\": [\n            {\n                \"status\": \"ACTIVE\",\n                \"schemeId\": \"{{schemeId}}\"\n            }\n        ]\n    }\n}"
												},
												"url": {
													"raw": "{{url}}/services/wallet/accounts",
													"host": [
														"{{url}}"
													],
													"path": [
														"services",
														"wallet",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "Obtain access token",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"tests[\"Status code is 200\"] = responseCode.code === 200;",
															"var data = JSON.parse(responseBody);",
															"if(data.access_token){",
															"    pm.environment.set(\"ctp_access_token\", data.access_token);",
															"}",
															"if (data.scope) {",
															"    parts = data.scope.split(\" \");",
															"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
															"    if (parts.length > 0) {",
															"        scopeParts = parts[0];",
															"        pm.environment.set(\"project-key\", scopeParts[1]);",
															"        parts = parts.filter(scope => scope.length >= 3)",
															"        if (parts.length > 0) {",
															"            scopeParts = parts[0];",
															"            pm.environment.set(\"store-key\", scopeParts[2]);",
															"        }",
															"    }",
															"}"
														]
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{client_id}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{client_secret}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{auth_url}}/oauth/token?grant_type=client_credentials",
													"host": [
														"{{auth_url}}"
													],
													"path": [
														"oauth",
														"token"
													],
													"query": [
														{
															"key": "grant_type",
															"value": "client_credentials"
														}
													]
												},
												"description": "Use this request to obtain an access token for your commercetools platform project via Client Credentials Flow. As a prerequisite you must have filled out environment variables in Postman for projectKey, client_id and client_secret to use this."
											},
											"response": []
										},
										{
											"name": "Create Cart: Multi-item discount code",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var data = JSON.parse(responseBody);",
															"",
															"pm.test('Check status code', () => {",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
															"})",
															"",
															"pm.test(\"Discount is added to 'appliedDiscounts'\", function () {",
															"    pm.expect(data.lineItems.some(lineItem => lineItem.custom.fields['eagleeye-appliedDiscounts'].some(discount => discount.includes('Meal Deal')))).to.be.true;",
															"    ",
															"});",
															"",
															"pm.collectionVariables.set('customMealDiscountTokenId', data.lineItems[0].id)",
															"",
															"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
															"    pm.environment.set(\"cart-id\", data.results[0].id); ",
															"    pm.environment.set(\"cart-version\", data.results[0].version);",
															"}",
															"if(data.results && data.results[0] && data.results[0].key){",
															"    pm.environment.set(\"cart-key\", data.results[0].key); ",
															"}",
															"if(data.version){",
															"    pm.environment.set(\"cart-version\", data.version);",
															"}",
															"if(data.id){",
															"    pm.environment.set(\"cart-id\", data.id); ",
															"}",
															"if(data.key){",
															"    pm.environment.set(\"cart-key\", data.key);",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "accessToken",
															"value": "{{ctp_access_token}}",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"value": "header",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "Bearer",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"currency\": \"GBP\",\n  \"shippingAddress\": {\n      \"country\": \"GB\"\n  },\n  \"lineItems\": [\n    {\n      \"sku\": \"245871\",\n      \"quantity\": 1\n    },\n    {\n      \"sku\": \"245872\",\n      \"quantity\": 1\n    },\n    {\n      \"sku\": \"245873\",\n      \"quantity\": 1\n    }\n  ],\n  \"custom\": {\n      \"type\": {\n          \"typeId\": \"type\",\n          \"key\": \"custom-cart-type\"\n      },\n      \"fields\": {\n          \"eagleeye-voucherCodes\": [\n              \"{{multiItemDiscountToken}}\"\n          ],\n          \"eagleeye-identityValue\": \"{{value}}\"\n      }\n  }\n}"
												},
												"url": {
													"raw": "{{host}}/{{project-key}}/carts",
													"host": [
														"{{host}}"
													],
													"path": [
														"{{project-key}}",
														"carts"
													],
													"query": [
														{
															"key": "expand",
															"value": "",
															"disabled": true
														}
													]
												},
												"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
											},
											"response": []
										},
										{
											"name": "Update Cart: Change items",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var data = JSON.parse(responseBody);",
															"",
															"pm.test('Check status code', () => {",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
															"})",
															"",
															"pm.test(\"Discount has been removed from 'appliedDiscounts'\", function () {",
															"    pm.expect(data.custom.fields['eagleeye-appliedDiscounts'].some(discount => discount.includes('Meal Deal with Token'))).to.be.false;",
															"});",
															"",
															"pm.test(\"'Not Valid' Error is seen under 'eagleeye-errors'\", function () {",
															"    pm.expect(data.custom.fields['eagleeye-errors'].some(discount => discount.includes('Not Valid'))).to.be.true;",
															"});",
															"",
															"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
															"    pm.environment.set(\"cart-id\", data.results[0].id); ",
															"    pm.environment.set(\"cart-version\", data.results[0].version);",
															"}",
															"if(data.results && data.results[0] && data.results[0].key){",
															"    pm.environment.set(\"cart-key\", data.results[0].key); ",
															"}",
															"if(data.version){",
															"    pm.environment.set(\"cart-version\", data.version);",
															"}",
															"if(data.id){",
															"    pm.environment.set(\"cart-id\", data.id); ",
															"}",
															"if(data.key){",
															"    pm.environment.set(\"cart-key\", data.key);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "accessToken",
															"value": "{{ctp_access_token}}",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"value": "header",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "Bearer",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeLineItemQuantity\",\n            \"lineItemId\" : \"{{customMealDiscountTokenId}}\",\n            \"quantity\" : 0\n          }\n    ]\n}"
												},
												"url": {
													"raw": "{{host}}/{{project-key}}/carts/{{cart-id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"{{project-key}}",
														"carts",
														"{{cart-id}}"
													],
													"query": [
														{
															"key": "expand",
															"value": "",
															"disabled": true
														}
													]
												},
												"description": "post Carts"
											},
											"response": []
										},
										{
											"name": "Delete Cart",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
															"var data = JSON.parse(responseBody);",
															"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
															"    pm.environment.set(\"cart-id\", data.results[0].id); ",
															"    pm.environment.set(\"cart-version\", data.results[0].version);",
															"}",
															"if(data.results && data.results[0] && data.results[0].key){",
															"    pm.environment.set(\"cart-key\", data.results[0].key); ",
															"}",
															"if(data.version){",
															"    pm.environment.set(\"cart-version\", data.version);",
															"}",
															"if(data.id){",
															"    pm.environment.set(\"cart-id\", data.id); ",
															"}",
															"if(data.key){",
															"    pm.environment.set(\"cart-key\", data.key);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "accessToken",
															"value": "{{ctp_access_token}}",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"value": "header",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "Bearer",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{host}}/{{project-key}}/carts/{{cart-id}}?version={{cart-version}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"{{project-key}}",
														"carts",
														"{{cart-id}}"
													],
													"query": [
														{
															"key": "dataErasure",
															"value": "",
															"disabled": true
														},
														{
															"key": "expand",
															"value": "",
															"disabled": true
														},
														{
															"key": "version",
															"value": "{{cart-version}}"
														}
													]
												},
												"description": "null"
											},
											"response": []
										}
									],
									"description": "## Discount information\n\n- Campaignid: 1746967.\n    \n- Campaign name: Targeted Meal Deal with Token (UPCs: 245871, 245872, 245873)\n- Campaign type: Meal Deal.\n- Reward type: £1 off."
								},
								{
									"name": "Shipping Discount Code",
									"item": [
										{
											"name": "Create EE discount token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Load global pre-request script object",
															"var ee = eval(pm.globals.get('ees'));",
															"",
															"// Set up any environment variables",
															"ee.setUrl('wallet_url');",
															"",
															"// Call the global authentication function",
															"ee.auth();"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"tests[\"Status code is 201\"] = responseCode.code === 201;",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"pm.collectionVariables.set('shippingDiscountToken', jsonData.token);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-EES-AUTH-HASH",
														"value": "{{xAuthHash}}"
													},
													{
														"key": "X-EES-AUTH-CLIENT-ID",
														"value": "{{xAuthClientId}}"
													},
													{
														"key": "X-AUTH-HASH",
														"value": "{{xAuthHash}}"
													},
													{
														"key": "X-AUTH-CLIENT-ID",
														"value": "{{xAuthClientId}}"
													},
													{
														"key": "X-TRANSACTION-ID",
														"value": "{{xTransactionId}}"
													},
													{
														"key": "X-RETRY",
														"value": "1"
													},
													{
														"key": "X-EES-OPERATOR",
														"value": "1"
													},
													{
														"key": "X-EES-CALLER",
														"value": "DASHBOARD"
													},
													{
														"key": "X-EES-CALLER-VERSION",
														"value": "0"
													},
													{
														"key": "X-EES-MESSAGEID",
														"value": "03d476861afd384510f2cb80ccfa8511"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"resourceType\": \"CAMPAIGN\",\n    \"resourceId\": 1746956\n}"
												},
												"url": {
													"raw": "{{url}}/token/create",
													"host": [
														"{{url}}"
													],
													"path": [
														"token",
														"create"
													]
												}
											},
											"response": []
										},
										{
											"name": "Obtain access token",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"tests[\"Status code is 200\"] = responseCode.code === 200;",
															"var data = JSON.parse(responseBody);",
															"if(data.access_token){",
															"    pm.environment.set(\"ctp_access_token\", data.access_token);",
															"}",
															"if (data.scope) {",
															"    parts = data.scope.split(\" \");",
															"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
															"    if (parts.length > 0) {",
															"        scopeParts = parts[0];",
															"        pm.environment.set(\"project-key\", scopeParts[1]);",
															"        parts = parts.filter(scope => scope.length >= 3)",
															"        if (parts.length > 0) {",
															"            scopeParts = parts[0];",
															"            pm.environment.set(\"store-key\", scopeParts[2]);",
															"        }",
															"    }",
															"}"
														]
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{client_id}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{client_secret}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{auth_url}}/oauth/token?grant_type=client_credentials",
													"host": [
														"{{auth_url}}"
													],
													"path": [
														"oauth",
														"token"
													],
													"query": [
														{
															"key": "grant_type",
															"value": "client_credentials"
														}
													]
												},
												"description": "Use this request to obtain an access token for your commercetools platform project via Client Credentials Flow. As a prerequisite you must have filled out environment variables in Postman for projectKey, client_id and client_secret to use this."
											},
											"response": []
										},
										{
											"name": "Create Cart: Shipping discount code",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var data = JSON.parse(responseBody);",
															"",
															"pm.test('Check status code', () => {",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
															"})",
															"",
															"pm.test(\"Discount is added to 'appliedDiscounts'\", function () {",
															"    pm.expect(data.custom.fields['eagleeye-appliedDiscounts'].some(discount => discount.includes('Discount on Standard Shipping with Token'))).to.be.true;",
															"});",
															"",
															"//Related: 'taxedShippingPrice' is not showing up some times. Comercetools service desk ticket opened: SUPPORT-24310",
															"pm.test(\"Shipping discount is applied\", function () {",
															"    pm.expect(data.lineItems[0].totalPrice.centAmount).to.equal(6183)",
															"});",
															"",
															"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
															"    pm.environment.set(\"cart-id\", data.results[0].id); ",
															"    pm.environment.set(\"cart-version\", data.results[0].version);",
															"}",
															"if(data.results && data.results[0] && data.results[0].key){",
															"    pm.environment.set(\"cart-key\", data.results[0].key); ",
															"}",
															"if(data.version){",
															"    pm.environment.set(\"cart-version\", data.version);",
															"}",
															"if(data.id){",
															"    pm.environment.set(\"cart-id\", data.id); ",
															"}",
															"if(data.key){",
															"    pm.environment.set(\"cart-key\", data.key);",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "accessToken",
															"value": "{{ctp_access_token}}",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"value": "header",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "Bearer",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"currency\":\"GBP\",\n  \"customerEmail\": \"john.toe7@example.org\",\n   \"lineItems\":[\n      {\n         \"sku\":\"245872\",\n         \"quantity\":1\n      }\n   ],\n   \"custom\":{\n      \"type\":{\n         \"typeId\":\"type\",\n         \"key\":\"custom-cart-type\"\n      },\n      \"fields\":{\n         \"eagleeye-voucherCodes\":[\n            \"{{shippingDiscountToken}}\"\n         ]\n      }\n   },\n     \"shippingAddress\":{\n      \"country\":\"GB\"\n   },\n   \"shippingMethod\":{\n      \"typeId\":\"shipping-method\",\n      \"key\":\"standard-key\"\n   }\n}"
												},
												"url": {
													"raw": "{{host}}/{{project-key}}/carts",
													"host": [
														"{{host}}"
													],
													"path": [
														"{{project-key}}",
														"carts"
													],
													"query": [
														{
															"key": "expand",
															"value": "",
															"disabled": true
														}
													]
												},
												"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
											},
											"response": []
										},
										{
											"name": "Delete Cart",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
															"var data = JSON.parse(responseBody);",
															"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
															"    pm.environment.set(\"cart-id\", data.results[0].id); ",
															"    pm.environment.set(\"cart-version\", data.results[0].version);",
															"}",
															"if(data.results && data.results[0] && data.results[0].key){",
															"    pm.environment.set(\"cart-key\", data.results[0].key); ",
															"}",
															"if(data.version){",
															"    pm.environment.set(\"cart-version\", data.version);",
															"}",
															"if(data.id){",
															"    pm.environment.set(\"cart-id\", data.id); ",
															"}",
															"if(data.key){",
															"    pm.environment.set(\"cart-key\", data.key);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "accessToken",
															"value": "{{ctp_access_token}}",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"value": "header",
															"type": "string"
														},
														{
															"key": "tokenType",
															"value": "Bearer",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{host}}/{{project-key}}/carts/{{cart-id}}?version={{cart-version}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"{{project-key}}",
														"carts",
														"{{cart-id}}"
													],
													"query": [
														{
															"key": "dataErasure",
															"value": "",
															"disabled": true
														},
														{
															"key": "expand",
															"value": "",
															"disabled": true
														},
														{
															"key": "version",
															"value": "{{cart-version}}"
														}
													]
												},
												"description": "null"
											},
											"response": []
										}
									],
									"description": "## Discount information\n\n- Campaignid: 1746956.\n    \n- Campaign name: 20% Discount on Standard Shipping with Token (UPC: 245879) (unlocked).\n    \n- Campaign type: Discount Products.\n- Reward type: 20% off Shipping (UPC: 245879)."
								}
							]
						},
						{
							"name": "Invalid Codes",
							"item": [
								{
									"name": "Obtain access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"var data = JSON.parse(responseBody);",
													"if(data.access_token){",
													"    pm.environment.set(\"ctp_access_token\", data.access_token);",
													"}",
													"if (data.scope) {",
													"    parts = data.scope.split(\" \");",
													"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
													"    if (parts.length > 0) {",
													"        scopeParts = parts[0];",
													"        pm.environment.set(\"project-key\", scopeParts[1]);",
													"        parts = parts.filter(scope => scope.length >= 3)",
													"        if (parts.length > 0) {",
													"            scopeParts = parts[0];",
													"            pm.environment.set(\"store-key\", scopeParts[2]);",
													"        }",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{client_id}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{client_secret}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{auth_url}}/oauth/token?grant_type=client_credentials",
											"host": [
												"{{auth_url}}"
											],
											"path": [
												"oauth",
												"token"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "client_credentials"
												}
											]
										},
										"description": "Use this request to obtain an access token for your commercetools platform project via Client Credentials Flow. As a prerequisite you must have filled out environment variables in Postman for projectKey, client_id and client_secret to use this."
									},
									"response": []
								},
								{
									"name": "Create Cart: Invalid discount voucher",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = JSON.parse(responseBody);",
													"",
													"pm.test('Check status code', () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
													"})",
													"",
													"pm.test(\"No Token Discount is added to 'appliedDiscounts'\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-appliedDiscounts'].some(discount => discount.includes('Token'))).to.be.false;",
													"});",
													"",
													"pm.test(\"'Not Valid' Error is seen under 'eagleeye-errors'\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-errors'].some(discount => discount.includes('Voucher invalid'))).to.be.true;",
													"});",
													"",
													"// pm.collectionVariables.set('customItemDiscountTokenId', data.lineItems[0].id)",
													"",
													"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
													"    pm.environment.set(\"cart-id\", data.results[0].id); ",
													"    pm.environment.set(\"cart-version\", data.results[0].version);",
													"}",
													"if(data.results && data.results[0] && data.results[0].key){",
													"    pm.environment.set(\"cart-key\", data.results[0].key); ",
													"}",
													"if(data.version){",
													"    pm.environment.set(\"cart-version\", data.version);",
													"}",
													"if(data.id){",
													"    pm.environment.set(\"cart-id\", data.id); ",
													"}",
													"if(data.key){",
													"    pm.environment.set(\"cart-key\", data.key);",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//Generate a random 14 digit number and save it as 'invalidDiscountCode'",
													"",
													"var minLimit = 100000000000;",
													"var maxLimit = 99999999999999;",
													"",
													"var randomInt = Math.floor(Math.random() * (maxLimit - minLimit + 1)) + minLimit;",
													"pm.collectionVariables.set(\"invalidDiscountCode\", randomInt);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"currency\": \"GBP\",\n  \"customerEmail\": \"john.toe7@example.org\",\n  \"lineItems\": [\n    {\n      \"sku\": \"245885\",\n      \"quantity\": 1\n    },\n    {\n      \"sku\": \"245872\",\n      \"quantity\": 3\n    }\n  ],\n  \"custom\": {\n      \"type\": {\n          \"typeId\": \"type\",\n          \"key\": \"custom-cart-type\"\n      },\n      \"fields\": {\n          \"eagleeye-voucherCodes\": [\n              \"{{invalidDiscountCode}}\"\n          ]\n      }\n  }\n}"
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/carts",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"carts"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
									},
									"response": []
								},
								{
									"name": "Delete Cart",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
													"var data = JSON.parse(responseBody);",
													"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
													"    pm.environment.set(\"cart-id\", data.results[0].id); ",
													"    pm.environment.set(\"cart-version\", data.results[0].version);",
													"}",
													"if(data.results && data.results[0] && data.results[0].key){",
													"    pm.environment.set(\"cart-key\", data.results[0].key); ",
													"}",
													"if(data.version){",
													"    pm.environment.set(\"cart-version\", data.version);",
													"}",
													"if(data.id){",
													"    pm.environment.set(\"cart-id\", data.id); ",
													"}",
													"if(data.key){",
													"    pm.environment.set(\"cart-key\", data.key);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/carts/{{cart-id}}?version={{cart-version}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"carts",
												"{{cart-id}}"
											],
											"query": [
												{
													"key": "dataErasure",
													"value": "",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"disabled": true
												},
												{
													"key": "version",
													"value": "{{cart-version}}"
												}
											]
										},
										"description": "null"
									},
									"response": []
								}
							],
							"description": "To use invalid discount codes **(eagleeye-voucherCodes),** random 14 digit numbers are generated on the pre-request script of the corresponding request and then called from request body",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Potential Codes",
							"item": [
								{
									"name": "Create EE discount token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Load global pre-request script object",
													"var ee = eval(pm.globals.get('ees'));",
													"",
													"// Set up any environment variables",
													"ee.setUrl('wallet_url');",
													"",
													"// Call the global authentication function",
													"ee.auth();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"tests[\"Status code is 201\"] = responseCode.code === 201;",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"pm.collectionVariables.set('itemDiscountToken', jsonData.token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-EES-AUTH-HASH",
												"value": "{{xAuthHash}}"
											},
											{
												"key": "X-EES-AUTH-CLIENT-ID",
												"value": "{{xAuthClientId}}"
											},
											{
												"key": "X-AUTH-HASH",
												"value": "{{xAuthHash}}"
											},
											{
												"key": "X-AUTH-CLIENT-ID",
												"value": "{{xAuthClientId}}"
											},
											{
												"key": "X-TRANSACTION-ID",
												"value": "{{xTransactionId}}"
											},
											{
												"key": "X-RETRY",
												"value": "1"
											},
											{
												"key": "X-EES-OPERATOR",
												"value": "1"
											},
											{
												"key": "X-EES-CALLER",
												"value": "DASHBOARD"
											},
											{
												"key": "X-EES-CALLER-VERSION",
												"value": "0"
											},
											{
												"key": "X-EES-MESSAGEID",
												"value": "03d476861afd384510f2cb80ccfa8511"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"resourceType\": \"CAMPAIGN\",\n    \"resourceId\": 1744392\n}"
										},
										"url": {
											"raw": "{{url}}/token/create",
											"host": [
												"{{url}}"
											],
											"path": [
												"token",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "Obtain access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"var data = JSON.parse(responseBody);",
													"if(data.access_token){",
													"    pm.environment.set(\"ctp_access_token\", data.access_token);",
													"}",
													"if (data.scope) {",
													"    parts = data.scope.split(\" \");",
													"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
													"    if (parts.length > 0) {",
													"        scopeParts = parts[0];",
													"        pm.environment.set(\"project-key\", scopeParts[1]);",
													"        parts = parts.filter(scope => scope.length >= 3)",
													"        if (parts.length > 0) {",
													"            scopeParts = parts[0];",
													"            pm.environment.set(\"store-key\", scopeParts[2]);",
													"        }",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{client_id}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{client_secret}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{auth_url}}/oauth/token?grant_type=client_credentials",
											"host": [
												"{{auth_url}}"
											],
											"path": [
												"oauth",
												"token"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "client_credentials"
												}
											]
										},
										"description": "Use this request to obtain an access token for your commercetools platform project via Client Credentials Flow. As a prerequisite you must have filled out environment variables in Postman for projectKey, client_id and client_secret to use this."
									},
									"response": []
								},
								{
									"name": "Create Cart: Item level discount code",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = JSON.parse(responseBody);",
													"",
													"pm.test('Check status code', () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
													"})",
													"",
													"pm.test(\"Discount is added to 'appliedDiscounts'\", function () {",
													"    pm.expect(data.lineItems[0].custom.fields['eagleeye-appliedDiscounts'].some(discount => discount.includes('Discount With Token'))).to.be.true;",
													"});",
													"",
													"pm.collectionVariables.set('customItemDiscountTokenId', data.lineItems[0].id)",
													"",
													"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
													"    pm.environment.set(\"cart-id\", data.results[0].id); ",
													"    pm.environment.set(\"cart-version\", data.results[0].version);",
													"}",
													"if(data.results && data.results[0] && data.results[0].key){",
													"    pm.environment.set(\"cart-key\", data.results[0].key); ",
													"}",
													"if(data.version){",
													"    pm.environment.set(\"cart-version\", data.version);",
													"}",
													"if(data.id){",
													"    pm.environment.set(\"cart-id\", data.id); ",
													"}",
													"if(data.key){",
													"    pm.environment.set(\"cart-key\", data.key);",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"currency\": \"GBP\",\n  \"customerEmail\": \"john.toe7@example.org\",\n  \"lineItems\": [\n    {\n      \"sku\": \"245885\",\n      \"quantity\": 1\n    }\n  ],\n  \"custom\": {\n      \"type\": {\n          \"typeId\": \"type\",\n          \"key\": \"custom-cart-type\"\n      },\n      \"fields\": {\n          \"eagleeye-voucherCodes\": [\n              \"{{itemDiscountToken}}\"\n          ]\n      }\n  }\n}"
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/carts",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"carts"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
									},
									"response": []
								},
								{
									"name": "Update Cart: Remove applicable item",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = JSON.parse(responseBody);",
													"",
													"pm.test('Check status code', () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
													"})",
													"",
													"pm.test(\"Discount has been removed from 'appliedDiscounts'\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-appliedDiscounts'].some(discount => discount.includes('Discount With Token'))).to.be.false;",
													"});",
													"",
													"pm.test(\"'Not Valid' Error is seen under 'eagleeye-errors'\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-errors'].some(discount => discount.includes('Not Valid'))).to.be.true;",
													"});",
													"",
													"pm.test(\"Discount token is now stored under 'eagleeye-potentialVoucherCodes'\", function () {",
													"    var discountToken = pm.variables.get(\"itemDiscountToken\");",
													"    pm.expect(data.custom.fields['eagleeye-potentialVoucherCodes'][0]).to.equal(discountToken);",
													"});",
													"",
													"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
													"    pm.environment.set(\"cart-id\", data.results[0].id); ",
													"    pm.environment.set(\"cart-version\", data.results[0].version);",
													"}",
													"if(data.results && data.results[0] && data.results[0].key){",
													"    pm.environment.set(\"cart-key\", data.results[0].key); ",
													"}",
													"if(data.version){",
													"    pm.environment.set(\"cart-version\", data.version);",
													"}",
													"if(data.id){",
													"    pm.environment.set(\"cart-id\", data.id); ",
													"}",
													"if(data.key){",
													"    pm.environment.set(\"cart-key\", data.key);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"version\": {{cart-version}},\n    \"actions\": [\n        {\n            \"action\" : \"changeLineItemQuantity\",\n            \"lineItemId\" : \"{{customItemDiscountTokenId}}\",\n            \"quantity\" : 0\n          }\n    ]\n}"
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/carts/{{cart-id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"carts",
												"{{cart-id}}"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "post Carts"
									},
									"response": []
								},
								{
									"name": "Delete Cart",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
													"var data = JSON.parse(responseBody);",
													"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
													"    pm.environment.set(\"cart-id\", data.results[0].id); ",
													"    pm.environment.set(\"cart-version\", data.results[0].version);",
													"}",
													"if(data.results && data.results[0] && data.results[0].key){",
													"    pm.environment.set(\"cart-key\", data.results[0].key); ",
													"}",
													"if(data.version){",
													"    pm.environment.set(\"cart-version\", data.version);",
													"}",
													"if(data.id){",
													"    pm.environment.set(\"cart-id\", data.id); ",
													"}",
													"if(data.key){",
													"    pm.environment.set(\"cart-key\", data.key);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/carts/{{cart-id}}?version={{cart-version}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"carts",
												"{{cart-id}}"
											],
											"query": [
												{
													"key": "dataErasure",
													"value": "",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"disabled": true
												},
												{
													"key": "version",
													"value": "{{cart-version}}"
												}
											]
										},
										"description": "null"
									},
									"response": []
								}
							]
						}
					],
					"description": "Please refer to folder-level overviews for corresponding test information."
				},
				{
					"name": "Invalid Customer Identifier",
					"item": [
						{
							"name": "Obtain access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"var data = JSON.parse(responseBody);",
											"if(data.access_token){",
											"    pm.environment.set(\"ctp_access_token\", data.access_token);",
											"}",
											"if (data.scope) {",
											"    parts = data.scope.split(\" \");",
											"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
											"    if (parts.length > 0) {",
											"        scopeParts = parts[0];",
											"        pm.environment.set(\"project-key\", scopeParts[1]);",
											"        parts = parts.filter(scope => scope.length >= 3)",
											"        if (parts.length > 0) {",
											"            scopeParts = parts[0];",
											"            pm.environment.set(\"store-key\", scopeParts[2]);",
											"        }",
											"    }",
											"}"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{client_secret}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{auth_url}}/oauth/token?grant_type=client_credentials",
									"host": [
										"{{auth_url}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								},
								"description": "Use this request to obtain an access token for your commercetools platform project via Client Credentials Flow. As a prerequisite you must have filled out environment variables in Postman for projectKey, client_id and client_secret to use this."
							},
							"response": []
						},
						{
							"name": "Create Cart: Invalid Customer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"pm.test('Check status code', () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201])",
											"})",
											"",
											"pm.test(\"Applicable discounts are registered under 'appliedDiscounts'\", function () {",
											"    pm.expect(data.custom.fields['eagleeye-appliedDiscounts'].some(discount => discount.includes('Discount Basket'))).to.be.true;",
											"});",
											"",
											"pm.test(\"'Customer identity not found' error is triggered\", function () {",
											"    pm.expect(data.custom.fields['eagleeye-errors'].some(discount => discount.includes('EE_IDENTITY_NOT_FOUND'))).to.be.true;",
											"});",
											"",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"cart-id\", data.results[0].id); ",
											"    pm.environment.set(\"cart-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"cart-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"cart-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"cart-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"cart-key\", data.key);",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{ctp_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										},
										{
											"key": "tokenType",
											"value": "Bearer",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"currency\" : \"GBP\",\n  \"lineItems\": [\n      {\n          \"sku\": \"245871\",\n          \"quantity\": 1\n      },\n      {\n          \"sku\": \"245872\",\n          \"quantity\": 1\n      },\n      {\n          \"sku\": \"245873\",\n          \"quantity\": 1\n      }\n  ],\n  \"custom\": {\n      \"typeKey\": \"custom-cart-type\",\n      \"fields\": {\n          \"eagleeye-identityValue\":  \"unidentified@example.org\"\n      }\n     \n  }\n}"
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/carts",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"carts"
									],
									"query": [
										{
											"key": "expand",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
							},
							"response": []
						},
						{
							"name": "Delete Cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
											"var data = JSON.parse(responseBody);",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"cart-id\", data.results[0].id); ",
											"    pm.environment.set(\"cart-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"cart-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"cart-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"cart-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"cart-key\", data.key);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{ctp_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										},
										{
											"key": "tokenType",
											"value": "Bearer",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/carts/{{cart-id}}?version={{cart-version}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"carts",
										"{{cart-id}}"
									],
									"query": [
										{
											"key": "dataErasure",
											"value": "",
											"disabled": true
										},
										{
											"key": "version",
											"value": "{{cart-version}}"
										},
										{
											"key": "expand",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "null"
							},
							"response": []
						}
					],
					"description": "As a customer, if my identifier is not found in the AIR platform, I still want to get access to the open offers so that I get the rewards available to me."
				}
			],
			"description": "Promotion descriptions are added to the cart custom field `eagleeye-appliedDiscounts`"
		},
		{
			"name": "Loyalty",
			"item": [
				{
					"name": "Base Earn",
					"item": [
						{
							"name": "Create new wallet",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Load global pre-request script object",
											"var ee = eval(pm.globals.get('ees'));",
											"ee.setUrl('medusaUrl');",
											"",
											"// Set up any environment variables",
											"pm.environment.set('value', CryptoJS.lib.WordArray.random(128/8).toString());",
											"",
											"// Call the global authentication function",
											"ee.auth();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"pm.environment.set('walletId', jsonData.walletId);",
											"pm.environment.set('identityValue', jsonData.identities[0].value);",
											"pm.environment.set('accountId', jsonData.accounts.scheme.successful.results[0].accountId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-EES-AUTH-HASH",
										"value": "{{xAuthHash}}"
									},
									{
										"key": "X-EES-AUTH-CLIENT-ID",
										"value": "{{xAuthClientId}}"
									},
									{
										"key": "X-AUTH-HASH",
										"value": "{{xAuthHash}}"
									},
									{
										"key": "X-AUTH-CLIENT-ID",
										"value": "{{xAuthClientId}}"
									},
									{
										"key": "X-TRANSACTION-ID",
										"value": "{{xTransactionId}}"
									},
									{
										"key": "X-RETRY",
										"value": "1"
									},
									{
										"key": "X-EES-OPERATOR",
										"value": "1"
									},
									{
										"key": "X-EES-CALLER",
										"value": "POSTMAN"
									},
									{
										"key": "X-EES-CALLER-VERSION",
										"value": "0"
									},
									{
										"key": "X-EES-MESSAGEID",
										"value": "03d476861afd384510f2cb80ccfa8511"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"CONSUMER\",\n    \"identities\": [\n        {\n            \"type\": \"CUSTOMER_ID\",\n            \"value\": \"{{value}}\"\n        }\n    ],\n    \"accounts\": {\n        \"campaign\": [\n            {\n                \"campaignId\": \"1762318\"\n            }\n        ],\n        \"scheme\": [\n            {\n                \"status\": \"ACTIVE\",\n                \"schemeId\": \"{{schemeId}}\"\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "{{url}}/services/wallet/accounts",
									"host": [
										"{{url}}"
									],
									"path": [
										"services",
										"wallet",
										"accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtain access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"var data = JSON.parse(responseBody);",
											"if(data.access_token){",
											"    pm.environment.set(\"ctp_access_token\", data.access_token);",
											"}",
											"if (data.scope) {",
											"    parts = data.scope.split(\" \");",
											"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
											"    if (parts.length > 0) {",
											"        scopeParts = parts[0];",
											"        pm.environment.set(\"project-key\", scopeParts[1]);",
											"        parts = parts.filter(scope => scope.length >= 3)",
											"        if (parts.length > 0) {",
											"            scopeParts = parts[0];",
											"            pm.environment.set(\"store-key\", scopeParts[2]);",
											"        }",
											"    }",
											"}"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{client_secret}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{auth_url}}/oauth/token?grant_type=client_credentials",
									"host": [
										"{{auth_url}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								},
								"description": "Use this request to obtain an access token for your commercetools platform project via Client Credentials Flow. As a prerequisite you must have filled out environment variables in Postman for projectKey, client_id and client_secret to use this."
							},
							"response": []
						},
						{
							"name": "Create Cart: Discounts applied",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json();",
											"",
											"pm.test('Check status code', () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([",
											"        200,",
											"        201",
											"    ]);",
											"})",
											"",
											"pm.test(\"Corresponding Loyalty Earn Points Are Registered Under 'eagleeye-loyaltyEarnAndCredits'\", function () {",
											"    let totalPrice = data.totalPrice.centAmount",
											"    pm.expect(data.custom.fields['eagleeye-loyaltyEarnAndCredits']).to.include(`\"earn\":{\"basket\":{\"total\":${totalPrice}`);",
											"});",
											"",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"cart-id\", data.results[0].id); ",
											"    pm.environment.set(\"cart-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"cart-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"cart-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"cart-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"cart-key\", data.key);",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{ctp_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										},
										{
											"key": "tokenType",
											"value": "Bearer",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"currency\":\"GBP\",\n   \"lineItems\":[\n      {\n         \"sku\":\"245871\",\n         \"quantity\":12\n      }\n   ],\n   \"custom\":{\n      \"type\":{\n         \"typeId\":\"type\",\n         \"key\":\"custom-cart-type\"\n      },\n      \"fields\":{\n         \"eagleeye-identityValue\": \"{{identityValue}}\"\n      }\n   },\n   \"shippingAddress\":{\n      \"country\":\"GB\"\n   },\n   \"shippingMethod\":{\n      \"typeId\":\"shipping-method\",\n      \"key\":\"standard-key\"\n   }\n}\n"
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/carts",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"carts"
									],
									"query": [
										{
											"key": "expand",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
							},
							"response": []
						},
						{
							"name": "Create Order: Payment State: Paid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json();",
											"",
											"pm.test('Check status code', () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([",
											"        200,",
											"        201",
											"    ]);",
											"})",
											"",
											"setTimeout(() => {}, 5000)",
											"",
											"pm.test(\"Corresponding Loyalty Earn Points Are Registered Under 'eagleeye-loyaltyEarnAndCredits'\", function () {",
											"    let totalPrice = data.totalPrice.centAmount",
											"    pm.expect(data.custom.fields['eagleeye-loyaltyEarnAndCredits']).to.include(`\"earn\":{\"basket\":{\"total\":${totalPrice}`);",
											"});",
											"",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"order-id\", data.results[0].id); ",
											"    pm.environment.set(\"order-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"order-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"order-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"order-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"order-key\", data.key);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{ctp_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										},
										{
											"key": "tokenType",
											"value": "Bearer",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"version\": {{cart-version}},\n    \"cart\": {\n        \"typeId\": \"cart\",\n        \"id\": \"{{cart-id}}\"\n    },\n    \"paymentState\": \"Paid\"\n}"
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/orders",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"orders"
									],
									"query": [
										{
											"key": "expand",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
							},
							"response": []
						},
						{
							"name": "Get Order: Check 'Settled' Order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json();",
											"",
											"pm.test('Check status code', () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											"",
											"pm.test(\"Settled status is set to 'SETTLED'\", function () {",
											"    pm.expect(data.custom.fields['eagleeye-settledStatus']).to.equal('SETTLED');",
											"});",
											"",
											"pm.test(\"Corresponding Loyalty Earn Points Are Registered Under 'eagleeye-loyaltyEarnAndCredits'\", function () {",
											"    let totalPrice = data.totalPrice.centAmount",
											"    pm.expect(data.custom.fields['eagleeye-loyaltyEarnAndCredits']).to.include(`\"earn\":{\"basket\":{\"total\":${totalPrice}`);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{ctp_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										},
										{
											"key": "tokenType",
											"value": "Bearer",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/orders/{{order-id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"orders",
										"{{order-id}}"
									],
									"query": [
										{
											"key": "expand",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "null"
							},
							"response": []
						},
						{
							"name": "Get Order: Check Points Were Awarded To Customer",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Load global pre-request script object",
											"var ee = eval(pm.globals.get('ees'));",
											"ee.setUrl('medusaUrl');",
											"",
											"// Set up any environment variables",
											"pm.environment.set('value', CryptoJS.lib.WordArray.random(128/8).toString());",
											"",
											"// Call the global authentication function",
											"ee.auth();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json();",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"pm.test(\"Customer Points Are Available\", function () {",
											"    pm.expect(data.balances.current).to.be.greaterThan(0);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-EES-AUTH-HASH",
										"value": "{{xAuthHash}}"
									},
									{
										"key": "X-EES-AUTH-CLIENT-ID",
										"value": "{{xAuthClientId}}"
									},
									{
										"key": "X-AUTH-HASH",
										"value": "{{xAuthHash}}"
									},
									{
										"key": "X-AUTH-CLIENT-ID",
										"value": "{{xAuthClientId}}"
									},
									{
										"key": "X-TRANSACTION-ID",
										"value": "{{xTransactionId}}"
									},
									{
										"key": "X-RETRY",
										"value": "1"
									},
									{
										"key": "X-EES-OPERATOR",
										"value": "1"
									},
									{
										"key": "X-EES-CALLER",
										"value": "POSTMAN"
									},
									{
										"key": "X-EES-CALLER-VERSION",
										"value": "0"
									},
									{
										"key": "X-EES-MESSAGEID",
										"value": "03d476861afd384510f2cb80ccfa8511"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/wallet/{{walletId}}/account/{{accountId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"wallet",
										"{{walletId}}",
										"account",
										"{{accountId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Basket Level Coupon Credits",
					"item": [
						{
							"name": "Create new wallet",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Load global pre-request script object",
											"var ee = eval(pm.globals.get('ees'));",
											"ee.setUrl('medusaUrl');",
											"",
											"// Set up any environment variables",
											"pm.environment.set('value', CryptoJS.lib.WordArray.random(128/8).toString());",
											"",
											"// Call the global authentication function",
											"ee.auth();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"pm.environment.set('walletId', jsonData.walletId);",
											"pm.environment.set('identityValue', jsonData.identities[0].value);",
											"pm.environment.set('accountId', jsonData.accounts.scheme.successful.results[0].accountId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-EES-AUTH-HASH",
										"value": "{{xAuthHash}}"
									},
									{
										"key": "X-EES-AUTH-CLIENT-ID",
										"value": "{{xAuthClientId}}"
									},
									{
										"key": "X-AUTH-HASH",
										"value": "{{xAuthHash}}"
									},
									{
										"key": "X-AUTH-CLIENT-ID",
										"value": "{{xAuthClientId}}"
									},
									{
										"key": "X-TRANSACTION-ID",
										"value": "{{xTransactionId}}"
									},
									{
										"key": "X-RETRY",
										"value": "1"
									},
									{
										"key": "X-EES-OPERATOR",
										"value": "1"
									},
									{
										"key": "X-EES-CALLER",
										"value": "POSTMAN"
									},
									{
										"key": "X-EES-CALLER-VERSION",
										"value": "0"
									},
									{
										"key": "X-EES-MESSAGEID",
										"value": "03d476861afd384510f2cb80ccfa8511"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"CONSUMER\",\n    \"identities\": [\n        {\n            \"type\": \"CUSTOMER_ID\",\n            \"value\": \"{{value}}\"\n        }\n    ],\n    \"accounts\": {\n        \"campaign\": [\n            {\n                \"campaignId\": \"1762318\"\n            }\n        ],\n        \"scheme\": [\n            {\n                \"status\": \"ACTIVE\",\n                \"schemeId\": \"{{schemeId}}\"\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "{{url}}/services/wallet/accounts",
									"host": [
										"{{url}}"
									],
									"path": [
										"services",
										"wallet",
										"accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtain access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"var data = JSON.parse(responseBody);",
											"if(data.access_token){",
											"    pm.environment.set(\"ctp_access_token\", data.access_token);",
											"}",
											"if (data.scope) {",
											"    parts = data.scope.split(\" \");",
											"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
											"    if (parts.length > 0) {",
											"        scopeParts = parts[0];",
											"        pm.environment.set(\"project-key\", scopeParts[1]);",
											"        parts = parts.filter(scope => scope.length >= 3)",
											"        if (parts.length > 0) {",
											"            scopeParts = parts[0];",
											"            pm.environment.set(\"store-key\", scopeParts[2]);",
											"        }",
											"    }",
											"}"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{client_secret}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{auth_url}}/oauth/token?grant_type=client_credentials",
									"host": [
										"{{auth_url}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								},
								"description": "Use this request to obtain an access token for your commercetools platform project via Client Credentials Flow. As a prerequisite you must have filled out environment variables in Postman for projectKey, client_id and client_secret to use this."
							},
							"response": []
						},
						{
							"name": "Create Cart: Discounts applied",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json();",
											"",
											"pm.test('Check status code', () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([",
											"        200,",
											"        201",
											"    ]);",
											"})",
											"",
											"pm.test(\"Corresponding Loyalty Earn Points Are Registered Under 'eagleeye-loyaltyEarnAndCredits'\", function () {",
											"    let totalPrice = data.totalPrice.centAmount",
											"    pm.expect(data.custom.fields['eagleeye-loyaltyEarnAndCredits']).to.include(`\"earn\":{\"basket\":{\"total\":${totalPrice}`);",
											"});",
											"",
											"pm.test(\"Credit Points Are Registered Under 'eagleeye-loyaltyEarnAndCredits'\", function () {",
											"    pm.expect(data.custom.fields['eagleeye-loyaltyEarnAndCredits']).to.include('credit\\\":{\\\"basket\\\":{\\\"total\\\":9400,\\\"offers\\\":[{\\\"name\\\":\\\"100pts');",
											"});",
											"",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"cart-id\", data.results[0].id); ",
											"    pm.environment.set(\"cart-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"cart-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"cart-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"cart-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"cart-key\", data.key);",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{ctp_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										},
										{
											"key": "tokenType",
											"value": "Bearer",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"currency\": \"GBP\",\n   \"lineItems\": [\n      {\n         \"sku\": \"245882\",\n         \"quantity\": 6\n      }\n   ],\n   \"custom\": {\n      \"type\": {\n         \"typeId\": \"type\",\n         \"key\": \"custom-cart-type\"\n      },\n      \"fields\": {\n         \"eagleeye-identityValue\": \"{{identityValue}}\"\n      }\n   },\n   \"shippingAddress\": {\n      \"country\": \"GB\"\n   },\n   \"shippingMethod\": {\n      \"typeId\": \"shipping-method\",\n      \"key\": \"standard-key\"\n   }\n}"
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/carts",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"carts"
									],
									"query": [
										{
											"key": "expand",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
							},
							"response": []
						},
						{
							"name": "Create Order: Payment State: Paid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json();",
											"",
											"pm.test('Check status code', () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([",
											"        200,",
											"        201",
											"    ]);",
											"})",
											"",
											"setTimeout(() => {}, 5000)",
											"",
											"pm.test(\"Corresponding Loyalty Earn Points Are Registered Under 'eagleeye-loyaltyEarnAndCredits'\", function () {",
											"    let totalPrice = data.totalPrice.centAmount",
											"    pm.expect(data.custom.fields['eagleeye-loyaltyEarnAndCredits']).to.include(`\"earn\":{\"basket\":{\"total\":${totalPrice}`);",
											"});",
											"",
											"pm.test(\"Credit Points Are Registered Under 'eagleeye-loyaltyEarnAndCredits'\", function () {",
											"    pm.expect(data.custom.fields['eagleeye-loyaltyEarnAndCredits']).to.include('credit\\\":{\\\"basket\\\":{\\\"total\\\":9400,\\\"offers\\\":[{\\\"name\\\":\\\"100pts');",
											"});",
											"",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"order-id\", data.results[0].id); ",
											"    pm.environment.set(\"order-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"order-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"order-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"order-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"order-key\", data.key);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{ctp_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										},
										{
											"key": "tokenType",
											"value": "Bearer",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"version\": {{cart-version}},\n    \"cart\": {\n        \"typeId\": \"cart\",\n        \"id\": \"{{cart-id}}\"\n    },\n    \"paymentState\": \"Paid\"\n}"
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/orders",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"orders"
									],
									"query": [
										{
											"key": "expand",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
							},
							"response": []
						},
						{
							"name": "Get Order: Check 'Settled' Order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json();",
											"",
											"pm.test('Check status code', () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											"",
											"pm.test(\"Settled status is set to 'SETTLED'\", function () {",
											"    pm.expect(data.custom.fields['eagleeye-settledStatus']).to.equal('SETTLED');",
											"});",
											"",
											"pm.test(\"Corresponding Loyalty Earn Points Are Registered Under 'eagleeye-loyaltyEarnAndCredits'\", function () {",
											"    let totalPrice = data.totalPrice.centAmount",
											"    pm.expect(data.custom.fields['eagleeye-loyaltyEarnAndCredits']).to.include(`\"earn\":{\"basket\":{\"total\":${totalPrice}`);",
											"});",
											"",
											"pm.test(\"Credit Points Are Registered Under 'eagleeye-loyaltyEarnAndCredits'\", function () {",
											"    pm.expect(data.custom.fields['eagleeye-loyaltyEarnAndCredits']).to.include('credit\\\":{\\\"basket\\\":{\\\"total\\\":9400,\\\"offers\\\":[{\\\"name\\\":\\\"100pts');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{ctp_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										},
										{
											"key": "tokenType",
											"value": "Bearer",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/orders/{{order-id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"orders",
										"{{order-id}}"
									],
									"query": [
										{
											"key": "expand",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "null"
							},
							"response": []
						},
						{
							"name": "Get Order: Check Points Were Awarded To Customer",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Load global pre-request script object",
											"var ee = eval(pm.globals.get('ees'));",
											"ee.setUrl('medusaUrl');",
											"",
											"// Set up any environment variables",
											"pm.environment.set('value', CryptoJS.lib.WordArray.random(128/8).toString());",
											"",
											"// Call the global authentication function",
											"ee.auth();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json();",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"pm.test(\"Customer Points Are Available\", function () {",
											"    pm.expect(data.balances.current).to.be.greaterThan(0);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-EES-AUTH-HASH",
										"value": "{{xAuthHash}}"
									},
									{
										"key": "X-EES-AUTH-CLIENT-ID",
										"value": "{{xAuthClientId}}"
									},
									{
										"key": "X-AUTH-HASH",
										"value": "{{xAuthHash}}"
									},
									{
										"key": "X-AUTH-CLIENT-ID",
										"value": "{{xAuthClientId}}"
									},
									{
										"key": "X-TRANSACTION-ID",
										"value": "{{xTransactionId}}"
									},
									{
										"key": "X-RETRY",
										"value": "1"
									},
									{
										"key": "X-EES-OPERATOR",
										"value": "1"
									},
									{
										"key": "X-EES-CALLER",
										"value": "POSTMAN"
									},
									{
										"key": "X-EES-CALLER-VERSION",
										"value": "0"
									},
									{
										"key": "X-EES-MESSAGEID",
										"value": "03d476861afd384510f2cb80ccfa8511"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/wallet/{{walletId}}/account/{{accountId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"wallet",
										"{{walletId}}",
										"account",
										"{{accountId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Item Level Offers",
					"item": [
						{
							"name": "Create new wallet",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Load global pre-request script object",
											"var ee = eval(pm.globals.get('ees'));",
											"ee.setUrl('medusaUrl');",
											"",
											"// Set up any environment variables",
											"pm.environment.set('value', CryptoJS.lib.WordArray.random(128/8).toString());",
											"",
											"// Call the global authentication function",
											"ee.auth();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"pm.environment.set('walletId', jsonData.walletId);",
											"pm.environment.set('identityValue', jsonData.identities[0].value);",
											"pm.environment.set('accountId', jsonData.accounts.scheme.successful.results[0].accountId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-EES-AUTH-HASH",
										"value": "{{xAuthHash}}"
									},
									{
										"key": "X-EES-AUTH-CLIENT-ID",
										"value": "{{xAuthClientId}}"
									},
									{
										"key": "X-AUTH-HASH",
										"value": "{{xAuthHash}}"
									},
									{
										"key": "X-AUTH-CLIENT-ID",
										"value": "{{xAuthClientId}}"
									},
									{
										"key": "X-TRANSACTION-ID",
										"value": "{{xTransactionId}}"
									},
									{
										"key": "X-RETRY",
										"value": "1"
									},
									{
										"key": "X-EES-OPERATOR",
										"value": "1"
									},
									{
										"key": "X-EES-CALLER",
										"value": "POSTMAN"
									},
									{
										"key": "X-EES-CALLER-VERSION",
										"value": "0"
									},
									{
										"key": "X-EES-MESSAGEID",
										"value": "03d476861afd384510f2cb80ccfa8511"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"CONSUMER\",\n    \"identities\": [\n        {\n            \"type\": \"CUSTOMER_ID\",\n            \"value\": \"{{value}}\"\n        }\n    ],\n    \"accounts\": {\n        \"campaign\": [\n            {\n                \"campaignId\": \"1762357\"\n            }\n        ],\n        \"scheme\": [\n            {\n                \"status\": \"ACTIVE\",\n                \"schemeId\": \"{{schemeId}}\"\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "{{url}}/services/wallet/accounts",
									"host": [
										"{{url}}"
									],
									"path": [
										"services",
										"wallet",
										"accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtain access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"var data = JSON.parse(responseBody);",
											"if(data.access_token){",
											"    pm.environment.set(\"ctp_access_token\", data.access_token);",
											"}",
											"if (data.scope) {",
											"    parts = data.scope.split(\" \");",
											"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
											"    if (parts.length > 0) {",
											"        scopeParts = parts[0];",
											"        pm.environment.set(\"project-key\", scopeParts[1]);",
											"        parts = parts.filter(scope => scope.length >= 3)",
											"        if (parts.length > 0) {",
											"            scopeParts = parts[0];",
											"            pm.environment.set(\"store-key\", scopeParts[2]);",
											"        }",
											"    }",
											"}"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{client_secret}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{auth_url}}/oauth/token?grant_type=client_credentials",
									"host": [
										"{{auth_url}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								},
								"description": "Use this request to obtain an access token for your commercetools platform project via Client Credentials Flow. As a prerequisite you must have filled out environment variables in Postman for projectKey, client_id and client_secret to use this."
							},
							"response": []
						},
						{
							"name": "Create Cart: Discounts applied",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json();",
											"",
											"pm.test('Check status code', () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([",
											"        200,",
											"        201",
											"    ]);",
											"})",
											"",
											"pm.test(\"Total Points And Offer Are Registered Under Line Item's 'eagleeye-loyaltyCredits' property\", function () {",
											"    pm.expect(data.lineItems[0].custom.fields['eagleeye-loyaltyCredits']).to.include('total\\\":1000,\\\"offers\\\":[{\\\"name\\\":\\\"1000 points');",
											"});",
											"",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"cart-id\", data.results[0].id); ",
											"    pm.environment.set(\"cart-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"cart-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"cart-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"cart-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"cart-key\", data.key);",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{ctp_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										},
										{
											"key": "tokenType",
											"value": "Bearer",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"currency\": \"GBP\",\n   \"lineItems\": [\n      {\n         \"sku\": \"245872\",\n         \"quantity\": 6\n      }\n   ],\n   \"custom\": {\n      \"type\": {\n         \"typeId\": \"type\",\n         \"key\": \"custom-cart-type\"\n      },\n      \"fields\": {\n         \"eagleeye-identityValue\": \"{{identityValue}}\"\n      }\n   },\n   \"shippingAddress\": {\n      \"country\": \"GB\"\n   },\n   \"shippingMethod\": {\n      \"typeId\": \"shipping-method\",\n      \"key\": \"standard-key\"\n   }\n}"
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/carts",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"carts"
									],
									"query": [
										{
											"key": "expand",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
							},
							"response": []
						},
						{
							"name": "Create Order: Payment State: Paid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json();",
											"",
											"pm.test('Check status code', () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([",
											"        200,",
											"        201",
											"    ]);",
											"})",
											"",
											"setTimeout(() => {}, 5000)",
											"",
											"pm.test(\"Total Points And Offer Are Registered Under Line Item's 'eagleeye-loyaltyCredits' property\", function () {",
											"    pm.expect(data.lineItems[0].custom.fields['eagleeye-loyaltyCredits']).to.include('total\\\":1000,\\\"offers\\\":[{\\\"name\\\":\\\"1000 points');",
											"});",
											"",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"order-id\", data.results[0].id); ",
											"    pm.environment.set(\"order-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"order-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"order-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"order-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"order-key\", data.key);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{ctp_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										},
										{
											"key": "tokenType",
											"value": "Bearer",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"version\": {{cart-version}},\n    \"cart\": {\n        \"typeId\": \"cart\",\n        \"id\": \"{{cart-id}}\"\n    },\n    \"paymentState\": \"Paid\"\n}"
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/orders",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"orders"
									],
									"query": [
										{
											"key": "expand",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
							},
							"response": []
						},
						{
							"name": "Get Order: Check Points Were Awarded To Customer",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Load global pre-request script object",
											"var ee = eval(pm.globals.get('ees'));",
											"ee.setUrl('medusaUrl');",
											"",
											"// Set up any environment variables",
											"pm.environment.set('value', CryptoJS.lib.WordArray.random(128/8).toString());",
											"",
											"// Call the global authentication function",
											"ee.auth();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json();",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"pm.test(\"Customer Points Are Available\", function () {",
											"    pm.expect(data.balances.current).to.be.greaterThan(0);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-EES-AUTH-HASH",
										"value": "{{xAuthHash}}"
									},
									{
										"key": "X-EES-AUTH-CLIENT-ID",
										"value": "{{xAuthClientId}}"
									},
									{
										"key": "X-AUTH-HASH",
										"value": "{{xAuthHash}}"
									},
									{
										"key": "X-AUTH-CLIENT-ID",
										"value": "{{xAuthClientId}}"
									},
									{
										"key": "X-TRANSACTION-ID",
										"value": "{{xTransactionId}}"
									},
									{
										"key": "X-RETRY",
										"value": "1"
									},
									{
										"key": "X-EES-OPERATOR",
										"value": "1"
									},
									{
										"key": "X-EES-CALLER",
										"value": "POSTMAN"
									},
									{
										"key": "X-EES-CALLER-VERSION",
										"value": "0"
									},
									{
										"key": "X-EES-MESSAGEID",
										"value": "03d476861afd384510f2cb80ccfa8511"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/wallet/{{walletId}}/account/{{accountId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"wallet",
										"{{walletId}}",
										"account",
										"{{accountId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Invalid Identity",
					"item": [
						{
							"name": "Obtain access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"var data = JSON.parse(responseBody);",
											"if(data.access_token){",
											"    pm.environment.set(\"ctp_access_token\", data.access_token);",
											"}",
											"if (data.scope) {",
											"    parts = data.scope.split(\" \");",
											"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
											"    if (parts.length > 0) {",
											"        scopeParts = parts[0];",
											"        pm.environment.set(\"project-key\", scopeParts[1]);",
											"        parts = parts.filter(scope => scope.length >= 3)",
											"        if (parts.length > 0) {",
											"            scopeParts = parts[0];",
											"            pm.environment.set(\"store-key\", scopeParts[2]);",
											"        }",
											"    }",
											"}"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{client_secret}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{auth_url}}/oauth/token?grant_type=client_credentials",
									"host": [
										"{{auth_url}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								},
								"description": "Use this request to obtain an access token for your commercetools platform project via Client Credentials Flow. As a prerequisite you must have filled out environment variables in Postman for projectKey, client_id and client_secret to use this."
							},
							"response": []
						},
						{
							"name": "Create Cart: Discounts applied",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json();",
											"",
											"pm.test('Check status code', () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([",
											"        200,",
											"        201",
											"    ]);",
											"})",
											"",
											"pm.test(\"0 Loyalty Earn Points Are Registered Under 'eagleeye-loyaltyEarnAndCredits'\", function () {",
											"    pm.expect(data.custom.fields['eagleeye-loyaltyEarnAndCredits']).to.include(`earn\":{\"basket\":{\"total\":0`);",
											"});",
											"",
											"pm.test(\"0 Loyalty Credit Points Are Registered Under 'eagleeye-loyaltyEarnAndCredits'\", function () {",
											"    pm.expect(data.custom.fields['eagleeye-loyaltyEarnAndCredits']).to.include(`credit\\\":{\\\"basket\\\":{\\\"total\\\":0`);",
											"});",
											"",
											"pm.test(\"'Customer identity not found' error is triggered\", function () {",
											"    pm.expect(data.custom.fields['eagleeye-errors'].some(discount => discount.includes('EE_IDENTITY_NOT_FOUND'))).to.be.true;",
											"});",
											"",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"cart-id\", data.results[0].id); ",
											"    pm.environment.set(\"cart-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"cart-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"cart-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"cart-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"cart-key\", data.key);",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{ctp_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										},
										{
											"key": "tokenType",
											"value": "Bearer",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"currency\":\"GBP\",\n   \"lineItems\":[\n      {\n         \"sku\":\"245871\",\n         \"quantity\":12\n      }\n   ],\n   \"custom\":{\n      \"type\":{\n         \"typeId\":\"type\",\n         \"key\":\"custom-cart-type\"\n      },\n      \"fields\":{\n         \"eagleeye-identityValue\": \"invalid_identity@example.org\"\n      }\n   },\n   \"shippingAddress\":{\n      \"country\":\"GB\"\n   },\n   \"shippingMethod\":{\n      \"typeId\":\"shipping-method\",\n      \"key\":\"standard-key\"\n   }\n}\n"
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/carts",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"carts"
									],
									"query": [
										{
											"key": "expand",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
							},
							"response": []
						},
						{
							"name": "Create Order: Payment State: Paid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json();",
											"",
											"pm.test('Check status code', () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([",
											"        200,",
											"        201",
											"    ]);",
											"})",
											"",
											"setTimeout(() => {}, 5000)",
											"",
											"pm.test(\"0 Loyalty Earn Points Are Registered Under 'eagleeye-loyaltyEarnAndCredits'\", function () {",
											"    pm.expect(data.custom.fields['eagleeye-loyaltyEarnAndCredits']).to.include(`earn\":{\"basket\":{\"total\":0`);",
											"});",
											"",
											"pm.test(\"0 Loyalty Credit Points Are Registered Under 'eagleeye-loyaltyEarnAndCredits'\", function () {",
											"    pm.expect(data.custom.fields['eagleeye-loyaltyEarnAndCredits']).to.include(`credit\\\":{\\\"basket\\\":{\\\"total\\\":0`);",
											"});",
											"",
											"pm.test(\"'Customer identity not found' error is triggered\", function () {",
											"    pm.expect(data.custom.fields['eagleeye-errors'].some(discount => discount.includes('EE_IDENTITY_NOT_FOUND'))).to.be.true;",
											"});",
											"",
											"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
											"    pm.environment.set(\"order-id\", data.results[0].id); ",
											"    pm.environment.set(\"order-version\", data.results[0].version);",
											"}",
											"if(data.results && data.results[0] && data.results[0].key){",
											"    pm.environment.set(\"order-key\", data.results[0].key); ",
											"}",
											"if(data.version){",
											"    pm.environment.set(\"order-version\", data.version);",
											"}",
											"if(data.id){",
											"    pm.environment.set(\"order-id\", data.id); ",
											"}",
											"if(data.key){",
											"    pm.environment.set(\"order-key\", data.key);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{ctp_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										},
										{
											"key": "tokenType",
											"value": "Bearer",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"version\": {{cart-version}},\n    \"cart\": {\n        \"typeId\": \"cart\",\n        \"id\": \"{{cart-id}}\"\n    },\n    \"paymentState\": \"Paid\"\n}"
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/orders",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"orders"
									],
									"query": [
										{
											"key": "expand",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
							},
							"response": []
						},
						{
							"name": "Get Order: Check 'Settled' Order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json();",
											"",
											"pm.test('Check status code', () => {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											"",
											"pm.test(\"Settled status is set to 'SETTLED'\", function () {",
											"    pm.expect(data.custom.fields['eagleeye-settledStatus']).to.equal('SETTLED');",
											"});",
											"",
											"pm.test(\"0 Loyalty Earn Points Are Registered Under 'eagleeye-loyaltyEarnAndCredits'\", function () {",
											"    pm.expect(data.custom.fields['eagleeye-loyaltyEarnAndCredits']).to.include(`earn\":{\"basket\":{\"total\":0`);",
											"});",
											"",
											"pm.test(\"0 Loyalty Credit Points Are Registered Under 'eagleeye-loyaltyEarnAndCredits'\", function () {",
											"    pm.expect(data.custom.fields['eagleeye-loyaltyEarnAndCredits']).to.include(`credit\\\":{\\\"basket\\\":{\\\"total\\\":0`);",
											"});",
											"",
											"pm.test(\"'Customer identity not found' error is triggered\", function () {",
											"    pm.expect(data.custom.fields['eagleeye-errors'].some(discount => discount.includes('EE_IDENTITY_NOT_FOUND'))).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{ctp_access_token}}",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										},
										{
											"key": "tokenType",
											"value": "Bearer",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{host}}/{{project-key}}/orders/{{order-id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{project-key}}",
										"orders",
										"{{order-id}}"
									],
									"query": [
										{
											"key": "expand",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "null"
							},
							"response": []
						}
					]
				},
				{
					"name": "Continuity",
					"item": [
						{
							"name": "Separate Transactions",
							"item": [
								{
									"name": "Create new wallet",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Load global pre-request script object",
													"var ee = eval(pm.globals.get('ees'));",
													"ee.setUrl('medusaUrl');",
													"",
													"// Set up any environment variables",
													"pm.environment.set('value', CryptoJS.lib.WordArray.random(128/8).toString());",
													"",
													"// Call the global authentication function",
													"ee.auth();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"tests[\"Status code is 201\"] = responseCode.code === 201;",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"pm.environment.set('walletId', jsonData.walletId);",
													"pm.environment.set('identityValue', jsonData.identities[0].value);",
													"pm.environment.set('accountId', jsonData.accounts.scheme.successful.results[0].accountId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-EES-AUTH-HASH",
												"value": "{{xAuthHash}}"
											},
											{
												"key": "X-EES-AUTH-CLIENT-ID",
												"value": "{{xAuthClientId}}"
											},
											{
												"key": "X-AUTH-HASH",
												"value": "{{xAuthHash}}"
											},
											{
												"key": "X-AUTH-CLIENT-ID",
												"value": "{{xAuthClientId}}"
											},
											{
												"key": "X-TRANSACTION-ID",
												"value": "{{xTransactionId}}"
											},
											{
												"key": "X-RETRY",
												"value": "1"
											},
											{
												"key": "X-EES-OPERATOR",
												"value": "1"
											},
											{
												"key": "X-EES-CALLER",
												"value": "POSTMAN"
											},
											{
												"key": "X-EES-CALLER-VERSION",
												"value": "0"
											},
											{
												"key": "X-EES-MESSAGEID",
												"value": "03d476861afd384510f2cb80ccfa8511"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\": \"CONSUMER\",\n    \"identities\": [\n        {\n            \"type\": \"CUSTOMER_ID\",\n            \"value\": \"{{value}}\"\n        }\n    ],\n    \"accounts\": {\n        \"campaign\": [\n            {\n                \"campaignId\": \"1801571\"\n            },\n            {\n                \"campaignId\": \"1801512\"\n            },\n            {\n                \"campaignId\": \"1801469\"\n            }\n        ],\n        \"scheme\": [\n            {\n                \"status\": \"ACTIVE\",\n                \"schemeId\": \"{{schemeId}}\"\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "{{url}}/services/wallet/accounts",
											"host": [
												"{{url}}"
											],
											"path": [
												"services",
												"wallet",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Obtain access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"var data = JSON.parse(responseBody);",
													"if(data.access_token){",
													"    pm.environment.set(\"ctp_access_token\", data.access_token);",
													"}",
													"if (data.scope) {",
													"    parts = data.scope.split(\" \");",
													"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
													"    if (parts.length > 0) {",
													"        scopeParts = parts[0];",
													"        pm.environment.set(\"project-key\", scopeParts[1]);",
													"        parts = parts.filter(scope => scope.length >= 3)",
													"        if (parts.length > 0) {",
													"            scopeParts = parts[0];",
													"            pm.environment.set(\"store-key\", scopeParts[2]);",
													"        }",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{client_id}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{client_secret}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{auth_url}}/oauth/token?grant_type=client_credentials",
											"host": [
												"{{auth_url}}"
											],
											"path": [
												"oauth",
												"token"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "client_credentials"
												}
											]
										},
										"description": "Use this request to obtain an access token for your commercetools platform project via Client Credentials Flow. As a prerequisite you must have filled out environment variables in Postman for projectKey, client_id and client_secret to use this."
									},
									"response": []
								},
								{
									"name": "Create Cart: Partial requirements met",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = pm.response.json();",
													"",
													"pm.test('Check status code', () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([",
													"        200,",
													"        201",
													"    ]);",
													"})",
													"",
													"pm.test(\"When Campaign Requirements Are Partially Met, 'IN PROGRESS' Label Is Displayed Under 'eagleeye-loyaltyCredits'\", function () {",
													"    pm.expect(data.lineItems[0].custom.fields['eagleeye-loyaltyCredits']).to.include('IN_PROGRESS');",
													"});",
													"",
													"pm.test(\"0 Total Points And Offer Are Registered Under Line Item's 'eagleeye-loyaltyCredits' property\", function () {",
													"    pm.expect(data.lineItems[0].custom.fields['eagleeye-loyaltyCredits']).to.include('total\\\":0,\\\"offers\\\":[{\\\"name\\\":\\\"500 points');",
													"});",
													"",
													"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
													"    pm.environment.set(\"cart-id\", data.results[0].id); ",
													"    pm.environment.set(\"cart-version\", data.results[0].version);",
													"}",
													"if(data.results && data.results[0] && data.results[0].key){",
													"    pm.environment.set(\"cart-key\", data.results[0].key); ",
													"}",
													"if(data.version){",
													"    pm.environment.set(\"cart-version\", data.version);",
													"}",
													"if(data.id){",
													"    pm.environment.set(\"cart-id\", data.id); ",
													"}",
													"if(data.key){",
													"    pm.environment.set(\"cart-key\", data.key);",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"currency\": \"GBP\",\n   \"lineItems\": [\n      {\n         \"sku\": \"245896\",\n         \"quantity\": 1\n      }\n   ],\n   \"shippingAddress\": {\n      \"key\": \"abc-123\",\n      \"country\": \"GB\"\n   },\n   \"custom\": {\n      \"type\": {\n         \"typeId\": \"type\",\n         \"key\": \"custom-cart-type\"\n      },\n      \"fields\": {\n         \"eagleeye-identityValue\": \"{{identityValue}}\"\n      }\n   }\n}"
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/carts",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"carts"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
									},
									"response": []
								},
								{
									"name": "Create Order: Payment State: Paid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = pm.response.json();",
													"",
													"pm.test('Check status code', () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([",
													"        200,",
													"        201",
													"    ]);",
													"})",
													"",
													"setTimeout(() => {}, 5000)",
													"",
													"pm.test(\"When Campaign Requirements Are Partially Met, 'IN PROGRESS' Label Is Displayed Under 'eagleeye-loyaltyCredits'\", function () {",
													"    pm.expect(data.lineItems[0].custom.fields['eagleeye-loyaltyCredits']).to.include('IN_PROGRESS');",
													"});",
													"",
													"pm.test(\"0 Total Points And Offer Are Registered Under Line Item's 'eagleeye-loyaltyCredits' property\", function () {",
													"    pm.expect(data.lineItems[0].custom.fields['eagleeye-loyaltyCredits']).to.include('total\\\":0,\\\"offers\\\":[{\\\"name\\\":\\\"500 points');",
													"});",
													"",
													"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
													"    pm.environment.set(\"order-id\", data.results[0].id); ",
													"    pm.environment.set(\"order-version\", data.results[0].version);",
													"}",
													"if(data.results && data.results[0] && data.results[0].key){",
													"    pm.environment.set(\"order-key\", data.results[0].key); ",
													"}",
													"if(data.version){",
													"    pm.environment.set(\"order-version\", data.version);",
													"}",
													"if(data.id){",
													"    pm.environment.set(\"order-id\", data.id); ",
													"}",
													"if(data.key){",
													"    pm.environment.set(\"order-key\", data.key);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"version\": {{cart-version}},\n    \"cart\": {\n        \"typeId\": \"cart\",\n        \"id\": \"{{cart-id}}\"\n    },\n    \"paymentState\": \"Paid\"\n}"
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/orders",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"orders"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
									},
									"response": []
								},
								{
									"name": "Get Order: Check 'Settled' Order",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = pm.response.json();",
													"",
													"pm.test('Check status code', () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});",
													"",
													"pm.test(\"Settled status is set to 'SETTLED'\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-settledStatus']).to.equal('SETTLED');",
													"});",
													"",
													"pm.test(\"When Campaign Requirements Are Partially Met, 'IN PROGRESS' Label Is Displayed Under 'eagleeye-loyaltyCredits'\", function () {",
													"    pm.expect(data.lineItems[0].custom.fields['eagleeye-loyaltyCredits']).to.include('IN_PROGRESS');",
													"});",
													"",
													"pm.test(\"0 Total Points And Offer Are Registered Under Line Item's 'eagleeye-loyaltyCredits' property\", function () {",
													"    pm.expect(data.lineItems[0].custom.fields['eagleeye-loyaltyCredits']).to.include('total\\\":0,\\\"offers\\\":[{\\\"name\\\":\\\"500 points');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/orders/{{order-id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"orders",
												"{{order-id}}"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "null"
									},
									"response": []
								},
								{
									"name": "Create Cart: Complete continuity account",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = pm.response.json();",
													"",
													"pm.test('Check status code', () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([",
													"        200,",
													"        201",
													"    ]);",
													"})",
													"",
													"pm.test(\"When Campaign Requirements Are Fully Met, 'COMPLETING' Label Is Displayed Under 'eagleeye-loyaltyCredits'\", function () {",
													"    pm.expect(data.lineItems[0].custom.fields['eagleeye-loyaltyCredits']).to.include('COMPLETING');",
													"});",
													"",
													"pm.test(\"Total Points And Offer Are Registered Under Line Item's 'eagleeye-loyaltyCredits' property\", function () {",
													"    pm.expect(data.lineItems[0].custom.fields['eagleeye-loyaltyCredits']).to.include('total\\\":500,\\\"offers\\\":[{\\\"name\\\":\\\"500 points');",
													"});",
													"",
													"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
													"    pm.environment.set(\"cart-id\", data.results[0].id); ",
													"    pm.environment.set(\"cart-version\", data.results[0].version);",
													"}",
													"if(data.results && data.results[0] && data.results[0].key){",
													"    pm.environment.set(\"cart-key\", data.results[0].key); ",
													"}",
													"if(data.version){",
													"    pm.environment.set(\"cart-version\", data.version);",
													"}",
													"if(data.id){",
													"    pm.environment.set(\"cart-id\", data.id); ",
													"}",
													"if(data.key){",
													"    pm.environment.set(\"cart-key\", data.key);",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"currency\": \"GBP\",\n   \"lineItems\": [\n      {\n         \"sku\": \"245896\",\n         \"quantity\": 2\n      }\n   ],\n   \"shippingAddress\": {\n      \"key\": \"abc-123\",\n      \"country\": \"GB\"\n   },\n   \"custom\": {\n      \"type\": {\n         \"typeId\": \"type\",\n         \"key\": \"custom-cart-type\"\n      },\n      \"fields\": {\n         \"eagleeye-identityValue\": \"{{identityValue}}\"\n      }\n   }\n}"
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/carts",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"carts"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
									},
									"response": []
								},
								{
									"name": "Create Order: Payment State: Paid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = pm.response.json();",
													"",
													"pm.test('Check status code', () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([",
													"        200,",
													"        201",
													"    ]);",
													"})",
													"",
													"setTimeout(() => {}, 5000)",
													"",
													"pm.test(\"When Campaign Requirements Are Fully Met, 'COMPLETING' Label Is Displayed Under 'eagleeye-loyaltyCredits'\", function () {",
													"    pm.expect(data.lineItems[0].custom.fields['eagleeye-loyaltyCredits']).to.include('COMPLETING');",
													"});",
													"",
													"pm.test(\"Total Points And Offer Are Registered Under Line Item's 'eagleeye-loyaltyCredits' property\", function () {",
													"    pm.expect(data.lineItems[0].custom.fields['eagleeye-loyaltyCredits']).to.include('total\\\":500,\\\"offers\\\":[{\\\"name\\\":\\\"500 points');",
													"});",
													"",
													"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
													"    pm.environment.set(\"order-id\", data.results[0].id); ",
													"    pm.environment.set(\"order-version\", data.results[0].version);",
													"}",
													"if(data.results && data.results[0] && data.results[0].key){",
													"    pm.environment.set(\"order-key\", data.results[0].key); ",
													"}",
													"if(data.version){",
													"    pm.environment.set(\"order-version\", data.version);",
													"}",
													"if(data.id){",
													"    pm.environment.set(\"order-id\", data.id); ",
													"}",
													"if(data.key){",
													"    pm.environment.set(\"order-key\", data.key);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"version\": {{cart-version}},\n    \"cart\": {\n        \"typeId\": \"cart\",\n        \"id\": \"{{cart-id}}\"\n    },\n    \"paymentState\": \"Paid\"\n}"
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/orders",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"orders"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
									},
									"response": []
								},
								{
									"name": "Get Order: Check 'Settled' Order",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = pm.response.json();",
													"",
													"pm.test('Check status code', () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});",
													"",
													"pm.test(\"Settled status is set to 'SETTLED'\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-settledStatus']).to.equal('SETTLED');",
													"});",
													"",
													"pm.test(\"When Campaign Requirements Are Fully Met, 'COMPLETING' Label Is Displayed Under 'eagleeye-loyaltyCredits'\", function () {",
													"    pm.expect(data.lineItems[0].custom.fields['eagleeye-loyaltyCredits']).to.include('COMPLETING');",
													"});",
													"",
													"pm.test(\"Total Points And Offer Are Registered Under Line Item's 'eagleeye-loyaltyCredits' property\", function () {",
													"    pm.expect(data.lineItems[0].custom.fields['eagleeye-loyaltyCredits']).to.include('total\\\":500,\\\"offers\\\":[{\\\"name\\\":\\\"500 points');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/orders/{{order-id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"orders",
												"{{order-id}}"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "null"
									},
									"response": []
								},
								{
									"name": "Get Order: Check Points Were Awarded To Customer",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Load global pre-request script object",
													"var ee = eval(pm.globals.get('ees'));",
													"ee.setUrl('medusaUrl');",
													"",
													"// Set up any environment variables",
													"pm.environment.set('value', CryptoJS.lib.WordArray.random(128/8).toString());",
													"",
													"// Call the global authentication function",
													"ee.auth();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = pm.response.json();",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"pm.test(\"Customer Points Are Available\", function () {",
													"    pm.expect(data.balances.current).to.be.greaterThan(0);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-EES-AUTH-HASH",
												"value": "{{xAuthHash}}"
											},
											{
												"key": "X-EES-AUTH-CLIENT-ID",
												"value": "{{xAuthClientId}}"
											},
											{
												"key": "X-AUTH-HASH",
												"value": "{{xAuthHash}}"
											},
											{
												"key": "X-AUTH-CLIENT-ID",
												"value": "{{xAuthClientId}}"
											},
											{
												"key": "X-TRANSACTION-ID",
												"value": "{{xTransactionId}}"
											},
											{
												"key": "X-RETRY",
												"value": "1"
											},
											{
												"key": "X-EES-OPERATOR",
												"value": "1"
											},
											{
												"key": "X-EES-CALLER",
												"value": "POSTMAN"
											},
											{
												"key": "X-EES-CALLER-VERSION",
												"value": "0"
											},
											{
												"key": "X-EES-MESSAGEID",
												"value": "03d476861afd384510f2cb80ccfa8511"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{url}}/wallet/{{walletId}}/account/{{accountId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"wallet",
												"{{walletId}}",
												"account",
												"{{accountId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Single Transaction",
							"item": [
								{
									"name": "Create new wallet",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Load global pre-request script object",
													"var ee = eval(pm.globals.get('ees'));",
													"ee.setUrl('medusaUrl');",
													"",
													"// Set up any environment variables",
													"pm.environment.set('value', CryptoJS.lib.WordArray.random(128/8).toString());",
													"",
													"// Call the global authentication function",
													"ee.auth();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"tests[\"Status code is 201\"] = responseCode.code === 201;",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"pm.environment.set('walletId', jsonData.walletId);",
													"pm.environment.set('identityValue', jsonData.identities[0].value);",
													"pm.environment.set('accountId', jsonData.accounts.scheme.successful.results[0].accountId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-EES-AUTH-HASH",
												"value": "{{xAuthHash}}"
											},
											{
												"key": "X-EES-AUTH-CLIENT-ID",
												"value": "{{xAuthClientId}}"
											},
											{
												"key": "X-AUTH-HASH",
												"value": "{{xAuthHash}}"
											},
											{
												"key": "X-AUTH-CLIENT-ID",
												"value": "{{xAuthClientId}}"
											},
											{
												"key": "X-TRANSACTION-ID",
												"value": "{{xTransactionId}}"
											},
											{
												"key": "X-RETRY",
												"value": "1"
											},
											{
												"key": "X-EES-OPERATOR",
												"value": "1"
											},
											{
												"key": "X-EES-CALLER",
												"value": "POSTMAN"
											},
											{
												"key": "X-EES-CALLER-VERSION",
												"value": "0"
											},
											{
												"key": "X-EES-MESSAGEID",
												"value": "03d476861afd384510f2cb80ccfa8511"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\": \"CONSUMER\",\n    \"identities\": [\n        {\n            \"type\": \"CUSTOMER_ID\",\n            \"value\": \"{{value}}\"\n        }\n    ],\n    \"accounts\": {\n        \"campaign\": [\n            {\n                \"campaignId\": \"1801571\"\n            },\n            {\n                \"campaignId\": \"1801512\"\n            },\n            {\n                \"campaignId\": \"1801469\"\n            }\n        ],\n        \"scheme\": [\n            {\n                \"status\": \"ACTIVE\",\n                \"schemeId\": \"{{schemeId}}\"\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "{{url}}/services/wallet/accounts",
											"host": [
												"{{url}}"
											],
											"path": [
												"services",
												"wallet",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Obtain access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"var data = JSON.parse(responseBody);",
													"if(data.access_token){",
													"    pm.environment.set(\"ctp_access_token\", data.access_token);",
													"}",
													"if (data.scope) {",
													"    parts = data.scope.split(\" \");",
													"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
													"    if (parts.length > 0) {",
													"        scopeParts = parts[0];",
													"        pm.environment.set(\"project-key\", scopeParts[1]);",
													"        parts = parts.filter(scope => scope.length >= 3)",
													"        if (parts.length > 0) {",
													"            scopeParts = parts[0];",
													"            pm.environment.set(\"store-key\", scopeParts[2]);",
													"        }",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{client_id}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{client_secret}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{auth_url}}/oauth/token?grant_type=client_credentials",
											"host": [
												"{{auth_url}}"
											],
											"path": [
												"oauth",
												"token"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "client_credentials"
												}
											]
										},
										"description": "Use this request to obtain an access token for your commercetools platform project via Client Credentials Flow. As a prerequisite you must have filled out environment variables in Postman for projectKey, client_id and client_secret to use this."
									},
									"response": []
								},
								{
									"name": "Create Cart: Complete continuity account",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = pm.response.json();",
													"",
													"pm.test('Check status code', () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([",
													"        200,",
													"        201",
													"    ]);",
													"})",
													"",
													"pm.test(\"When Campaign Requirements Are Fully Met, 'COMPLETING' Label Is Displayed Under 'eagleeye-loyaltyCredits'\", function () {",
													"    pm.expect(data.lineItems[0].custom.fields['eagleeye-loyaltyCredits']).to.include('COMPLETING');",
													"});",
													"",
													"pm.test(\"Total Points And Offer Are Registered Under Line Item's 'eagleeye-loyaltyCredits' property\", function () {",
													"    pm.expect(data.lineItems[0].custom.fields['eagleeye-loyaltyCredits']).to.include('total\\\":500,\\\"offers\\\":[{\\\"name\\\":\\\"500 points');",
													"});",
													"",
													"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
													"    pm.environment.set(\"cart-id\", data.results[0].id); ",
													"    pm.environment.set(\"cart-version\", data.results[0].version);",
													"}",
													"if(data.results && data.results[0] && data.results[0].key){",
													"    pm.environment.set(\"cart-key\", data.results[0].key); ",
													"}",
													"if(data.version){",
													"    pm.environment.set(\"cart-version\", data.version);",
													"}",
													"if(data.id){",
													"    pm.environment.set(\"cart-id\", data.id); ",
													"}",
													"if(data.key){",
													"    pm.environment.set(\"cart-key\", data.key);",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"currency\": \"GBP\",\n   \"lineItems\": [\n      {\n         \"sku\": \"245896\",\n         \"quantity\": 3\n      }\n   ],\n   \"shippingAddress\": {\n      \"key\": \"abc-123\",\n      \"country\": \"GB\"\n   },\n   \"custom\": {\n      \"type\": {\n         \"typeId\": \"type\",\n         \"key\": \"custom-cart-type\"\n      },\n      \"fields\": {\n         \"eagleeye-identityValue\": \"{{identityValue}}\"\n      }\n   }\n}"
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/carts",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"carts"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
									},
									"response": []
								},
								{
									"name": "Create Order: Payment State: Paid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = pm.response.json();",
													"",
													"pm.test('Check status code', () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([",
													"        200,",
													"        201",
													"    ]);",
													"})",
													"",
													"setTimeout(() => {}, 5000)",
													"",
													"pm.test(\"When Campaign Requirements Are Fully Met, 'COMPLETING' Label Is Displayed Under 'eagleeye-loyaltyCredits'\", function () {",
													"    pm.expect(data.lineItems[0].custom.fields['eagleeye-loyaltyCredits']).to.include('COMPLETING');",
													"});",
													"",
													"pm.test(\"Total Points And Offer Are Registered Under Line Item's 'eagleeye-loyaltyCredits' property\", function () {",
													"    pm.expect(data.lineItems[0].custom.fields['eagleeye-loyaltyCredits']).to.include('total\\\":500,\\\"offers\\\":[{\\\"name\\\":\\\"500 points');",
													"});",
													"",
													"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
													"    pm.environment.set(\"order-id\", data.results[0].id); ",
													"    pm.environment.set(\"order-version\", data.results[0].version);",
													"}",
													"if(data.results && data.results[0] && data.results[0].key){",
													"    pm.environment.set(\"order-key\", data.results[0].key); ",
													"}",
													"if(data.version){",
													"    pm.environment.set(\"order-version\", data.version);",
													"}",
													"if(data.id){",
													"    pm.environment.set(\"order-id\", data.id); ",
													"}",
													"if(data.key){",
													"    pm.environment.set(\"order-key\", data.key);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"version\": {{cart-version}},\n    \"cart\": {\n        \"typeId\": \"cart\",\n        \"id\": \"{{cart-id}}\"\n    },\n    \"paymentState\": \"Paid\"\n}"
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/orders",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"orders"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
									},
									"response": []
								},
								{
									"name": "Get Order: Check 'Settled' Order",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = pm.response.json();",
													"",
													"pm.test('Check status code', () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});",
													"",
													"pm.test(\"Settled status is set to 'SETTLED'\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-settledStatus']).to.equal('SETTLED');",
													"});",
													"",
													"pm.test(\"When Campaign Requirements Are Fully Met, 'COMPLETING' Label Is Displayed Under 'eagleeye-loyaltyCredits'\", function () {",
													"    pm.expect(data.lineItems[0].custom.fields['eagleeye-loyaltyCredits']).to.include('COMPLETING');",
													"});",
													"",
													"pm.test(\"Total Points And Offer Are Registered Under Line Item's 'eagleeye-loyaltyCredits' property\", function () {",
													"    pm.expect(data.lineItems[0].custom.fields['eagleeye-loyaltyCredits']).to.include('total\\\":500,\\\"offers\\\":[{\\\"name\\\":\\\"500 points');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/orders/{{order-id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"orders",
												"{{order-id}}"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "null"
									},
									"response": []
								},
								{
									"name": "Get Order: Check Points Were Awarded To Customer",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Load global pre-request script object",
													"var ee = eval(pm.globals.get('ees'));",
													"ee.setUrl('medusaUrl');",
													"",
													"// Set up any environment variables",
													"pm.environment.set('value', CryptoJS.lib.WordArray.random(128/8).toString());",
													"",
													"// Call the global authentication function",
													"ee.auth();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = pm.response.json();",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"pm.test(\"Customer Points Are Available\", function () {",
													"    pm.expect(data.balances.current).to.be.greaterThan(0);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-EES-AUTH-HASH",
												"value": "{{xAuthHash}}"
											},
											{
												"key": "X-EES-AUTH-CLIENT-ID",
												"value": "{{xAuthClientId}}"
											},
											{
												"key": "X-AUTH-HASH",
												"value": "{{xAuthHash}}"
											},
											{
												"key": "X-AUTH-CLIENT-ID",
												"value": "{{xAuthClientId}}"
											},
											{
												"key": "X-TRANSACTION-ID",
												"value": "{{xTransactionId}}"
											},
											{
												"key": "X-RETRY",
												"value": "1"
											},
											{
												"key": "X-EES-OPERATOR",
												"value": "1"
											},
											{
												"key": "X-EES-CALLER",
												"value": "POSTMAN"
											},
											{
												"key": "X-EES-CALLER-VERSION",
												"value": "0"
											},
											{
												"key": "X-EES-MESSAGEID",
												"value": "03d476861afd384510f2cb80ccfa8511"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{url}}/wallet/{{walletId}}/account/{{accountId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"wallet",
												"{{walletId}}",
												"account",
												"{{accountId}}"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"description": "Both continuity and quest offers are points-based rewards with objectives that can be completed in separate transactions or in a single transaction."
				},
				{
					"name": "Quest",
					"item": [
						{
							"name": "Separate Transactions",
							"item": [
								{
									"name": "Create new wallet",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Load global pre-request script object",
													"var ee = eval(pm.globals.get('ees'));",
													"ee.setUrl('medusaUrl');",
													"",
													"// Set up any environment variables",
													"pm.environment.set('value', CryptoJS.lib.WordArray.random(128/8).toString());",
													"",
													"// Call the global authentication function",
													"ee.auth();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"tests[\"Status code is 201\"] = responseCode.code === 201;",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"pm.environment.set('walletId', jsonData.walletId);",
													"pm.environment.set('identityValue', jsonData.identities[0].value);",
													"pm.environment.set('accountId', jsonData.accounts.scheme.successful.results[0].accountId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-EES-AUTH-HASH",
												"value": "{{xAuthHash}}"
											},
											{
												"key": "X-EES-AUTH-CLIENT-ID",
												"value": "{{xAuthClientId}}"
											},
											{
												"key": "X-AUTH-HASH",
												"value": "{{xAuthHash}}"
											},
											{
												"key": "X-AUTH-CLIENT-ID",
												"value": "{{xAuthClientId}}"
											},
											{
												"key": "X-TRANSACTION-ID",
												"value": "{{xTransactionId}}"
											},
											{
												"key": "X-RETRY",
												"value": "1"
											},
											{
												"key": "X-EES-OPERATOR",
												"value": "1"
											},
											{
												"key": "X-EES-CALLER",
												"value": "POSTMAN"
											},
											{
												"key": "X-EES-CALLER-VERSION",
												"value": "0"
											},
											{
												"key": "X-EES-MESSAGEID",
												"value": "03d476861afd384510f2cb80ccfa8511"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\": \"CONSUMER\",\n    \"identities\": [\n        {\n            \"type\": \"CUSTOMER_ID\",\n            \"value\": \"{{value}}\"\n        }\n    ],\n    \"accounts\": {\n        \"campaign\": [\n            {\n                \"campaignId\": \"1762406\"\n            }\n        ],\n        \"scheme\": [\n            {\n                \"status\": \"ACTIVE\",\n                \"schemeId\": \"{{schemeId}}\"\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "{{url}}/services/wallet/accounts",
											"host": [
												"{{url}}"
											],
											"path": [
												"services",
												"wallet",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Obtain access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"var data = JSON.parse(responseBody);",
													"if(data.access_token){",
													"    pm.environment.set(\"ctp_access_token\", data.access_token);",
													"}",
													"if (data.scope) {",
													"    parts = data.scope.split(\" \");",
													"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
													"    if (parts.length > 0) {",
													"        scopeParts = parts[0];",
													"        pm.environment.set(\"project-key\", scopeParts[1]);",
													"        parts = parts.filter(scope => scope.length >= 3)",
													"        if (parts.length > 0) {",
													"            scopeParts = parts[0];",
													"            pm.environment.set(\"store-key\", scopeParts[2]);",
													"        }",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{client_id}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{client_secret}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{auth_url}}/oauth/token?grant_type=client_credentials",
											"host": [
												"{{auth_url}}"
											],
											"path": [
												"oauth",
												"token"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "client_credentials"
												}
											]
										},
										"description": "Use this request to obtain an access token for your commercetools platform project via Client Credentials Flow. As a prerequisite you must have filled out environment variables in Postman for projectKey, client_id and client_secret to use this."
									},
									"response": []
								},
								{
									"name": "Create Cart: Complete first objective",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = pm.response.json();",
													"",
													"pm.test('Check status code', () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([",
													"        200,",
													"        201",
													"    ]);",
													"})",
													"",
													"pm.test(\"'IN PROGRESS' Quest label visible under 'eagleeye-loyaltyEarnAndCredits' property\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-loyaltyEarnAndCredits']).to.include('IN_PROGRESS\\\",\\\"name\\\":\\\"Travel Quest');",
													"});",
													"",
													"pm.test(\"3 Total Objectives Are Registered Under 'eagleeye-loyaltyEarnAndCredits' property\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-loyaltyEarnAndCredits']).to.include('totalObjectives\\\":3');",
													"});",
													"",
													"pm.test(\"1 Total Objective Met Is Registered Under 'eagleeye-loyaltyEarnAndCredits' property\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-loyaltyEarnAndCredits']).to.include('totalObjectivesMet\\\":1');",
													"});",
													"",
													"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
													"    pm.environment.set(\"cart-id\", data.results[0].id); ",
													"    pm.environment.set(\"cart-version\", data.results[0].version);",
													"}",
													"if(data.results && data.results[0] && data.results[0].key){",
													"    pm.environment.set(\"cart-key\", data.results[0].key); ",
													"}",
													"if(data.version){",
													"    pm.environment.set(\"cart-version\", data.version);",
													"}",
													"if(data.id){",
													"    pm.environment.set(\"cart-id\", data.id); ",
													"}",
													"if(data.key){",
													"    pm.environment.set(\"cart-key\", data.key);",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"currency\": \"GBP\",\n   \"lineItems\": [\n      {\n         \"sku\": \"245903\",\n         \"quantity\": 1\n      }\n   ],\n   \"shippingAddress\": {\n      \"key\": \"abc-123\",\n      \"country\": \"GB\"\n   },\n   \"custom\": {\n      \"type\": {\n         \"typeId\": \"type\",\n         \"key\": \"custom-cart-type\"\n      },\n      \"fields\": {\n         \"eagleeye-identityValue\": \"{{identityValue}}\"\n      }\n   }\n}"
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/carts",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"carts"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
									},
									"response": []
								},
								{
									"name": "Create Order: Payment State: Paid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = pm.response.json();",
													"",
													"pm.test('Check status code', () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([",
													"        200,",
													"        201",
													"    ]);",
													"})",
													"",
													"setTimeout(() => {}, 5000)",
													"",
													"pm.test(\"'IN PROGRESS' Quest label visible under 'eagleeye-loyaltyEarnAndCredits' property\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-loyaltyEarnAndCredits']).to.include('IN_PROGRESS\\\",\\\"name\\\":\\\"Travel Quest');",
													"});",
													"",
													"pm.test(\"3 Total Objectives Are Registered Under 'eagleeye-loyaltyEarnAndCredits' property\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-loyaltyEarnAndCredits']).to.include('totalObjectives\\\":3');",
													"});",
													"",
													"pm.test(\"1 Total Objective Met Is Registered Under 'eagleeye-loyaltyEarnAndCredits' property\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-loyaltyEarnAndCredits']).to.include('totalObjectivesMet\\\":1');",
													"});",
													"",
													"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
													"    pm.environment.set(\"order-id\", data.results[0].id); ",
													"    pm.environment.set(\"order-version\", data.results[0].version);",
													"}",
													"if(data.results && data.results[0] && data.results[0].key){",
													"    pm.environment.set(\"order-key\", data.results[0].key); ",
													"}",
													"if(data.version){",
													"    pm.environment.set(\"order-version\", data.version);",
													"}",
													"if(data.id){",
													"    pm.environment.set(\"order-id\", data.id); ",
													"}",
													"if(data.key){",
													"    pm.environment.set(\"order-key\", data.key);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"version\": {{cart-version}},\n    \"cart\": {\n        \"typeId\": \"cart\",\n        \"id\": \"{{cart-id}}\"\n    },\n    \"paymentState\": \"Paid\"\n}"
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/orders",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"orders"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
									},
									"response": []
								},
								{
									"name": "Get Order: Check 'Settled' Order",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = pm.response.json();",
													"",
													"pm.test('Check status code', () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});",
													"",
													"pm.test(\"Settled status is set to 'SETTLED'\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-settledStatus']).to.equal('SETTLED');",
													"});",
													"",
													"pm.test(\"'IN PROGRESS' Quest label visible under 'eagleeye-loyaltyEarnAndCredits' property\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-loyaltyEarnAndCredits']).to.include('IN_PROGRESS\\\",\\\"name\\\":\\\"Travel Quest');",
													"});",
													"",
													"pm.test(\"3 Total Objectives Are Registered Under 'eagleeye-loyaltyEarnAndCredits' property\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-loyaltyEarnAndCredits']).to.include('totalObjectives\\\":3');",
													"});",
													"",
													"pm.test(\"1 Total Objective Met Is Registered Under 'eagleeye-loyaltyEarnAndCredits' property\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-loyaltyEarnAndCredits']).to.include('totalObjectivesMet\\\":1');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/orders/{{order-id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"orders",
												"{{order-id}}"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "null"
									},
									"response": []
								},
								{
									"name": "Create Cart: Complete second objective",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = pm.response.json();",
													"",
													"pm.test('Check status code', () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([",
													"        200,",
													"        201",
													"    ]);",
													"})",
													"",
													"pm.test(\"'IN PROGRESS' Quest label visible under 'eagleeye-loyaltyEarnAndCredits' property\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-loyaltyEarnAndCredits']).to.include('IN_PROGRESS\\\",\\\"name\\\":\\\"Travel Quest');",
													"});",
													"",
													"pm.test(\"3 Total Objectives Are Registered Under 'eagleeye-loyaltyEarnAndCredits' property\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-loyaltyEarnAndCredits']).to.include('totalObjectives\\\":3');",
													"});",
													"",
													"pm.test(\"2 Total Objectives Met Are Registered Under 'eagleeye-loyaltyEarnAndCredits' property\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-loyaltyEarnAndCredits']).to.include('totalObjectivesMet\\\":2');",
													"});",
													"",
													"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
													"    pm.environment.set(\"cart-id\", data.results[0].id); ",
													"    pm.environment.set(\"cart-version\", data.results[0].version);",
													"}",
													"if(data.results && data.results[0] && data.results[0].key){",
													"    pm.environment.set(\"cart-key\", data.results[0].key); ",
													"}",
													"if(data.version){",
													"    pm.environment.set(\"cart-version\", data.version);",
													"}",
													"if(data.id){",
													"    pm.environment.set(\"cart-id\", data.id); ",
													"}",
													"if(data.key){",
													"    pm.environment.set(\"cart-key\", data.key);",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"currency\": \"GBP\",\n   \"lineItems\": [\n      {\n         \"sku\": \"245902\",\n         \"quantity\": 1\n      }\n   ],\n   \"shippingAddress\": {\n      \"key\": \"abc-123\",\n      \"country\": \"GB\"\n   },\n   \"custom\": {\n      \"type\": {\n         \"typeId\": \"type\",\n         \"key\": \"custom-cart-type\"\n      },\n      \"fields\": {\n         \"eagleeye-identityValue\": \"{{identityValue}}\"\n      }\n   }\n}"
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/carts",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"carts"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
									},
									"response": []
								},
								{
									"name": "Create Order: Payment State: Paid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = pm.response.json();",
													"",
													"pm.test('Check status code', () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([",
													"        200,",
													"        201",
													"    ]);",
													"})",
													"",
													"setTimeout(() => {}, 5000)",
													"",
													"pm.test(\"'IN PROGRESS' Quest label visible under 'eagleeye-loyaltyEarnAndCredits' property\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-loyaltyEarnAndCredits']).to.include('IN_PROGRESS\\\",\\\"name\\\":\\\"Travel Quest');",
													"});",
													"",
													"pm.test(\"3 Total Objectives Are Registered Under 'eagleeye-loyaltyEarnAndCredits' property\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-loyaltyEarnAndCredits']).to.include('totalObjectives\\\":3');",
													"});",
													"",
													"pm.test(\"2 Total Objectives Met Are Registered Under 'eagleeye-loyaltyEarnAndCredits' property\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-loyaltyEarnAndCredits']).to.include('totalObjectivesMet\\\":2');",
													"});",
													"",
													"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
													"    pm.environment.set(\"order-id\", data.results[0].id); ",
													"    pm.environment.set(\"order-version\", data.results[0].version);",
													"}",
													"if(data.results && data.results[0] && data.results[0].key){",
													"    pm.environment.set(\"order-key\", data.results[0].key); ",
													"}",
													"if(data.version){",
													"    pm.environment.set(\"order-version\", data.version);",
													"}",
													"if(data.id){",
													"    pm.environment.set(\"order-id\", data.id); ",
													"}",
													"if(data.key){",
													"    pm.environment.set(\"order-key\", data.key);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"version\": {{cart-version}},\n    \"cart\": {\n        \"typeId\": \"cart\",\n        \"id\": \"{{cart-id}}\"\n    },\n    \"paymentState\": \"Paid\"\n}"
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/orders",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"orders"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
									},
									"response": []
								},
								{
									"name": "Get Order: Check 'Settled' Order",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = pm.response.json();",
													"",
													"pm.test('Check status code', () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});",
													"",
													"pm.test(\"Settled status is set to 'SETTLED'\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-settledStatus']).to.equal('SETTLED');",
													"});",
													"",
													"pm.test(\"'IN PROGRESS' Quest label visible under 'eagleeye-loyaltyEarnAndCredits' property\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-loyaltyEarnAndCredits']).to.include('IN_PROGRESS\\\",\\\"name\\\":\\\"Travel Quest');",
													"});",
													"",
													"pm.test(\"3 Total Objectives Are Registered Under 'eagleeye-loyaltyEarnAndCredits' property\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-loyaltyEarnAndCredits']).to.include('totalObjectives\\\":3');",
													"});",
													"",
													"pm.test(\"2 Total Objectives Met Are Registered Under 'eagleeye-loyaltyEarnAndCredits' property\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-loyaltyEarnAndCredits']).to.include('totalObjectivesMet\\\":2');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/orders/{{order-id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"orders",
												"{{order-id}}"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "null"
									},
									"response": []
								},
								{
									"name": "Create Cart: Complete final objective",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = pm.response.json();",
													"",
													"pm.test('Check status code', () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([",
													"        200,",
													"        201",
													"    ]);",
													"})",
													"",
													"pm.test(\"Total Points And Offer Are Registered Under Line Item's 'eagleeye-loyaltyEarnAndCredits' property\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-loyaltyEarnAndCredits']).to.include('COMPLETING\\\",\\\"name\\\":\\\"Travel Quest\\\",\\\"amount\\\":2000');",
													"});",
													"",
													"pm.test(\"3 Total Objectives Are Registered Under 'eagleeye-loyaltyEarnAndCredits' property\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-loyaltyEarnAndCredits']).to.include('totalObjectives\\\":3');",
													"});",
													"",
													"pm.test(\"3 Total Objectives Met Are Registered Under 'eagleeye-loyaltyEarnAndCredits' property\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-loyaltyEarnAndCredits']).to.include('totalObjectivesMet\\\":3');",
													"});",
													"",
													"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
													"    pm.environment.set(\"cart-id\", data.results[0].id); ",
													"    pm.environment.set(\"cart-version\", data.results[0].version);",
													"}",
													"if(data.results && data.results[0] && data.results[0].key){",
													"    pm.environment.set(\"cart-key\", data.results[0].key); ",
													"}",
													"if(data.version){",
													"    pm.environment.set(\"cart-version\", data.version);",
													"}",
													"if(data.id){",
													"    pm.environment.set(\"cart-id\", data.id); ",
													"}",
													"if(data.key){",
													"    pm.environment.set(\"cart-key\", data.key);",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"currency\": \"GBP\",\n   \"lineItems\": [\n      {\n         \"sku\": \"245882\",\n         \"quantity\": 1\n      }\n   ],\n   \"shippingAddress\": {\n      \"key\": \"abc-123\",\n      \"country\": \"GB\"\n   },\n   \"custom\": {\n      \"type\": {\n         \"typeId\": \"type\",\n         \"key\": \"custom-cart-type\"\n      },\n      \"fields\": {\n         \"eagleeye-identityValue\": \"{{identityValue}}\"\n      }\n   }\n}"
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/carts",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"carts"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
									},
									"response": []
								},
								{
									"name": "Create Order: Payment State: Paid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = pm.response.json();",
													"",
													"pm.test('Check status code', () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([",
													"        200,",
													"        201",
													"    ]);",
													"})",
													"",
													"setTimeout(() => {}, 5000)",
													"",
													"pm.test(\"Total Points And Offer Are Registered Under Line Item's 'eagleeye-loyaltyEarnAndCredits' property\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-loyaltyEarnAndCredits']).to.include('COMPLETING\\\",\\\"name\\\":\\\"Travel Quest\\\",\\\"amount\\\":2000');",
													"});",
													"",
													"pm.test(\"3 Total Objectives Are Registered Under 'eagleeye-loyaltyEarnAndCredits' property\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-loyaltyEarnAndCredits']).to.include('totalObjectives\\\":3');",
													"});",
													"",
													"pm.test(\"3 Total Objectives Met Are Registered Under 'eagleeye-loyaltyEarnAndCredits' property\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-loyaltyEarnAndCredits']).to.include('totalObjectivesMet\\\":3');",
													"});",
													"",
													"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
													"    pm.environment.set(\"order-id\", data.results[0].id); ",
													"    pm.environment.set(\"order-version\", data.results[0].version);",
													"}",
													"if(data.results && data.results[0] && data.results[0].key){",
													"    pm.environment.set(\"order-key\", data.results[0].key); ",
													"}",
													"if(data.version){",
													"    pm.environment.set(\"order-version\", data.version);",
													"}",
													"if(data.id){",
													"    pm.environment.set(\"order-id\", data.id); ",
													"}",
													"if(data.key){",
													"    pm.environment.set(\"order-key\", data.key);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"version\": {{cart-version}},\n    \"cart\": {\n        \"typeId\": \"cart\",\n        \"id\": \"{{cart-id}}\"\n    },\n    \"paymentState\": \"Paid\"\n}"
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/orders",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"orders"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
									},
									"response": []
								},
								{
									"name": "Get Order: Check 'Settled' Order",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = pm.response.json();",
													"",
													"pm.test('Check status code', () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});",
													"",
													"pm.test(\"Settled status is set to 'SETTLED'\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-settledStatus']).to.equal('SETTLED');",
													"});",
													"",
													"pm.test(\"Total Points And Offer Are Registered Under Line Item's 'eagleeye-loyaltyEarnAndCredits' property\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-loyaltyEarnAndCredits']).to.include('COMPLETING\\\",\\\"name\\\":\\\"Travel Quest\\\",\\\"amount\\\":2000');",
													"});",
													"",
													"pm.test(\"3 Total Objectives Are Registered Under 'eagleeye-loyaltyEarnAndCredits' property\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-loyaltyEarnAndCredits']).to.include('totalObjectives\\\":3');",
													"});",
													"",
													"pm.test(\"3 Total Objectives Met Are Registered Under 'eagleeye-loyaltyEarnAndCredits' property\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-loyaltyEarnAndCredits']).to.include('totalObjectivesMet\\\":3');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/orders/{{order-id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"orders",
												"{{order-id}}"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "null"
									},
									"response": []
								}
							]
						},
						{
							"name": "Single Transaction",
							"item": [
								{
									"name": "Create new wallet",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Load global pre-request script object",
													"var ee = eval(pm.globals.get('ees'));",
													"ee.setUrl('medusaUrl');",
													"",
													"// Set up any environment variables",
													"pm.environment.set('value', CryptoJS.lib.WordArray.random(128/8).toString());",
													"",
													"// Call the global authentication function",
													"ee.auth();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"tests[\"Status code is 201\"] = responseCode.code === 201;",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"pm.environment.set('walletId', jsonData.walletId);",
													"pm.environment.set('identityValue', jsonData.identities[0].value);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-EES-AUTH-HASH",
												"value": "{{xAuthHash}}"
											},
											{
												"key": "X-EES-AUTH-CLIENT-ID",
												"value": "{{xAuthClientId}}"
											},
											{
												"key": "X-AUTH-HASH",
												"value": "{{xAuthHash}}"
											},
											{
												"key": "X-AUTH-CLIENT-ID",
												"value": "{{xAuthClientId}}"
											},
											{
												"key": "X-TRANSACTION-ID",
												"value": "{{xTransactionId}}"
											},
											{
												"key": "X-RETRY",
												"value": "1"
											},
											{
												"key": "X-EES-OPERATOR",
												"value": "1"
											},
											{
												"key": "X-EES-CALLER",
												"value": "POSTMAN"
											},
											{
												"key": "X-EES-CALLER-VERSION",
												"value": "0"
											},
											{
												"key": "X-EES-MESSAGEID",
												"value": "03d476861afd384510f2cb80ccfa8511"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\": \"CONSUMER\",\n    \"identities\": [\n        {\n            \"type\": \"CUSTOMER_ID\",\n            \"value\": \"{{value}}\"\n        }\n    ],\n    \"accounts\": {\n        \"campaign\": [\n            {\n                \"campaignId\": \"1762406\"\n            }\n        ],\n        \"scheme\": [\n            {\n                \"status\": \"ACTIVE\",\n                \"schemeId\": \"{{schemeId}}\"\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "{{url}}/services/wallet/accounts",
											"host": [
												"{{url}}"
											],
											"path": [
												"services",
												"wallet",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Obtain access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"var data = JSON.parse(responseBody);",
													"if(data.access_token){",
													"    pm.environment.set(\"ctp_access_token\", data.access_token);",
													"}",
													"if (data.scope) {",
													"    parts = data.scope.split(\" \");",
													"    parts = parts.filter(scope => scope.includes(\":\")).map(scope => scope.split(\":\"))",
													"    if (parts.length > 0) {",
													"        scopeParts = parts[0];",
													"        pm.environment.set(\"project-key\", scopeParts[1]);",
													"        parts = parts.filter(scope => scope.length >= 3)",
													"        if (parts.length > 0) {",
													"            scopeParts = parts[0];",
													"            pm.environment.set(\"store-key\", scopeParts[2]);",
													"        }",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{client_id}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{client_secret}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{auth_url}}/oauth/token?grant_type=client_credentials",
											"host": [
												"{{auth_url}}"
											],
											"path": [
												"oauth",
												"token"
											],
											"query": [
												{
													"key": "grant_type",
													"value": "client_credentials"
												}
											]
										},
										"description": "Use this request to obtain an access token for your commercetools platform project via Client Credentials Flow. As a prerequisite you must have filled out environment variables in Postman for projectKey, client_id and client_secret to use this."
									},
									"response": []
								},
								{
									"name": "Create Cart: Complete all objectives",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = pm.response.json();",
													"",
													"pm.test('Check status code', () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([",
													"        200,",
													"        201",
													"    ]);",
													"})",
													"",
													"pm.test(\"Total Points And Offer Are Registered Under Line Item's 'eagleeye-loyaltyEarnAndCredits' property\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-loyaltyEarnAndCredits']).to.include('COMPLETING\\\",\\\"name\\\":\\\"Travel Quest\\\",\\\"amount\\\":2000');",
													"});",
													"",
													"pm.test(\"3 Total Objectives Are Registered Under 'eagleeye-loyaltyEarnAndCredits' property\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-loyaltyEarnAndCredits']).to.include('totalObjectives\\\":3');",
													"});",
													"",
													"pm.test(\"3 Total Objectives Met Are Registered Under 'eagleeye-loyaltyEarnAndCredits' property\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-loyaltyEarnAndCredits']).to.include('totalObjectivesMet\\\":3');",
													"});",
													"",
													"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
													"    pm.environment.set(\"cart-id\", data.results[0].id); ",
													"    pm.environment.set(\"cart-version\", data.results[0].version);",
													"}",
													"if(data.results && data.results[0] && data.results[0].key){",
													"    pm.environment.set(\"cart-key\", data.results[0].key); ",
													"}",
													"if(data.version){",
													"    pm.environment.set(\"cart-version\", data.version);",
													"}",
													"if(data.id){",
													"    pm.environment.set(\"cart-id\", data.id); ",
													"}",
													"if(data.key){",
													"    pm.environment.set(\"cart-key\", data.key);",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"currency\": \"GBP\",\n   \"lineItems\": [\n      {\n         \"sku\": \"245903\",\n         \"quantity\": 1\n      },\n      {\n         \"sku\": \"245902\",\n         \"quantity\": 1\n      },\n      {\n         \"sku\": \"245882\",\n         \"quantity\": 1\n      }\n\n   ],\n   \"shippingAddress\": {\n      \"key\": \"abc-123\",\n      \"country\": \"GB\"\n   },\n   \"custom\": {\n      \"type\": {\n         \"typeId\": \"type\",\n         \"key\": \"custom-cart-type\"\n      },\n      \"fields\": {\n         \"eagleeye-identityValue\": \"{{identityValue}}\"\n      }\n   }\n}"
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/carts",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"carts"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
									},
									"response": []
								},
								{
									"name": "Create Order: Payment State: Paid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = pm.response.json();",
													"",
													"pm.test('Check status code', () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([",
													"        200,",
													"        201",
													"    ]);",
													"})",
													"",
													"setTimeout(() => {}, 5000)",
													"",
													"pm.test(\"Total Points And Offer Are Registered Under Line Item's 'eagleeye-loyaltyEarnAndCredits' property\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-loyaltyEarnAndCredits']).to.include('COMPLETING\\\",\\\"name\\\":\\\"Travel Quest\\\",\\\"amount\\\":2000');",
													"});",
													"",
													"pm.test(\"3 Total Objectives Are Registered Under 'eagleeye-loyaltyEarnAndCredits' property\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-loyaltyEarnAndCredits']).to.include('totalObjectives\\\":3');",
													"});",
													"",
													"pm.test(\"3 Total Objectives Met Are Registered Under 'eagleeye-loyaltyEarnAndCredits' property\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-loyaltyEarnAndCredits']).to.include('totalObjectivesMet\\\":3');",
													"});",
													"",
													"if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
													"    pm.environment.set(\"order-id\", data.results[0].id); ",
													"    pm.environment.set(\"order-version\", data.results[0].version);",
													"}",
													"if(data.results && data.results[0] && data.results[0].key){",
													"    pm.environment.set(\"order-key\", data.results[0].key); ",
													"}",
													"if(data.version){",
													"    pm.environment.set(\"order-version\", data.version);",
													"}",
													"if(data.id){",
													"    pm.environment.set(\"order-id\", data.id); ",
													"}",
													"if(data.key){",
													"    pm.environment.set(\"order-key\", data.key);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"version\": {{cart-version}},\n    \"cart\": {\n        \"typeId\": \"cart\",\n        \"id\": \"{{cart-id}}\"\n    },\n    \"paymentState\": \"Paid\"\n}"
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/orders",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"orders"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Creating a Cart fails with an [InvalidOperation](ctp:api:type:InvalidOperationError) error if the\n[ShippingMethod](ctp:api:type:ShippingMethod) referenced in the CartDraft\nhas a `predicate` that does not match the Cart.\n"
									},
									"response": []
								},
								{
									"name": "Get Order: Check 'Settled' Order",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = pm.response.json();",
													"",
													"pm.test('Check status code', () => {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});",
													"",
													"pm.test(\"Settled status is set to 'SETTLED'\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-settledStatus']).to.equal('SETTLED');",
													"});",
													"",
													"pm.test(\"Total Points And Offer Are Registered Under Line Item's 'eagleeye-loyaltyEarnAndCredits' property\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-loyaltyEarnAndCredits']).to.include('COMPLETING\\\",\\\"name\\\":\\\"Travel Quest\\\",\\\"amount\\\":2000');",
													"});",
													"",
													"pm.test(\"3 Total Objectives Are Registered Under 'eagleeye-loyaltyEarnAndCredits' property\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-loyaltyEarnAndCredits']).to.include('totalObjectives\\\":3');",
													"});",
													"",
													"pm.test(\"3 Total Objectives Met Are Registered Under 'eagleeye-loyaltyEarnAndCredits' property\", function () {",
													"    pm.expect(data.custom.fields['eagleeye-loyaltyEarnAndCredits']).to.include('totalObjectivesMet\\\":3');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "{{ctp_access_token}}",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "Bearer",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}/{{project-key}}/orders/{{order-id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{project-key}}",
												"orders",
												"{{order-id}}"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "null"
									},
									"response": []
								}
							]
						}
					],
					"description": "Both continuity and quest offers are points-based rewards with objectives that can be completed in separate transactions or in a single transaction."
				}
			],
			"description": "Loyalty points are added to the cart custom fields `eagleeye-loyaltyCredits` and `eagleeye-loyaltyEarnAndCredits`"
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "accessToken",
				"value": "{{ctp_access_token}}",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			},
			{
				"key": "tokenType",
				"value": "Bearer",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.globals.set('ees', function ees() {",
					"    let ee = {};",
					"    ee.url = function() {",
					"        let url = pm.request.url.toString();",
					"        return url.slice(url.indexOf('/')).replace(/{{(\\w*)}}/g, function(str, key) {",
					"            return pm.environment.get(key);",
					"        }).replace(/!/g, '%21');",
					"    };",
					"    ee.payload = function() {",
					"        let payload = '';",
					"        if ('undefined' !== typeof pm.request.body && 'undefined' !== typeof pm.request.body.raw) {",
					"            payload = pm.request.body.raw;",
					"        }",
					"",
					"        if ('' === payload) {",
					"            return '';",
					"        }",
					"        return payload.replace(/{{(\\w*)}}/g, function(str, key) {",
					"            return pm.environment.get(key);",
					"        });",
					"    };",
					"    ee.hash = function() {",
					"        return CryptoJS.SHA256(",
					"            ee.url() + ee.payload() + pm.environment.get('ee_client_secret')",
					"        ).toString();",
					"    };",
					"    ee.transaction = function() {",
					"        return CryptoJS.MD5(new Date().getTime().toString()).toString();",
					"    };",
					"    ee.setUrl = function(key) {",
					"        if (pm.environment.has(key)) {",
					"            console.log(`Setting url for key ${key} to ${pm.environment.get(key)}`)",
					"            pm.environment.set('url', pm.environment.get(key));",
					"        }",
					"    };",
					"    ee.auth = function() {",
					"        pm.globals.set('xAuthHash', ee.hash());",
					"        pm.globals.set('xAuthClientId', pm.environment.get('ee_client_id'));",
					"        pm.globals.set('xTransactionId', ee.transaction());",
					"    };",
					"    ee.pad = function(str, len) {",
					"        str.toString().padStart(len, '0');",
					"    };",
					"    ee.getCurrentAtomDateTime = function() {",
					"        let now = new Date();",
					"        return now.getUTCFullYear() +",
					"            '-' + ee.pad((now.getUTCMonth() + 1), 2) +",
					"            '-' + ee.pad(now.getUTCDate(), 2) +",
					"            'T' + ee.pad(now.getUTCHours(), 2) +",
					"            ':' + ee.pad(now.getUTCMinutes(), 2) +",
					"            ':' + ee.pad(now.getUTCSeconds(), 2) +",
					"            '+' + ee.pad((now.getTimezoneOffset() / -60), 2) + ':00';",
					"    };",
					"    return ee;",
					"} + '; ees();');",
					"",
					"tests['Global pre-request scripts loaded'] = true;"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "customOpenLevelDiscountItemID",
			"value": ""
		},
		{
			"key": "customItemLevelDiscountItemID",
			"value": ""
		},
		{
			"key": "customBasketLevelDiscountItemID",
			"value": ""
		},
		{
			"key": "customTargetedBasketDiscountItemID",
			"value": ""
		},
		{
			"key": "customOpenBasketDiscountItemID",
			"value": ""
		},
		{
			"key": "customItemDiscountId",
			"value": ""
		},
		{
			"key": "customBasketDiscountTokenId",
			"value": ""
		},
		{
			"key": "customItemDiscountTokenId",
			"value": ""
		},
		{
			"key": "invalidDiscountCode",
			"value": ""
		},
		{
			"key": "customShippingDiscountTokenId",
			"value": ""
		},
		{
			"key": "customMealDiscountTokenId",
			"value": ""
		},
		{
			"key": "itemLevelDiscountToken",
			"value": ""
		},
		{
			"key": "itemDiscountToken",
			"value": ""
		},
		{
			"key": "basketDiscountToken",
			"value": ""
		},
		{
			"key": "multiItemDiscountToken",
			"value": ""
		},
		{
			"key": "shippingDiscountToken",
			"value": ""
		}
	]
}